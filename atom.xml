<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[SotoSeattle]]></title>
  <link href="http://sotoseattle.github.io/atom.xml" rel="self"/>
  <link href="http://sotoseattle.github.io/"/>
  <updated>2016-06-18T13:27:59-07:00</updated>
  <id>http://sotoseattle.github.io/</id>
  <author>
    <name><![CDATA[Javier Soto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[Psyc Founders Out]]></title>
    <link href="http://sotoseattle.github.io/blog/2016/06/18/Founders/"/>
    
    <updated>2016-06-18T13:14:40-07:00</updated>
    <id>http://sotoseattle.github.io/blog/2016/06/18/Founders</id>
    
    <content type="html"><![CDATA[<p>In terms of relative weight, when investing in a startup, the quality of management and specifically of the Founder/CEO is the single most important driver of success. It is not the only one, many other pieces need to fit together too, but the caliber of the head of the organization is the main necessary condition.</p>

<!--more-->

<p><img class="right" src="http://sotoseattle.github.io/images/jun16/handrabbit.jpg" width="300" /></p>

<p>Zeroing in the Founders, there are many aspects to consider when analyzing the leadership of a startup, and as investors we tend to fall into the false complacency of factual information. If something can be quantified or at least backed up by facts, then we have a good proxy to analyze, compare and assess. Again, these types of variables are all great and dandy, but for me they are just a necessary condition, not sufficient.</p>

<p>Beyond the facts of a Founder’s profile there is a personality, and beyond the personality there are things as immaterial and diffuse as motivations, goals and perspectives. These are more difficult to assess because they are subjective in nature and do not conform to easy typecasting.</p>

<p>I do believe that many investors can assess facts and crunch numbers with greater accuracy, so there is little competitive advantage there to be gained by those of us who are not from Lake Wobegon. But I also believe that there is a lot of money to be made by correctly assessing the imponderables, the subjective and the ill defined.</p>

<p><em>Founder’s Motivation</em></p>

<p>Why do it? Why go through all the pains and stresses? Behind a facade of drive the real reasons that propel a Founder may be varied. Some perceived weaknesses can become great sources of strength, yet others can be ticking bombs that will doom the enterprise down the road.</p>

<ul>
  <li>
    <p>Is she trying to prove something to herself? Or is she trying to measure up in someone’s eyes? Is she self aware of her own motivations? No need to be Zen, just wise enough or able enough to listen outside of one’s bubble.</p>
  </li>
  <li>
    <p>If this is a career change, does it carry a sense of entitlement born out of a successful career in a corporate environment or upbringing?</p>
  </li>
  <li>
    <p>Is that drive to connect with others (investors, clients, employees) a personality trait borne out of empathy and discipline, or is it a reflection of a deeper need to be in the spotlight (i.e. narcissistic tendencies)?</p>
  </li>
  <li>
    <p>The fact that she climbed the 7 tallest mountains or likes to parachute on Sundays, is it a reflection of drive or is it of a deeper inability to stay put, and a pathological need to push the limits? I want risk takers, not testosterone-unhinged thrill-seekers.</p>
  </li>
</ul>

<p><em>Founder’s POV</em></p>

<p>For all the talk about understanding customers and putting on other’s peoples shoes (gross), we as investors should walk the walk and try to see through the Founder’s eyes. This is closely related to the previous point of understanding the Founder’s motivations.</p>

<p>As investors we analyze the startup from the little understanding we slowly accumulate of the company in a short period of time. The whats, whys and hows. From the outside. It is only natural and logical. Furthermore, and at the expense of sounding corny, we do not tend to see things as they are; but as we are. From our personal experience and point of view.</p>

<p>I think it is valuable to complement this with an understanding of how the Founder actually thinks about the startup. Does she sees things the way we do? Does she connect the dots and evaluate the different parts in the same way we do?</p>

<p>What does she care about most? What do her actions tell us about how she behaves towards the interests of the different stakeholders? (employees, investors, clients).</p>

<p>What is she afraid of? For sure she has thought about failure scenarios. What are her real barriers to exit? Not only material but reputational. For some, a failure with somebody else’s money can be seen a badge of honor in a startup career, an experiential stepping stone or a sabbatical.</p>

<p>Beyond engaging in conversation with Founders, the materials they present can tell a story too. Discounting the abused business jargon there is always a choice when selecting ideas and words. Like witnesses interviewed by the police, we cannot help ourselves and end up giving clues of what we really think, fear and motivates us. Up to what degree is the Founder aware of this? Awareness is a plus in my book, but how do you tell the self aware from the smooth operator?</p>

<p>Additionally, I have found that another source of insight is the financial projections the Founders prepare. As future forecasting they are by nature not very useful, but sometimes they say quite a lot about how the Founders understand their company today.</p>

<p><em>Last Thoughts</em></p>

<p>There is no need to be cynical or negative about all this. My point is that we need to step away from the marketed and hyped profiles of Founders of today and see them as fleshed out humans. No startup is perfect, no Investor is perfect, and no Founder is perfect either. We just need to make sure that our assumptions, understanding and incentives are in line with those of the Founders, and that, overall, the startup story is consistent, coherent and makes sense across its many dimensions.</p>

<p>I leave to the reader the exercise of figuring out what this post says about me and about how I see Angel Investing.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Ruby Continuations]]></title>
    <link href="http://sotoseattle.github.io/blog/2015/12/05/ruby-continuations/"/>
    
    <updated>2015-12-05T12:14:40-08:00</updated>
    <id>http://sotoseattle.github.io/blog/2015/12/05/ruby-continuations</id>
    
    <content type="html"><![CDATA[<p>Continuations are a useful device for many coding tasks. I like to visualize them as portals or wormholes that connect different parts of your code. Continuations allow you to hyper-jump from one place of your executing code to another without missing a bit. The following is an example of how they can be used:</p>

<p><img class="center" src="http://sotoseattle.github.io/images/dec15/portal.jpg" width="800" />
<!--more--></p>

<blockquote>
  <p>Given a binary tree and two nodes A and B from within that tree, write a function to find the node which is the first common ancestor of A and B.</p>
</blockquote>

<p>The first thing to do is find the chain of parents of a given node inside a tree. Once we have the genealogy of both nodes (A &amp; B), it is fairly simply to find the common ancestor. It is in this method for finding the parents of a node where we use continuations.</p>

<p>You already know how to search binary trees, depth or breadth first, and you could just traverse the tree in search of the nodes and pick up the parents as you go along. That is not intrinsically difficult and there are many examples on the Internet. The problem is that you need to run through the whole tree every time you initiate a search. Could there be a way to stop moving along the tree once you find the node and simple return to sender? Yes, with continuations.</p>

<p><img class="right" src="http://sotoseattle.github.io/images/dec15/treesearch.png" width="300" /></p>

<p>Intuitively what we want is something similar to the following:</p>

<ul>
  <li>We open a portal at the root or beginning of the tree. This portal is where we want to go back to when we find The Node. It is our way back home for when we get lost in the recurring calls throughout the tree.</li>
  <li>Once we secure a way back, we jump into the rabbit hole, we start searching the tree, going from node to node, a dazzling pin-ball.</li>
  <li>As we go along, as we search for The Node, we keep a bread crumb track of the path taken.</li>
  <li>After many jumps among nodes, already disoriented, we arrive to The Node we were after. But, alas! our tree is made of nodes that do not link upwards to parents, only downwards to children, so we cannot use our bread crumbs to dig ourselves back to the root!</li>
  <li>No sweat, we have an opened portal at the root and, as we all know from Cosmology 101, we can always open the other end of the wormhole with our sonic screwdriver and get back to safety.</li>
</ul>

<p>The final code would look like the following. I leave up to you to make sense of the details (the Internet is full of better explanations than this one :-).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Ancestry</span>
</span><span class="line">  <span class="nb">require</span> <span class="s1">&#39;continuation&#39;</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">ancestors</span> <span class="n">node</span>
</span><span class="line">    <span class="n">portal</span> <span class="o">=</span> <span class="nb">callcc</span> <span class="p">{</span><span class="o">|</span><span class="n">cont</span><span class="o">|</span> <span class="n">cont</span><span class="p">}</span>                   <span class="c1"># open cosmological-portal (brrrrzzzzzuinga!!)</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">portal</span> <span class="k">unless</span> <span class="n">portal</span><span class="o">.</span><span class="n">is_a?</span> <span class="no">Continuation</span>  <span class="c1"># return whatever was sent through the portal</span>
</span><span class="line">
</span><span class="line">    <span class="n">find</span> <span class="n">node</span><span class="p">,</span> <span class="o">[]</span><span class="p">,</span> <span class="n">portal</span>                           <span class="c1"># go down the rabbit hole in search of node</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">find</span> <span class="n">n</span><span class="p">,</span> <span class="n">crumbtrail</span><span class="p">,</span> <span class="n">getaway</span>
</span><span class="line">    <span class="n">getaway</span><span class="o">.</span><span class="n">call</span> <span class="n">crumbtrail</span> <span class="k">if</span> <span class="nb">self</span> <span class="o">==</span> <span class="n">n</span>            <span class="c1"># if found, send ancestry logbook through the portal</span>
</span><span class="line">
</span><span class="line">    <span class="p">(</span><span class="vi">@left</span>  <span class="o">&amp;&amp;</span> <span class="vi">@left</span><span class="o">.</span><span class="n">find</span><span class="p">(</span> <span class="n">n</span><span class="p">,</span> <span class="n">crumbtrail</span> <span class="o">+</span> <span class="o">[</span><span class="nb">self</span><span class="o">]</span><span class="p">,</span> <span class="n">getaway</span><span class="p">))</span> <span class="o">||</span>
</span><span class="line">    <span class="p">(</span><span class="vi">@right</span> <span class="o">&amp;&amp;</span> <span class="vi">@right</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">crumbtrail</span> <span class="o">+</span> <span class="o">[</span><span class="nb">self</span><span class="o">]</span><span class="p">,</span> <span class="n">getaway</span><span class="p">))</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">common_ancestor</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span>
</span><span class="line">    <span class="p">(</span><span class="nb">ancestors</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">&amp;</span> <span class="nb">ancestors</span><span class="p">(</span><span class="n">b</span><span class="p">))</span><span class="o">.</span><span class="n">last</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Bintree</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Ancestry</span>
</span><span class="line">  <span class="kp">attr_accessor</span> <span class="ss">:val</span><span class="p">,</span> <span class="ss">:left</span><span class="p">,</span> <span class="ss">:right</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span> <span class="n">val</span>
</span><span class="line">    <span class="vi">@left</span> <span class="o">=</span> <span class="vi">@right</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class="line">    <span class="vi">@val</span> <span class="o">=</span> <span class="n">val</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Seattle Ruby Game Of Life]]></title>
    <link href="http://sotoseattle.github.io/blog/2015/03/04/Seattlerb-GoL/"/>
    
    <updated>2015-03-04T10:00:00-08:00</updated>
    <id>http://sotoseattle.github.io/blog/2015/03/04/Seattlerb-GoL</id>
    
    <content type="html"><![CDATA[<p><img class="right" src="http://sotoseattle.github.io/images/mar15/wheel.png" width="250" /></p>

<p>Last Tuesday the Seattle Ruby group organized a workshop to code Conway’s Game of Life. It was a first (at least in a long time), and I think it was a success. People were engaged and everybody was focused coding away in the 45 minutes we had. We even had a Wheel of Misfortune so people could add randomized constraints in case the problem was too easy.</p>

<p>A repository was published prior to the event so people could familiarized themselves with the problem. <a href="https://github.com/SeaRbSg/workshops">Repo</a>. The following are some examples included in the common repo from some contributors:</p>

<p>Lito Nicolai had an amazing implementation using matrices:</p>

<!--more-->

<p><br /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;matrix&#39;</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;./matrix_math&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">sum</span> <span class="n">l</span>
</span><span class="line">  <span class="n">l</span><span class="o">.</span><span class="n">reduce</span> <span class="ss">:+</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">twos</span> <span class="n">grid</span>
</span><span class="line">  <span class="n">grid</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">2</span> <span class="k">then</span> <span class="mi">1</span> <span class="k">else</span> <span class="mi">0</span> <span class="k">end</span><span class="p">}</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">threes</span> <span class="n">grid</span>
</span><span class="line">  <span class="n">grid</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">3</span> <span class="k">then</span> <span class="mi">1</span> <span class="k">else</span> <span class="mi">0</span> <span class="k">end</span><span class="p">}</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">neighbors</span> <span class="n">grid</span>
</span><span class="line">  <span class="n">sum</span><span class="p">(</span> <span class="o">[-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">].</span><span class="n">product</span><span class="p">(</span><span class="o">[-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">|</span> <span class="n">grid</span><span class="o">.</span><span class="n">rotate</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="p">}</span> <span class="p">)</span> <span class="o">-</span> <span class="n">grid</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">life</span> <span class="n">grid</span>
</span><span class="line">  <span class="p">((</span><span class="n">twos</span> <span class="n">neighbors</span> <span class="n">grid</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">grid</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">threes</span> <span class="n">neighbors</span> <span class="n">grid</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For my part, the most simple code I could come up with was a purely functional implementation:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">GOL</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="n">living</span><span class="p">)</span>
</span><span class="line">    <span class="n">potential</span> <span class="o">=</span> <span class="n">living</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="n">neighbors</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">flatten</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">uniq</span> <span class="o">-</span> <span class="n">living</span>
</span><span class="line">
</span><span class="line">    <span class="n">new_board</span> <span class="o">=</span> <span class="n">living</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">cell</span><span class="o">|</span> <span class="n">alive_around</span><span class="p">(</span><span class="n">cell</span><span class="p">,</span> <span class="n">living</span><span class="p">)</span><span class="o">.</span><span class="n">between?</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">    <span class="n">new_board</span> <span class="o">+=</span> <span class="n">potential</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">cell</span><span class="o">|</span> <span class="n">alive_around</span><span class="p">(</span><span class="n">cell</span><span class="p">,</span> <span class="n">living</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">new_board</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">neighbors</span><span class="p">(</span><span class="n">cell</span><span class="p">)</span>
</span><span class="line">    <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">cell</span>
</span><span class="line">    <span class="o">[</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="o">].</span><span class="n">product</span><span class="p">(</span><span class="o">[</span><span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">y</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span><span class="p">)</span> <span class="o">-</span> <span class="o">[[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">]]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">alive_around</span><span class="p">(</span><span class="n">cell</span><span class="p">,</span> <span class="n">board</span><span class="p">)</span>
</span><span class="line">    <span class="n">neighbors</span><span class="p">(</span><span class="n">cell</span><span class="p">)</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="n">board</span><span class="o">.</span><span class="n">include?</span> <span class="n">c</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ryan Davis not only contributed with code but with a visualization library based on GOSU. See it in action as it helps visualize the code of two different approaches written by Ryan and Scott Windsor.</p>

<p><br /></p>

<p><img class="left" src="http://sotoseattle.github.io/images/mar15/zen_gol.gif" width="420" />
<img class="right" src="http://sotoseattle.github.io/images/mar15/sentientmonkey_gol.gif" width="420" /></p>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Article Published]]></title>
    <link href="http://sotoseattle.github.io/blog/2015/03/01/CodeFellows/"/>
    
    <updated>2015-03-01T10:00:00-08:00</updated>
    <id>http://sotoseattle.github.io/blog/2015/03/01/CodeFellows</id>
    
    <content type="html"><![CDATA[<p>Just a brief note to announce that Code Fellows has published a guest post I wrote.</p>

<p>Enjoy the amazing wisdom it distills at: <a href="https://www.codefellows.org/blog/learning-rails-5-tips-to-become-an-exceptional-rails-developer">Article</a></p>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Game of Life in Scheme]]></title>
    <link href="http://sotoseattle.github.io/blog/2015/02/15/Scheme-GOL/"/>
    
    <updated>2015-02-15T10:00:00-08:00</updated>
    <id>http://sotoseattle.github.io/blog/2015/02/15/Scheme-GOL</id>
    
    <content type="html"><![CDATA[<p><img class="right" src="http://sotoseattle.github.io/images/feb15/gol_scheme.gif" width="250" /></p>

<p>I am going through the <a href="https://www.goodreads.com/book/show/475858.The_Seasoned_Schemer">Seasoned Schemer</a>, the second part of the legendary Socratic Scheme books.</p>

<p>As an exercise, and coinciding with an upcoming workshop organized by Seattle Ruby, I have coded Conway’s Game of Life in Scheme. It is not perfect and only uses the syntax and concepts learned in the Scheme textbooks up to the use of letrecc (Chapter 12 I think).</p>

<p>The complete code can be found in my repo at the Seattle Study Group (<a href="https://github.com/SeaRbSg/little-schemer/tree/master/sotoseattle/sandbox/game_of_life">Code</a>).</p>

<p>The animated gif is a visualization of the code written.</p>

<!--more-->
<p><br /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
</pre></td><td class="code"><pre><code class="scheme"><span class="line"><span class="o">#</span><span class="nv">lang</span> <span class="nv">racket/base</span>
</span><span class="line">
</span><span class="line"><span class="c1">; Cell Utility Functions ------------------------------------------------------</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">x-coord</span> <span class="nv">cell</span><span class="p">)</span> <span class="p">(</span><span class="nb">car </span><span class="nv">cell</span><span class="p">))</span>
</span><span class="line"><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">y-coord</span> <span class="nv">cell</span><span class="p">)</span> <span class="p">(</span><span class="nb">car </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">cell</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="k">define </span><span class="nv">include?</span>  <span class="c1">; does a board include a specific cell?</span>
</span><span class="line">  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">cell</span> <span class="nv">list</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nf">letrec</span>
</span><span class="line">      <span class="p">((</span><span class="nf">==?</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">c2</span><span class="p">)</span>
</span><span class="line">          <span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nb">eq? </span><span class="p">(</span><span class="nf">x-coord</span> <span class="nv">cell</span><span class="p">)</span> <span class="p">(</span><span class="nf">x-coord</span> <span class="nv">c2</span><span class="p">))</span>
</span><span class="line">               <span class="p">(</span><span class="nb">eq? </span><span class="p">(</span><span class="nf">y-coord</span> <span class="nv">cell</span><span class="p">)</span> <span class="p">(</span><span class="nf">y-coord</span> <span class="nv">c2</span><span class="p">)))))</span>
</span><span class="line">       <span class="p">(</span><span class="nf">in?</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">l</span><span class="p">)</span>
</span><span class="line">         <span class="p">(</span><span class="nf">cond</span>
</span><span class="line">           <span class="p">[(</span><span class="nb">null? </span><span class="nv">l</span><span class="p">)</span> <span class="no">#f</span><span class="p">]</span>
</span><span class="line">           <span class="p">[</span><span class="k">else </span><span class="p">(</span><span class="k">or </span><span class="p">(</span><span class="nf">==?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span> <span class="p">(</span><span class="nf">in?</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">)))]))))</span>
</span><span class="line">      <span class="p">(</span><span class="nf">in?</span> <span class="nv">list</span><span class="p">))))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="k">define </span><span class="nv">uniq</span>  <span class="c1">; remove duplicate cells in a list</span>
</span><span class="line">  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">lat</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nf">cond</span>
</span><span class="line">      <span class="p">[(</span><span class="nb">null? </span><span class="nv">lat</span><span class="p">)</span> <span class="nv">lat</span><span class="p">]</span>
</span><span class="line">      <span class="p">[(</span><span class="nf">include?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">))</span> <span class="p">(</span><span class="nf">uniq</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">))]</span>
</span><span class="line">      <span class="p">[</span><span class="k">else </span><span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="p">(</span><span class="nf">uniq</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">)))])))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="k">define </span><span class="nv">adj</span>  <span class="c1">; 8 adjacent neighboring cells around a cell</span>
</span><span class="line">  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">cell</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="k">define </span><span class="nv">x</span> <span class="p">(</span><span class="nf">x-coord</span> <span class="nv">cell</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="k">define </span><span class="nv">y</span> <span class="p">(</span><span class="nf">y-coord</span> <span class="nv">cell</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">- </span><span class="nv">y</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">()))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">y</span> <span class="o">&#39;</span><span class="p">()))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">+ </span><span class="nv">y</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">()))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">cons </span><span class="nv">x</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">- </span><span class="nv">y</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">()))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">cons </span><span class="nv">x</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">+ </span><span class="nv">y</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">()))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">- </span><span class="nv">x</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">- </span><span class="nv">y</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">()))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">- </span><span class="nv">x</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">y</span> <span class="o">&#39;</span><span class="p">()))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">- </span><span class="nv">x</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">+ </span><span class="nv">y</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">()))</span> <span class="o">&#39;</span><span class="p">()))))))))))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="k">define </span><span class="nv">n-adj-alive</span>  <span class="c1">; count the number of living neighbors around a cell</span>
</span><span class="line">  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">cell</span> <span class="nv">living</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nf">letrec</span>
</span><span class="line">      <span class="p">((</span><span class="nf">rec</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">n</span> <span class="nv">cells</span><span class="p">)</span>
</span><span class="line">          <span class="p">(</span><span class="nf">cond</span>
</span><span class="line">            <span class="p">[(</span><span class="nb">null? </span><span class="nv">cells</span><span class="p">)</span> <span class="nv">n</span><span class="p">]</span>
</span><span class="line">            <span class="p">[(</span><span class="nf">include?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">cells</span><span class="p">)</span> <span class="nv">living</span><span class="p">)</span> <span class="p">(</span><span class="nf">rec</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">cells</span><span class="p">))]</span>
</span><span class="line">            <span class="p">[</span><span class="k">else </span><span class="p">(</span><span class="nf">rec</span> <span class="nv">n</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">cells</span><span class="p">))]))))</span>
</span><span class="line">      <span class="p">(</span><span class="nf">rec</span> <span class="mi">0</span> <span class="p">(</span><span class="nf">adj</span> <span class="nv">cell</span><span class="p">)))))</span>
</span><span class="line">
</span><span class="line"><span class="c1">; Rule 1: when a cell will remains alive after a tick of the clock ------------</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="k">define </span><span class="nv">stay-alive</span>
</span><span class="line">  <span class="p">(</span><span class="nf">letrec</span>
</span><span class="line">    <span class="p">((</span><span class="nf">rec</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">board</span> <span class="nv">living</span> <span class="nv">new-board</span><span class="p">)</span>
</span><span class="line">      <span class="p">(</span><span class="nf">letrec</span>
</span><span class="line">        <span class="p">((</span><span class="nf">survivors</span>
</span><span class="line">          <span class="p">(</span><span class="nf">letrec</span>
</span><span class="line">            <span class="p">((</span><span class="nf">alive?</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">cell</span><span class="p">)</span>
</span><span class="line">              <span class="p">(</span><span class="nf">cond</span>
</span><span class="line">                <span class="p">[(</span><span class="nb">eq? </span><span class="mi">2</span> <span class="p">(</span><span class="nf">n-adj-alive</span> <span class="nv">cell</span> <span class="nv">living</span><span class="p">))</span> <span class="no">#t</span><span class="p">]</span>
</span><span class="line">                <span class="p">[(</span><span class="nb">eq? </span><span class="mi">3</span> <span class="p">(</span><span class="nf">n-adj-alive</span> <span class="nv">cell</span> <span class="nv">living</span><span class="p">))</span> <span class="no">#t</span><span class="p">]</span>
</span><span class="line">                <span class="p">[</span><span class="k">else </span><span class="no">#f</span><span class="p">]))))</span>
</span><span class="line">            <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">old</span> <span class="nv">new</span><span class="p">)</span>
</span><span class="line">              <span class="p">(</span><span class="nf">cond</span>
</span><span class="line">                <span class="p">[(</span><span class="nb">null? </span><span class="nv">old</span><span class="p">)</span> <span class="nv">new</span><span class="p">]</span>
</span><span class="line">                <span class="p">[(</span><span class="nf">alive?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">old</span><span class="p">))</span> <span class="p">(</span><span class="nf">survivors</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">old</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">old</span><span class="p">)</span> <span class="nv">new</span><span class="p">))]</span>
</span><span class="line">                <span class="p">[</span><span class="k">else </span><span class="p">(</span><span class="nf">survivors</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">old</span><span class="p">)</span> <span class="nv">new</span><span class="p">)])))))</span>
</span><span class="line">        <span class="p">(</span><span class="nf">survivors</span> <span class="nv">board</span> <span class="nv">new-board</span><span class="p">)))))</span>
</span><span class="line">    <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">board</span><span class="p">)</span>
</span><span class="line">      <span class="p">(</span><span class="nf">rec</span> <span class="nv">board</span> <span class="nv">board</span> <span class="o">&#39;</span><span class="p">()))))</span>
</span><span class="line">
</span><span class="line"><span class="c1">; Rule 2: when a dead cell becomes alive after a tick of the clock ------------</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="k">define </span><span class="nv">become-alive</span>
</span><span class="line">  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">living</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nf">letrec</span>
</span><span class="line">      <span class="p">((</span><span class="nf">perimeter</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">alive</span> <span class="nv">potentials</span><span class="p">)</span>
</span><span class="line">        <span class="p">(</span><span class="nf">letrec</span>
</span><span class="line">          <span class="p">((</span><span class="nf">cell-cons</span>
</span><span class="line">            <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">l1</span> <span class="nv">l2</span><span class="p">)</span>
</span><span class="line">              <span class="p">(</span><span class="nf">cond</span>
</span><span class="line">                <span class="p">[(</span><span class="nb">null? </span><span class="nv">l1</span><span class="p">)</span> <span class="nv">l2</span><span class="p">]</span>
</span><span class="line">                <span class="p">[(</span><span class="nf">include?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l1</span><span class="p">)</span> <span class="nv">living</span><span class="p">)</span> <span class="p">(</span><span class="nf">cell-cons</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l1</span><span class="p">)</span> <span class="nv">l2</span><span class="p">)]</span>
</span><span class="line">                <span class="p">[</span><span class="k">else </span><span class="p">(</span><span class="nf">cell-cons</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l1</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">l1</span><span class="p">)</span> <span class="nv">l2</span><span class="p">))]))))</span>
</span><span class="line">          <span class="p">(</span><span class="nf">cond</span>
</span><span class="line">            <span class="p">[(</span><span class="nb">null? </span><span class="nv">alive</span><span class="p">)</span> <span class="nv">potentials</span><span class="p">]</span>
</span><span class="line">            <span class="p">[</span><span class="k">else </span><span class="p">(</span><span class="nf">perimeter</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">alive</span><span class="p">)</span> <span class="p">(</span><span class="nf">cell-cons</span> <span class="p">(</span><span class="nf">adj</span> <span class="p">(</span><span class="nb">car </span><span class="nv">alive</span><span class="p">))</span> <span class="nv">potentials</span><span class="p">))]))))</span>
</span><span class="line">       <span class="p">(</span><span class="nf">germinate</span>
</span><span class="line">         <span class="p">(</span><span class="nf">letrec</span>
</span><span class="line">           <span class="p">((</span><span class="nf">rec</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">potentials</span><span class="p">)</span>
</span><span class="line">             <span class="p">(</span><span class="nf">letrec</span>
</span><span class="line">               <span class="p">((</span><span class="nf">raise?</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">cell</span><span class="p">)</span>
</span><span class="line">                 <span class="p">(</span><span class="nf">cond</span>
</span><span class="line">                   <span class="p">[(</span><span class="nb">eq? </span><span class="mi">3</span> <span class="p">(</span><span class="nf">n-adj-alive</span> <span class="nv">cell</span> <span class="nv">living</span><span class="p">))</span> <span class="no">#t</span><span class="p">]</span>
</span><span class="line">                   <span class="p">[</span><span class="k">else </span><span class="no">#f</span><span class="p">]))))</span>
</span><span class="line">               <span class="p">(</span><span class="nf">cond</span>
</span><span class="line">                 <span class="p">[(</span><span class="nb">null? </span><span class="nv">potentials</span><span class="p">)</span> <span class="nv">potentials</span><span class="p">]</span>
</span><span class="line">                 <span class="p">[(</span><span class="nf">raise?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">potentials</span><span class="p">))</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">potentials</span><span class="p">)</span> <span class="p">(</span><span class="nf">germinate</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">potentials</span><span class="p">)))]</span>
</span><span class="line">                 <span class="p">[</span><span class="k">else </span><span class="p">(</span><span class="nf">germinate</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">potentials</span><span class="p">))])))))</span>
</span><span class="line">           <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">maybe</span><span class="p">)</span>
</span><span class="line">             <span class="p">(</span><span class="nf">rec</span> <span class="nv">maybe</span><span class="p">)))))</span>
</span><span class="line">    <span class="p">(</span><span class="nf">germinate</span> <span class="p">(</span><span class="nf">uniq</span> <span class="p">(</span><span class="nf">perimeter</span> <span class="nv">living</span> <span class="o">&#39;</span><span class="p">()))))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[4 Principles of Simple Design Reflections]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/11/18/4-PSD/"/>
    
    <updated>2014-11-18T10:17:00-08:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/11/18/4-PSD</id>
    
    <content type="html"><![CDATA[<p>Following my previous post I have been thinking about the 4 Principles of Simple Design, their meaning and their applications to the little coding exercise of the Game of Life. These principles are:</p>

<ol>
  <li>Code pases tests =&gt; test drive development</li>
  <li>Code reveals intent =&gt; can be read and understood, expressive</li>
  <li>DRY =&gt; more in terms of knowledge than code</li>
  <li>Code is simple, minimal =&gt; the least code to do/express the most</li>
</ol>

<p>I really like the idea of priorities, of never violating higher level principles. So if you can compress a complex method into a single clever line, you don’t do it if it becomes less readable, if it becomes confusing and difficult to understand. So first and foremost, pass the tests, make sure the code does what is supposed to do, that it adds value. Then make it accessible, etc. And find compromises among the principles never losing sight of where the priorities stand.</p>

<p>A big lesson learned is not to be afraid of throwing away code. You lose semi-working code, but you gain insight about the problem and the code. In the end, the balance is positive. The code is better.</p>

<p>I find it impressive that if you follow the path, the result is really clean, simple and expressive code.</p>

<p>I find it interesting that if you follow the path, your code may already solve many of the subsequent challenges of Code Retreats. Things like:</p>

<ul>
  <li>small methods</li>
  <li>no conditionals</li>
  <li>no naked data structures</li>
  <li>no primitive classes</li>
</ul>

<p>Here are the main classes of my Game of Life so far:
<!--more--></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">GOL</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:world</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@world</span> <span class="o">=</span> <span class="no">World</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">another_living_cell_location</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@world</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">another_living_cell_location</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">remove</span><span class="p">(</span><span class="n">living_cell_location</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@world</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">living_cell_location</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">tick</span>
</span><span class="line">    <span class="n">will_die</span>   <span class="o">=</span> <span class="vi">@world</span><span class="o">.</span><span class="n">unsustainable_locations</span>
</span><span class="line">    <span class="n">will_spawn</span> <span class="o">=</span> <span class="vi">@world</span><span class="o">.</span><span class="n">germinal_locations</span>
</span><span class="line">    <span class="n">tock</span><span class="p">(</span><span class="n">will_die</span><span class="p">,</span> <span class="n">will_spawn</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">tock</span><span class="p">(</span><span class="n">dead_cells</span><span class="p">,</span> <span class="n">born_cells</span><span class="p">)</span>
</span><span class="line">    <span class="n">dead_cells</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">cell</span><span class="o">|</span> <span class="n">remove</span><span class="p">(</span><span class="n">cell</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">    <span class="n">born_cells</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">cell</span><span class="o">|</span> <span class="n">add</span><span class="p">(</span><span class="n">cell</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">World</span> <span class="o">&lt;</span> <span class="no">Set</span>
</span><span class="line">  <span class="n">alias_method</span> <span class="ss">:number_of_living_cells</span><span class="p">,</span> <span class="ss">:size</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">unsustainable_locations</span>
</span><span class="line">    <span class="nb">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">loc</span><span class="o">|</span> <span class="o">!</span><span class="n">survives?</span><span class="p">(</span><span class="n">loc</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">germinal_locations</span>
</span><span class="line">    <span class="n">potential_perimeter</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">loc</span><span class="o">|</span> <span class="n">fertile?</span><span class="p">(</span><span class="n">loc</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">potential_perimeter</span>
</span><span class="line">    <span class="n">possible_locations</span> <span class="o">=</span> <span class="no">Set</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">loc</span><span class="o">|</span> <span class="n">possible_locations</span> <span class="o">|=</span> <span class="n">loc</span><span class="o">.</span><span class="n">adjacents</span> <span class="p">}</span>
</span><span class="line">    <span class="n">possible_locations</span><span class="o">.</span><span class="n">subtract</span> <span class="nb">self</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">fertile?</span><span class="p">(</span><span class="n">location</span><span class="p">)</span>
</span><span class="line">    <span class="n">alive_nearby</span><span class="p">(</span><span class="n">location</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">survives?</span><span class="p">(</span><span class="n">location</span><span class="p">)</span>
</span><span class="line">    <span class="n">alive_nearby</span><span class="p">(</span><span class="n">location</span><span class="p">)</span><span class="o">.</span><span class="n">between?</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">alive_nearby</span><span class="p">(</span><span class="n">location</span><span class="p">)</span>
</span><span class="line">    <span class="n">location</span><span class="o">.</span><span class="n">adjacents</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span> <span class="o">|</span><span class="n">loc</span><span class="o">|</span> <span class="kp">include</span><span class="p">?(</span><span class="n">loc</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">Location</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:x</span><span class="p">,</span> <span class="ss">:y</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">adjacents</span>
</span><span class="line">    <span class="n">perimeter_coordinates</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">coords</span><span class="o">|</span> <span class="no">Location</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">*</span><span class="n">coords</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">protected</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">perimeter_coordinates</span>
</span><span class="line">    <span class="o">[</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="o">].</span><span class="n">product</span><span class="p">(</span><span class="o">[</span><span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">y</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span><span class="p">)</span> <span class="o">-</span> <span class="o">[[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">]]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">hash</span>
</span><span class="line">    <span class="nb">to_a</span><span class="o">.</span><span class="n">hash</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Code Retreat Reflections]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/11/17/Code-Retreat/"/>
    
    <updated>2014-11-17T20:17:00-08:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/11/17/Code-Retreat</id>
    
    <content type="html"><![CDATA[<p>Last Saturday 15, Nov I participated in the Global day of Code Retreat 2014. Although I could only join for half a day, it was an intense learning experience.</p>

<p>One of the goals of the exercise is to get one out of his coding comfort-zone. Like thrown into a dark room we stretch the arms to ‘feel’ and ‘see’ what is next, when I was taken out of my way of thinking, when confronted with a curve ball to code (zombie cells?) or when I had to pair in a different language, I was forced to stretch my arms and use short bursts of tests as the only way to gain ground and advance.</p>

<p><img class="left" src="http://sotoseattle.github.io/images/Nov14/Game_of_life_pulsar.gif" width="200" />
“Game of life pulsar” by JokeySmurf <a href="http://commons.wikimedia.org/wiki/File:Game_of_life_pulsar.gif#mediaviewer/File:Game_of_life_pulsar.gif">Licensed under Public domain via Wikimedia Commons</a></p>

<p>The pair experience was happily horrifying, God I need to work on that! Adding ping-pong style to it, raised the stakes to the level of Hunger Games.</p>

<p>Nevertheless, I spent the next day working on the Game of Life, trying to code it from the point of view of the 4 Principles of Simple Design and thinking about the process.</p>

<p>My unfinished code is <a href="https://github.com/sotoseattle/CodeRetreat">here</a> and these notes are my reflections on the process.</p>

<h3 id="learning-to-fly">Learning to Fly</h3>

<p>First and foremost I not only started every iteration writing the tests, but tried to write them from the most general point of view, avoiding referring to implementation details. This is extremely difficult for two reasons:</p>

<p>First, unconsciously, when I pose a testing question / requirement I already have an implicit idea of how to answer it. Visualizing how things should work, even if only in the end point (as seen by customer or objects), does not happen in a vacuum. As soon as one starts to think about it, the mind starts to consider alternatives: data structures, algorithms, etc, from past experience. Furthermore, when you write the details of the test you are specifying the objects to use and the methods to call.</p>

<p>I want to keep the questions as open-ended as possible, so later on the code can answer as it sees fit, from the trenches in the battlefield and not directed by an armchair admiral.</p>

<p>Second, if the test is too general, too abstract, too high altitude, it ends up encompassing way too much functionality, which requires to implement too many things in too many places in order to pass the test. Therefore I need to get down from the high chair and make more concrete, low level requirements. But this in turn, (i.e. calling a specific intermediary method in my test) is already steering and making me think of concrete implementation details!</p>

<p>There is great tension between these forces, between flying high without getting lost in space, and flying low and hitting the rooftops.
<!--more-->
### Gravity Pull</p>

<p>Another difficulty I have experienced. By passing tests and only passing them, without regard for the overall design from the get go, I tend to find myself thinking in a tunnel, with a narrow scope of the problem (pass the test). Like doing white-board challenges, way too close to what I am writing in the white-board, unable to see and play with the whole picture.</p>

<p>This narrowing is like a gravitational pull. Happens without being aware. The way to fight it was through the refactoring phase. Then I could step back, or fly to a higher altitude and look at the code in its entirety, check how the pieces work together, and try to give them a more consistent and natural feel.</p>

<h3 id="writing-test-miss-conception">Writing Test Miss-conception</h3>

<p>Initially I though that the tests were going to be written in stone, once written they would remain essentially the same (not considering small refactorings to input/output as we add features). I was wrong. I have found myself refactoring tests as much as code. What I though should belong to Cell ended up in a Location object, and that forced the test itself to change. Tests were written, deleted, moved, and refactored continuously. Tests became Code.</p>

<h3 id="advance-retreat-pivot-repeat-somersault-wtf">Advance, Retreat, Pivot, Repeat, Somersault, WTF</h3>

<p>Imagine the situation: you have a test to pass so you start coding to find out that you are going to need some intermediate methods. What do you do, retreat and write test for these intermediate methods? Or plunge ahead and implement them to pass the original? Which means you will need to write tests for that interim method a posteriori? I have found that the process is not clear cut or linear, and that you need to keep a loose attitude about it, making compromises, keeping the writing of your test and methods in fluid motion.</p>

<p>The same happens if, in the middle of the process, you want to explore a line of thought. You may want to play in the sandbox and not write a test a priori about something that may not be used or whose utility is more about writing an idea into code so a better one emerges or it clarifies a whole concept.</p>

<h3 id="emergence">Emergence</h3>

<p>One of the main things I wanted to evaluate in the first place was the ability of the process to allow good code to emerge naturally.</p>

<p>I started only considering living cells that live and die because of the proximity of other cells. The key being that I did not consider locations where new cells would emerge, that feature was left for later.</p>

<p>Through the iterative process I ended up differentiating between Location and Cell, so the cell attends only to its biological imperatives and the location encapsulates all the geographical functionality (coordinates). This allowed me to have a minimal controller of the game that only kept track of living cells. Later on I added a new class, a Chart, to visualize a group of locations (of the living cells).</p>

<p>Now, for the fun part. Given this code at this stage, the result of the aforementioned process. Where I have taken good care of keeping things encapsulated, apart, to each according to his responsibilities and capabilities. How hard would it be to add the functionality of certain locations becoming populated by new cells due to proximity of other living cells?</p>

<h3 id="close-but-no-cigar">Close, but no cigar!</h3>

<p>Well, no. It didn’t save me the pain of a big refactoring.</p>

<p>Once I had to consider spawning locations the whole design fell to pieces. I was tracking living cells and the Cell class had responsibility over knowing its neighbors. Now that I needed to find a way to encompass both, tracking already living cells and looking for fertile locations where new cells could come to life, I saw that keeping track of and analyzing locations could achieve both things in a single stroke.</p>

<p>I could see 3 ways to go about it:</p>

<ol>
  <li>Topologically, considering only locations, like a potential field.</li>
  <li>Biologically, with a graph made of cells, which I traverse to decide if I create new ones in neighboring spaces.</li>
  <li>Topo for spawning locations and bio for living cells. May make the most natural sense, since spawning locations and living cells are different things, but I cannot see it being worth the extra level of complexity. A more complex setting could make me choose this route.</li>
</ol>

<p>On one hand, this high level understanding of the design could have been taken head-on from the start, saving me the extra miles walked down the cell path, to only retrace and re-code it as location based.</p>

<p>On the other hand, this process allowed me to never get stuck because of the complexity of the problem. I was always able to advance, even if it meant taking 2 steps forward and one back. If time is not a constraint this way feels natural and it flows.</p>

<p>Another benefit was that I could always relay on the test previously written. This is an immense aid and a boost to the confidence that the new route (big refactoring) works.</p>

<p>A final benefit is that the continuous refactoring ends up making the whole language more natural, the code minimized code and me having a deeper understanding of how everything works. The fact that I was building and breaking things continuously forced me to be always make things as clear and small as possible, so I wouldn’t get lost with all the commotion.</p>

<h3 id="disclaimer">Disclaimer</h3>

<p>The code was left unfinished. The GOL class should have a method ‘play’, a way to set the initial state of living cells from a text file (for example), and a way to visualize the evolution of the game in a fixed referenced window. The chart class itself, which visualizes the board, is messy and would benefit from refactoring.</p>

<p>Absolutely more tests are needed. I still need to work on really covering all possible scenarios for each class. I started strong but I have the feeling that I dropped the ball a bit by the end.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Primo Lives!]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/11/02/Primo-Lives/"/>
    
    <updated>2014-11-02T20:17:00-08:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/11/02/Primo-Lives</id>
    
    <content type="html"><![CDATA[<p><img class="right" src="http://sotoseattle.github.io/images/Nov14/dice.png" width="400" /></p>

<p>My Rubygem Primo is alive and kicking! Check it out at <a href="https://github.com/sotoseattle/Primo">Github</a>.</p>

<p>In 2013 I took the online course “Probabilistic Graphical Models” (Stanford, Prof. Daphne Koller) from <a href="https://www.coursera.org/course/pgm">Coursera.org</a>. It was complex and difficult, but a lot of fun because of all the possibilities it opens up. This gem is a liberal translation of the code I worked with in Octave throughout the course, and which later I coded in python to learn the language.</p>

<p>Sincere thanks to Masahiro Tanaka for his wonderful <a href="http://masa16.github.io/narray/">NArray gem</a>, which allows me to, for example, multiply two multi-dimensional arrays element-wise in a single step, after aligning them with simple rotations of their axes (actually pretty cool).</p>

<p>I have christened this working library PRIMO (Probabilistic Inference Modeling) because in Spanish it means either prime, first, cousin or dumb! :)</p>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Wiring Devise into Angular + Rails]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/10/30/Devise-Angular-Rails/"/>
    
    <updated>2014-10-30T16:17:00-07:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/10/30/Devise-Angular-Rails</id>
    
    <content type="html"><![CDATA[<h3 id="walk-through-to-use-devise-with-angular-in-rails-42">Walk-through to use Devise with Angular in Rails 4.2.</h3>

<p>This is more of a jump-through than a walk-through since I am going to be more jumping around the code than really walking it slowly. The reason for this is that I think it will be more valuable to have a general idea of how the wiring works than an excessively detailed view that may not apply to most cases (my example was very basic).</p>

<p>Include in your Gemfile devise and bundle. We request at least version 4.3.1 because of some troubles with previous versions and Rails 4.2.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">gem</span> <span class="s1">&#39;devise&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.4.1&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Run the generator and follow the config steps suggested by the gem.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>rails g devise:install
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Make devise respond to json by adding the following to your application.rb:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">config</span><span class="o">.</span><span class="n">to_prepare</span> <span class="k">do</span>
</span><span class="line">  <span class="no">DeviseController</span><span class="o">.</span><span class="n">respond_to</span> <span class="ss">:html</span><span class="p">,</span> <span class="ss">:json</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<p>Generate the User model with devise:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>rails g devise user
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Don’t forget to floss, I mean <code>rake migrate</code>. Now, download the following modules from the angular site: [angular-cookies.js, angular-route.js] and place them where you have your angular file (in my case in app/assets/javascripts/). Make sure to add them to the application.js manifest after loading angular:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">//= require jquery</span>
</span><span class="line"><span class="c1">//= require jquery_ujs</span>
</span><span class="line"><span class="c1">//= require angular.min</span>
</span><span class="line"><span class="c1">//= require angular-cookies.min</span>
</span><span class="line"><span class="c1">//= require angular-route.min</span>
</span><span class="line"><span class="p">...</span>
</span><span class="line"><span class="c1">//= require_tree .</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now, in my case I use the application layout to call the angular app.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="erb"><span class="line"><span class="x">&lt;!-- application.html.erb --&gt;</span>
</span><span class="line"><span class="x">&lt;!DOCTYPE html&gt;</span>
</span><span class="line"><span class="x">&lt;html data-ng-app=&quot;WhateverApp&quot;&gt;</span>
</span><span class="line"><span class="x">  &lt;head&gt;...&lt;/head&gt;</span>
</span><span class="line"><span class="x">  &lt;body&gt;</span>
</span><span class="line"><span class="x">    </span><span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class="line"><span class="x">  &lt;/body&gt;</span>
</span><span class="line"><span class="x">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Again, in my particular case all I have is a single Rails controller with a single action (index), and a single index view. In that index.html.erb we reference to angular routes:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="erb"><span class="line"><span class="x">&lt;div data-ng-view&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In app/assets/javascript/angular_app/ we create a new file <code>routes.js</code> with the routes we want. In my case I have appended the .erb type so Rails pre-processes the erb tags:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;GemStore&#39;</span><span class="p">);</span>
</span><span class="line">  <span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">([</span><span class="s1">&#39;$routeProvider&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$routeProvider</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">$routeProvider</span>
</span><span class="line">      <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/store_front&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;Resource1Controller&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;&lt;%= asset_path(&quot;angular_app/resource_1/views/store_forefront.html&quot;) %&gt;&#39;</span>
</span><span class="line">      <span class="p">})</span>
</span><span class="line">      <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/admin&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;UsersCtrl&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;&lt;%= asset_path(&quot;angular_app/users/views/user_entrance.html&quot;) %&gt;&#39;</span>
</span><span class="line">      <span class="p">})</span>
</span><span class="line">      <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/dashboard&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;Resource2Ctrl&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;&lt;%= asset_path(&quot;angular_app/resource_2/views/dashboard.html&quot;) %&gt;&#39;</span>
</span><span class="line">      <span class="p">})</span>
</span><span class="line">      <span class="p">.</span><span class="nx">otherwise</span><span class="p">({</span>
</span><span class="line">        <span class="nx">redirectTo</span><span class="o">:</span> <span class="s1">&#39;/store_front&#39;</span>
</span><span class="line">      <span class="p">});</span>
</span><span class="line">  <span class="p">}]);</span>
</span><span class="line"><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The route /admin will take us to the User that Devise created and whose view is:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&lt;</span><span class="nx">div</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">controller</span><span class="o">=</span><span class="s2">&quot;UsersCtrl&quot;</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">show</span><span class="o">=</span><span class="s2">&quot;!isLoggedIn()&quot;</span><span class="o">&gt;</span>
</span><span class="line">      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">click</span><span class="o">=</span><span class="s2">&quot;setForm(&#39;signUp&#39;)&quot;</span><span class="o">&gt;</span> <span class="nx">Create</span> <span class="nx">User</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class="line">      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">click</span><span class="o">=</span><span class="s2">&quot;setForm(&#39;signIn&#39;)&quot;</span><span class="o">&gt;</span><span class="nx">Sign</span> <span class="nx">In</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">show</span><span class="o">=</span><span class="s2">&quot;isLoggedIn()&quot;</span><span class="o">&gt;</span>
</span><span class="line">      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">click</span><span class="o">=</span><span class="s2">&quot;signOut()&quot;</span><span class="o">&gt;</span><span class="nx">Sign</span> <span class="nx">Out</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="err">/div&gt;&lt;br&gt;&lt;br&gt;</span>
</span><span class="line">
</span><span class="line">  <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;newUserForm&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">show</span><span class="o">=</span><span class="s2">&quot;form == &#39;signUp&#39;&quot;</span><span class="o">&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">label</span> <span class="o">&gt;</span><span class="nx">Email</span><span class="o">&lt;</span><span class="err">/label&gt;:</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">required</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">model</span><span class="o">=</span><span class="s2">&quot;newUser.email&quot;</span><span class="o">&gt;&lt;</span><span class="err">/br&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">label</span> <span class="o">&gt;</span><span class="nx">Password</span><span class="o">&lt;</span><span class="err">/label&gt;:</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;password&quot;</span> <span class="nx">required</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">model</span><span class="o">=</span><span class="s2">&quot;newUser.password&quot;</span><span class="o">&gt;&lt;</span><span class="err">/br&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">label</span> <span class="o">&gt;</span><span class="nx">Password</span> <span class="nx">confirmation</span><span class="o">&lt;</span><span class="err">/label&gt;:</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;password&quot;</span> <span class="nx">required</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">model</span><span class="o">=</span><span class="s2">&quot;newUser.password_confirmation&quot;</span><span class="o">&gt;&lt;</span><span class="err">/br&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">disabled</span><span class="o">=</span><span class="s2">&quot;newUserForm.$invalid&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">click</span><span class="o">=</span><span class="s2">&quot;signUp(newUser)&quot;</span><span class="o">&gt;</span> <span class="nx">Create</span> <span class="nx">User</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="err">/form&gt;</span>
</span><span class="line">
</span><span class="line">  <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;loginForm&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">show</span><span class="o">=</span><span class="s2">&quot;form == &#39;signIn&#39;&quot;</span><span class="o">&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">label</span><span class="o">&gt;</span><span class="nx">Email</span><span class="o">&lt;</span><span class="err">/label&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">required</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">model</span><span class="o">=</span><span class="s2">&quot;user.email&quot;</span><span class="o">&gt;&lt;</span><span class="err">/br&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">label</span><span class="o">&gt;</span><span class="nx">Password</span><span class="o">&lt;</span><span class="err">/label&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;password&quot;</span> <span class="nx">required</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">model</span><span class="o">=</span><span class="s2">&quot;user.password&quot;</span><span class="o">&gt;&lt;</span><span class="err">/br&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">disabled</span><span class="o">=</span><span class="s2">&quot;loginForm.$invalid&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">click</span><span class="o">=</span><span class="s2">&quot;signIn(user)&quot;</span><span class="o">&gt;</span><span class="nx">Sign</span> <span class="nx">In</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="err">/form&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class="line">
</span><span class="line"><span class="o">&lt;</span><span class="nx">button</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">click</span><span class="o">=</span><span class="s2">&quot;StorePath()&quot;</span><span class="o">&gt;</span><span class="nx">Store</span> <span class="nx">Front</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The different panels and buttons show and hide depending on if we are logged in or not. I included those functions in my top app.js and under the rootScope so they can be called from anywhere:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">app</span><span class="p">.</span><span class="nx">run</span><span class="p">([</span><span class="s1">&#39;$rootScope&#39;</span><span class="p">,</span><span class="s1">&#39;$cookieStore&#39;</span><span class="p">,</span> <span class="s1">&#39;$location&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$rootScope</span><span class="p">,</span> <span class="nx">$cookieStore</span><span class="p">,</span> <span class="nx">$location</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">isLoggedIn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="p">(</span><span class="nx">$cookieStore</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;logged_user&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="kc">true</span> <span class="o">:</span> <span class="kc">false</span><span class="p">);</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line">    <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">logged_user</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="nx">$cookieStore</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;logged_user&#39;</span><span class="p">).</span><span class="nx">email</span><span class="p">;</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">  <span class="p">}]);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finally, the UserCtrl.js includes the way to connect to Rails, query the User model and set the cookies:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;GemStore&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;UsersCtrl&#39;</span><span class="p">,</span> <span class="p">[</span>
</span><span class="line">    <span class="s1">&#39;$scope&#39;</span><span class="p">,</span><span class="s1">&#39;$http&#39;</span><span class="p">,</span><span class="s1">&#39;$cookieStore&#39;</span><span class="p">,</span><span class="s1">&#39;$location&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$http</span><span class="p">,</span> <span class="nx">$cookieStore</span><span class="p">,</span><span class="nx">$location</span><span class="p">){</span>
</span><span class="line">
</span><span class="line">    <span class="nx">$scope</span><span class="p">.</span><span class="nx">user</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line">    <span class="nx">$scope</span><span class="p">.</span><span class="nx">new_user</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line">
</span><span class="line">    <span class="nx">$scope</span><span class="p">.</span><span class="nx">signUp</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">new_user</span><span class="p">){</span>
</span><span class="line">      <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">user</span><span class="o">:</span> <span class="nx">new_user</span> <span class="p">};</span>
</span><span class="line">      <span class="nx">$http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/users&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
</span><span class="line">      <span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class="line">        <span class="nx">$scope</span><span class="p">.</span><span class="nx">new_user</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line">        <span class="nx">$cookieStore</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="s1">&#39;logged_user&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
</span><span class="line">        <span class="nx">$scope</span><span class="p">.</span><span class="nx">setForm</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class="line">        <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s1">&#39;/dashboard&#39;</span><span class="p">);</span>
</span><span class="line">      <span class="p">})</span>
</span><span class="line">      <span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">status</span><span class="p">){</span>
</span><span class="line">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class="line">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">status</span><span class="p">);</span>
</span><span class="line">      <span class="p">});</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line">    <span class="nx">$scope</span><span class="p">.</span><span class="nx">signIn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">new_user</span><span class="p">){</span>
</span><span class="line">      <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">user</span><span class="o">:</span> <span class="nx">new_user</span> <span class="p">};</span>
</span><span class="line">      <span class="nx">$http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/users/sign_in&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
</span><span class="line">      <span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class="line">        <span class="nx">$scope</span><span class="p">.</span><span class="nx">user</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line">        <span class="nx">$cookieStore</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="s1">&#39;logged_user&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
</span><span class="line">        <span class="nx">$scope</span><span class="p">.</span><span class="nx">setForm</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class="line">        <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s1">&#39;/dashboard&#39;</span><span class="p">);</span>
</span><span class="line">      <span class="p">})</span>
</span><span class="line">      <span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span><span class="nx">status</span><span class="p">){</span>
</span><span class="line">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class="line">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">status</span><span class="p">);</span>
</span><span class="line">      <span class="p">});</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line">    <span class="nx">$scope</span><span class="p">.</span><span class="nx">signOut</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">$http</span><span class="p">({</span>
</span><span class="line">        <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;DELETE&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;users/sign_out&#39;</span>
</span><span class="line">      <span class="p">})</span>
</span><span class="line">        <span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">          <span class="nx">$cookieStore</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="s1">&#39;logged_user&#39;</span><span class="p">);</span>
</span><span class="line">          <span class="nx">$scope</span><span class="p">.</span><span class="nx">setForm</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class="line">          <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s1">&#39;/store_front&#39;</span><span class="p">);</span>
</span><span class="line">        <span class="p">})</span>
</span><span class="line">        <span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">status</span><span class="p">);</span>
</span><span class="line">        <span class="p">})</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line">    <span class="nx">$scope</span><span class="p">.</span><span class="nx">setForm</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">form</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">$scope</span><span class="p">.</span><span class="nx">form</span> <span class="o">=</span> <span class="nx">form</span><span class="p">;</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">  <span class="p">}]);</span>
</span><span class="line"><span class="p">})()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finally, make sure you are nullifying the sessions as you protect from CSRF attacks.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">respond_to</span> <span class="ss">:html</span><span class="p">,</span> <span class="ss">:json</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># Prevent CSRF attacks by raising an exception.</span>
</span><span class="line">  <span class="c1"># For APIs, you may want to use :null_session instead.</span>
</span><span class="line">  <span class="c1"># protect_from_forgery with: :exception</span>
</span><span class="line">  <span class="n">protect_from_forgery</span> <span class="ss">with</span><span class="p">:</span> <span class="ss">:null_session</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Special thanks to Derek Maffett, whose help was invaluable to navigate the angular example.</p>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Rails Api Versioning]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/10/28/Rails-API-Versioning/"/>
    
    <updated>2014-10-28T16:17:00-07:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/10/28/Rails-API-Versioning</id>
    
    <content type="html"><![CDATA[<p><img class="right" src="http://sotoseattle.github.io/images/Oct14/versionapi.png" width="200" title="RailsCast" /></p>

<p>Rails provide a powerful framework to build your own API. But as you evolve your API will evolve too, your code will change and even your schema will mutate. That is OK as long as you have a rational way to structure the different versions of the api, how they are called and what they return.</p>

<p>There are different ways to achieve this versioning, I will be enumerating the pros and cons of three of them.</p>

<h3 id="pre-pend-the-ryan-bates-way">Pre-pend (the Ryan Bates Way)</h3>

<p><a href="http://railscasts.com">RailsCast</a>, the ultimate resource for all things rails, goes into specific details of how to manually set up your own versioning system in its <a href="http://railscasts.com/episodes/350-rest-api-versioning?view=asciicast">episode 350</a>.</p>

<p>It involves modifying your routes so your apis resources are encapsulated in namespaces. There are many advantages to this approach, first and foremost it forces you to be aware of what is happening, you learn your tool in the process and you don’t depend on external code (versioning gem).</p>

<p>On the other hand, you’ll end up with parallel versions of the same code living side by side, not the most DRY way to keep your code base. Furthermore, you are responsible for tracking changes to your schema, and then adapting and maintaining each of the version calls.</p>

<!--more-->

<p>Nevertheless, this is the approach I have generally used since it provides me with the most experience and learning.</p>

<p>You can actually have it both ways, pre-pending the api version and automating with a gem (up to a point) with the Versionist Gem, which provides three different ways to version your api out of the box:</p>

<ul>
  <li>Specifying version via an HTTP header</li>
  <li>Specifying version by pre-pending paths with a version slug</li>
  <li>Specifying version via a request parameter</li>
</ul>

<p>Pre-pending the path with a version slug is the same as the method discussed in RailsCast, visual, fast and intuitive. The problem is that the gem won’t move files for you so you’ll need to re-organize some files around and change some configuration details.</p>

<h3 id="request-header">Request Header</h3>

<p>The <a href="https://github.com/bploetz/versionist">Versionist</a> gem also allows us to include the version to use as a parameter in the header of the request call. Which has the benefits and disadvantages of hiding away this information in the header. It is less transparent and user friendly, but great for automated calls. Less opportunity to fudge at the cost of a higher initial cost of setting the system up.</p>

<h3 id="url-parameter">Url Parameter</h3>

<p>The third way Versionist can work is by appending the api version as a parameter at the end of the call, which although benefiting from being as somewhat visual, it fudges the url mixing resource parameters with unrelated information. This practice is frowned upon in the rails development community.</p>

<h3 id="mime-type">MIME Type</h3>

<p>You could register a MIME type for each api version and use the rails’ respond_to handle the response. Check Robbie Clutton <a href="http://pivotallabs.com/api-versioning/">post about it</a>.</p>

<p>The registration happens in the config/initializers/mime_types.rb, and all you need is to reconfigure your controllers.</p>

<h3 id="api-model">API Model</h3>

<p>Gems like <a href="https://github.com/craigs/api_versioning">ApiVersioning</a> use a model-based approach. Where a controller renamed as a <code>presenter</code>, handles API responses. It allows to specified the version in the header or passed as a parameter.</p>

<p>Thanks to Scot Hale who pointed me in the right direction in order to research this topic!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Wiring Angular into Rails]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/10/27/Wire-Angular-Rails/"/>
    
    <updated>2014-10-27T20:01:00-07:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/10/27/Wire-Angular-Rails</id>
    
    <content type="html"><![CDATA[<p>Given an angular site of static pages, without persistent data, just the bells and whistles that Angular provides for the front end, how do we wire it so it is served from inside a Rails application.</p>

<p>The first step is to generate a new rails app (I used 4.2), for which we’ll create a controller that will coordinate the rendering of the angular app. We’ll start with a single action that points to a show template, where all the action will take place (it would substitute the index.html page of the Angular app). We call our controller StoreController.</p>

<p>In app/assets/javascripts/application.js we are going to remove turbolinks, because it is repetitive functionality now that we’ll be relying on Angular and it tends to screw things up. Actually we could remove it from the Gemfile too.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># app/assets/javascripts/application.js
</span><span class="line">//= require jquery
</span><span class="line">//= require jquery_ujs
</span><span class="line">//= require angular.min
</span><span class="line">//= require launch_store
</span><span class="line">//= require_tree .</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We also add a requirement for a custom js file that we’ll create, app/assets/javascripts/launch_store.js, and where we declare our Angular app as gemStore.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># app/assets/javascripts/launch_store.js
</span><span class="line">//= require_self
</span><span class="line">//= require_tree ./angular_store_app
</span><span class="line">(function(){
</span><span class="line">  var app = angular.module("GemStore", ["StoreDirectives"]);
</span><span class="line">})();</span></code></pre></td></tr></table></div></figure></notextile></div>
<!--more-->
<p>In this newly loaded file we reference again another folder tree, ‘angular_store_app’, where we’ll store all the Angular functionality by resources. In our case we are using the resulting app from CodeSchool’s course “<a href="http://campus.codeschool.com/courses/shaping-up-with-angular-js/intro">Shaping up with Angular</a>”, a store-like app for displaying gems and jewels. Therefore we’ll create a subfolder called ‘gems’ and inside another three subfolders: controllers, directives, and views.</p>

<p><img class="center" src="http://sotoseattle.github.io/images/Oct14/folders.png" width="300" /></p>

<p>Our convention is going to be to name directives in camelCase, and everything else in PascalCase.</p>

<p>Now all it is left to do is to add the controllers and directives to its respectives files:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// gems_controller.js</span>
</span><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;GemStore&#39;</span><span class="p">);</span>
</span><span class="line">  <span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;StoreController&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$http&#39;</span><span class="p">,</span> <span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$http</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line">  <span class="p">]);</span>
</span><span class="line"><span class="p">})();</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;GemStore&#39;</span><span class="p">);</span>
</span><span class="line">  <span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;ReviewController&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="p">...</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line"><span class="p">})();</span>
</span><span class="line">
</span><span class="line"><span class="c1">// gems_directives.js</span>
</span><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;StoreDirectives&quot;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class="line">  <span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s2">&quot;productDescription&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">restrict</span><span class="o">:</span> <span class="s2">&quot;A&quot;</span><span class="p">,</span>
</span><span class="line">      <span class="nx">templateUrl</span><span class="o">:</span> <span class="s2">&quot;&lt;%= asset_path(&#39;angular_store_app/gems/views/description.html&#39;)%&gt;&quot;</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line"><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For the rails views we need to, first of all, make sure our routes are well defined and pointing to ‘store#show’.</p>

<p>Then in the application.html.erb we reference the angular app (check that we have taken out the turbolinks):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class="line"><span class="nt">&lt;html</span> <span class="na">data-ng-app=</span><span class="s">&quot;GemStore&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;head&gt;</span>
</span><span class="line">  <span class="nt">&lt;title&gt;</span>Angurails<span class="nt">&lt;/title&gt;</span>
</span><span class="line">  <span class="err">&lt;</span>%= stylesheet_link_tag &#39;application&#39;, media: &#39;all&#39; %&gt;
</span><span class="line">  <span class="err">&lt;</span>%= javascript_include_tag &#39;application&#39; %&gt;
</span><span class="line">  <span class="err">&lt;</span>%= csrf_meta_tags %&gt;
</span><span class="line"><span class="nt">&lt;/head&gt;</span>
</span><span class="line"><span class="nt">&lt;body&gt;</span>
</span><span class="line">
</span><span class="line"><span class="err">&lt;</span>%= yield %&gt;
</span><span class="line">
</span><span class="line"><span class="nt">&lt;/body&gt;</span>
</span><span class="line"><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And in the show.html.page of the store controller we can start coding our own angular references and expressions:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;div</span> <span class="na">data-ng-controller=</span><span class="s">&quot;StoreController&quot;</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="nt">&lt;header&gt;</span>
</span><span class="line">    <span class="nt">&lt;h2</span> <span class="na">class=</span><span class="s">&quot;text-center&quot;</span><span class="nt">&gt;</span>Soto&#39;s Magnificent Emporium<span class="nt">&lt;/h2&gt;</span>
</span><span class="line">    <span class="nt">&lt;h3</span> <span class="na">class=</span><span class="s">&quot;text-center&quot;</span><span class="nt">&gt;</span> an sinangular store <span class="nt">&lt;/h3&gt;</span>
</span><span class="line">  <span class="nt">&lt;/header&gt;</span>
</span><span class="line">
</span><span class="line">  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;list-group&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;list-group-item&quot;</span> <span class="na">data-ng-repeat=</span><span class="s">&quot;product in products&quot;</span><span class="nt">&gt;</span>
</span><span class="line">      <span class="nt">&lt;h3&gt;</span> <span class="nt">&lt;em</span> <span class="na">class=</span><span class="s">&quot;pull-right&quot;</span><span class="nt">&gt;</span><span class="nt">&lt;/em&gt;&lt;/h3&gt;</span>
</span><span class="line">      <span class="nt">&lt;div</span> <span class="na">data-product-gallery</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class="line">      <span class="nt">&lt;div</span> <span class="na">data-product-tabs</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class="line">    <span class="nt">&lt;/div&gt;</span>
</span><span class="line">  <span class="nt">&lt;/div&gt;</span>
</span><span class="line"><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>One last details is to include in the rails public folder our angular html snippets referenced by directives, and make sure that the url in the gems_directives.js are correct.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="c">&lt;!-- app/assets/javascript/angular_store_app/gems/views/description.html --&gt;</span>
</span><span class="line"><span class="nt">&lt;div</span> <span class="na">data-ng-show=</span><span class="s">&quot;tab.isSet(1)&quot;</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="nt">&lt;h4&gt;</span>Description<span class="nt">&lt;/h4&gt;</span>
</span><span class="line">  <span class="nt">&lt;blockquote&gt;</span><span class="nt">&lt;/blockquote&gt;</span>
</span><span class="line"><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That’s it. Run it and check it works.</p>

<p>One final note of advice, in my case using CoffeeScript gave me quite a bit of trouble, and although I still have to investigate the exact causes of the it, I recommend to use it with caution.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Ruby Meta-Frolicking]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/10/24/Ruby-Meta-Frolicking/"/>
    
    <updated>2014-10-24T08:01:00-07:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/10/24/Ruby-Meta-Frolicking</id>
    
    <content type="html"><![CDATA[<p>This is a follow up to my path of learning Ruby Metaprogramming. It follows my previous post about the <a href="http://sotoseattle.github.io/blog/2014/10/05/Metaprogramming/">Equalizer gem</a>.</p>

<p>We start with a basic BinaryTree that consists of nodes that just hold a key (val), and two links to the left and right children. This is not a BST, just a raw binary tree where each node is considered a tree in itself.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">BinaryTree</span>
</span><span class="line">  <span class="kp">attr_accessor</span> <span class="ss">:val</span><span class="p">,</span> <span class="ss">:left</span><span class="p">,</span> <span class="ss">:right</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@val</span> <span class="o">=</span> <span class="n">val</span>
</span><span class="line">    <span class="vi">@left</span> <span class="o">=</span> <span class="vi">@right</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We create an ad-hoc tree that we wire in the following manner.</p>

<p><img class="center" src="http://sotoseattle.github.io/images/Oct14/binary_tree.png" width="300" /></p>

<!--more-->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">tim</span>    <span class="o">=</span> <span class="no">BinaryTree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Tim&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">phil</span>   <span class="o">=</span> <span class="no">BinaryTree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Phil&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">jony</span>   <span class="o">=</span> <span class="no">BinaryTree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Jony&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">dan</span>    <span class="o">=</span> <span class="no">BinaryTree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Dan&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">katie</span>  <span class="o">=</span> <span class="no">BinaryTree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Katie&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">craig</span>  <span class="o">=</span> <span class="no">BinaryTree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Craig&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">eddie</span>  <span class="o">=</span> <span class="no">BinaryTree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Eddie&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">peter</span>  <span class="o">=</span> <span class="no">BinaryTree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Peter&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">andrea</span> <span class="o">=</span> <span class="no">BinaryTree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Andrea&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">tim</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">tim</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">jony</span><span class="p">,</span> <span class="n">phil</span>
</span><span class="line"><span class="n">jony</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">jony</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">dan</span><span class="p">,</span> <span class="n">katie</span>
</span><span class="line"><span class="n">katie</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">katie</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">peter</span><span class="p">,</span> <span class="n">andrea</span>
</span><span class="line"><span class="n">phil</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">phil</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">craig</span><span class="p">,</span> <span class="n">eddie</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For this exercsie we are only interested in traversing the tree and outputting to stdout the names of each node. There are three different ways to perform this traversal in a depth-first fashion: pre-order, in-order and post-order. You can read the details about each one in this <a href="http://en.wikipedia.org/wiki/Tree_traversal">Wikipedia page</a>.</p>

<p>After a bit of reflection and sandboxing, a good and common-sense way to implement becomes clear:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">traverse_pre_order</span>
</span><span class="line">  <span class="nb">puts</span> <span class="n">val</span>
</span><span class="line">  <span class="n">left</span><span class="o">.</span><span class="n">traverse_pre_order</span> <span class="k">if</span> <span class="n">left</span>
</span><span class="line">  <span class="n">right</span><span class="o">.</span><span class="n">traverse_pre_order</span> <span class="k">if</span> <span class="n">right</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">traverse_in_order</span>
</span><span class="line">  <span class="n">left</span><span class="o">.</span><span class="n">traverse_in_order</span> <span class="k">if</span> <span class="n">left</span>
</span><span class="line">  <span class="nb">puts</span> <span class="n">val</span>
</span><span class="line">  <span class="n">right</span><span class="o">.</span><span class="n">traverse_in_order</span> <span class="k">if</span> <span class="n">right</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">traverse_post_order</span>
</span><span class="line">  <span class="n">left</span><span class="o">.</span><span class="n">traverse_post_order</span> <span class="k">if</span> <span class="n">left</span>
</span><span class="line">  <span class="n">right</span><span class="o">.</span><span class="n">traverse_post_order</span> <span class="k">if</span> <span class="n">right</span>
</span><span class="line">  <span class="nb">puts</span> <span class="n">val</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The code is clear and readable, yet suffers from some repetition. We also see a pattern emerging: in all cases we recursively call the traverse method first on the left and then on the right, and the position of the call to stdout depends on the specific flavor of traversal:</p>

<ul>
  <li>pre =&gt; first call</li>
  <li>in  =&gt; between left and right</li>
  <li>post =&gt; after both calls</li>
</ul>

<p>This is a great opportunity to tinker with metaprogramming to see if we can do better. I focus on leveraging Ruby’s define_method, which allows us to create multiple methods with a single definition.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="sx">%w[pre in post]</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">prefix</span><span class="o">|</span>
</span><span class="line">  <span class="n">define_method</span><span class="p">(</span><span class="s2">&quot;traverse_</span><span class="si">#{</span><span class="n">prefix</span><span class="si">}</span><span class="s2">_order&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">    <span class="c1"># statements_to_execute = [traverse_left, traverse_right]</span>
</span><span class="line">    <span class="c1"># insert the puts call in the right place depending on the prefix</span>
</span><span class="line">    <span class="c1"># execute the array of orders one by one</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The idea is to have an array made of little bunches of code to execute. Then we can manipulate the order in which those code snippets are executed by re-ordering the array. The array becomes something like an instructions book, an ordered set of steps to perform.</p>

<p>To insert the chunks of code in the array, we need to package them into objects. A solution is to wrap them as blocks of functionality as Proc objects (I have used stabby lambdas). To execute one of these object we just call it to yield.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">instructions</span> <span class="o">=</span> <span class="o">[</span>
</span><span class="line">  <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">left</span><span class="o">.</span><span class="n">traverse_pre_order</span> <span class="k">if</span> <span class="n">left</span> <span class="p">},</span>
</span><span class="line">  <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">right</span><span class="o">.</span><span class="n">traverse_pre_order</span> <span class="k">if</span> <span class="n">right</span> <span class="p">}</span>
</span><span class="line"><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now, is only a question of changing the order of the array of statements and adapt it to each flavor of traversal. Once the array is reshuffled to our taste, we iterate over each cell, anc execute the proc.</p>

<p>Here is the final code of the complete class unrefactored. I have taken advantage of the yet to be defined method inside, it cannot get more dynamic than that!</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">BinaryTree</span>
</span><span class="line">  <span class="kp">attr_accessor</span> <span class="ss">:val</span><span class="p">,</span> <span class="ss">:left</span><span class="p">,</span> <span class="ss">:right</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@val</span> <span class="o">=</span> <span class="n">val</span>
</span><span class="line">    <span class="vi">@left</span> <span class="o">=</span> <span class="vi">@right</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="sx">%w[pre in post]</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">prefix</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class="line">    <span class="n">define_method</span><span class="p">(</span><span class="s2">&quot;traverse_</span><span class="si">#{</span><span class="n">prefix</span><span class="si">}</span><span class="s2">_order&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">      <span class="n">instructions</span> <span class="o">=</span> <span class="o">[</span>
</span><span class="line">        <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">left</span><span class="o">.</span><span class="n">public_send</span><span class="p">(</span><span class="s2">&quot;traverse_</span><span class="si">#{</span><span class="n">prefix</span><span class="si">}</span><span class="s2">_order&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">left</span> <span class="p">},</span>
</span><span class="line">        <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">right</span><span class="o">.</span><span class="n">public_send</span><span class="p">(</span><span class="s2">&quot;traverse_</span><span class="si">#{</span><span class="n">prefix</span><span class="si">}</span><span class="s2">_order&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">right</span> <span class="p">}</span><span class="o">]</span>
</span><span class="line">      <span class="n">do_stuff</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="n">val</span> <span class="p">}</span>
</span><span class="line">      <span class="n">instructions</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">do_stuff</span><span class="p">)</span>
</span><span class="line">      <span class="n">instructions</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span><span class="o">.</span><span class="n">yield</span> <span class="p">}</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Specially interesting is how the scoping works, which I’ll leave for a future post. Stay tunned!</p>

<p>Here is the final version, refactored, plus some tests.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">BinaryTree</span>
</span><span class="line">  <span class="kp">attr_accessor</span> <span class="ss">:val</span><span class="p">,</span> <span class="ss">:left</span><span class="p">,</span> <span class="ss">:right</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@val</span> <span class="o">=</span> <span class="n">val</span>
</span><span class="line">    <span class="vi">@left</span> <span class="o">=</span> <span class="vi">@right</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="sx">%w[pre in post]</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">prefix</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class="line">    <span class="n">define_method</span><span class="p">(</span><span class="s2">&quot;traverse_</span><span class="si">#{</span><span class="n">prefix</span><span class="si">}</span><span class="s2">_order&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">      <span class="n">instructions</span><span class="p">(</span><span class="n">prefix</span><span class="p">)</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">do_stuff</span><span class="p">)</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:yield</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">do_stuff</span>
</span><span class="line">    <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="n">val</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">instructions</span><span class="p">(</span><span class="n">prefix</span><span class="p">)</span>
</span><span class="line">    <span class="o">[</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="o">].</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">e</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;traverse_</span><span class="si">#{</span><span class="n">prefix</span><span class="si">}</span><span class="s2">_order&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">e</span> <span class="p">}</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">describe</span> <span class="no">BinaryTree</span> <span class="k">do</span>
</span><span class="line">  <span class="n">describe</span> <span class="s1">&#39;Search Methods&#39;</span> <span class="k">do</span>
</span><span class="line">    <span class="n">let</span><span class="p">(</span><span class="ss">:bt</span><span class="p">)</span> <span class="p">{</span> <span class="c1"># tim as defined above }</span>
</span><span class="line">    <span class="n">it</span> <span class="s1">&#39;BinaryTree#traverse_pre_order&#39;</span> <span class="k">do</span>
</span><span class="line">      <span class="nb">proc</span> <span class="p">{</span> <span class="n">bt</span><span class="o">.</span><span class="n">traverse_pre_order</span> <span class="p">}</span><span class="o">.</span><span class="n">must_output</span> <span class="s2">&quot;Tim</span><span class="se">\n</span><span class="s2">Jony</span><span class="se">\n</span><span class="s2">Dan</span><span class="se">\n</span><span class="s2">Katie</span><span class="se">\n</span><span class="s2">Peter</span><span class="se">\n</span><span class="s2">Andrea</span><span class="se">\n</span><span class="s2">Phil</span><span class="se">\n</span><span class="s2">Craig</span><span class="se">\n</span><span class="s2">Eddie</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="n">it</span> <span class="s1">&#39;BinaryTree#traverse_in_order&#39;</span> <span class="k">do</span>
</span><span class="line">      <span class="nb">proc</span> <span class="p">{</span> <span class="n">bt</span><span class="o">.</span><span class="n">traverse_in_order</span> <span class="p">}</span><span class="o">.</span><span class="n">must_output</span> <span class="s2">&quot;Dan</span><span class="se">\n</span><span class="s2">Jony</span><span class="se">\n</span><span class="s2">Peter</span><span class="se">\n</span><span class="s2">Katie</span><span class="se">\n</span><span class="s2">Andrea</span><span class="se">\n</span><span class="s2">Tim</span><span class="se">\n</span><span class="s2">Craig</span><span class="se">\n</span><span class="s2">Phil</span><span class="se">\n</span><span class="s2">Eddie</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="n">it</span> <span class="s1">&#39;BinaryTree#traverse_post_order&#39;</span> <span class="k">do</span>
</span><span class="line">      <span class="nb">proc</span> <span class="p">{</span> <span class="n">bt</span><span class="o">.</span><span class="n">traverse_post_order</span> <span class="p">}</span><span class="o">.</span><span class="n">must_output</span> <span class="s2">&quot;Dan</span><span class="se">\n</span><span class="s2">Peter</span><span class="se">\n</span><span class="s2">Andrea</span><span class="se">\n</span><span class="s2">Katie</span><span class="se">\n</span><span class="s2">Jony</span><span class="se">\n</span><span class="s2">Craig</span><span class="se">\n</span><span class="s2">Eddie</span><span class="se">\n</span><span class="s2">Phil</span><span class="se">\n</span><span class="s2">Tim</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[JavaScript OO Review]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/10/20/JS-review/"/>
    
    <updated>2014-10-20T14:30:00-07:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/10/20/JS-review</id>
    
    <content type="html"><![CDATA[<p>Interestingly enough JS is class-less yet everything is an object. There are 3 ways to instantiate an object:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">newObject</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">newObject</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span> <span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">newObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="the-literal-object-pattern">The Literal Object Pattern</h3>
<p>The first one is the object literal, a self contained wrapped object with all properties held inside in key / value pairs separated by commas. Check this <a href="http://rmurphey.com/blog/2009/10/15/using-objects-to-organize-your-code/">article</a>. It is a very neat to create objects in JS, clean and encapsulated that keep the code simple and clean.</p>

<p>The last one uses the Object constructor, something similar to Ruby’s BasicObject class.</p>

<h3 id="the-constructor-pattern">The Constructor Pattern</h3>
<p>Constructors are special functions. Or seen another way, by prefixing the word <code>new</code> to a function we tell JS to instantiate an Object according to the specifications defined in the function.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">Car</span><span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">this</span><span class="p">.</span><span class="nx">model</span> <span class="o">=</span> <span class="nx">model</span><span class="p">;</span>
</span><span class="line">  <span class="k">this</span><span class="p">.</span><span class="nx">to_s</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s2">&quot;model: &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">mode</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">model_T</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Car</span><span class="p">(</span><span class="s1">&#39;Ford T&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In this manner we can define what in ruby are instance variables and methods, but here they all are properties in key value pairs, independently of them being other object or functions.</p>

<p>The main problem is that we are defining the ‘methods’ inside each object at instantiation time. In Ruby the behavior is held in the Class, a common repo for all instantiated objects derived from it.</p>

<p>Enter the prototype, another object that is common to all JS objects. When we create an object with a constructor, everything defined in the constructor’s function is available to all instances created from it, analogous to a ruby class in terms of a common repo where all objects can go to find the methods they have.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">Car</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">to_s</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s2">&quot;model: &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">mode</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="the-module-pattern">The Module Pattern</h3>

<p>The idea behind it is to encapsulate and it resembles OO practices.</p>

<blockquote><p>Variables can&#8217;t technically be declared as being public nor private and so we use function scope to simulate this concept. Within the Module pattern, variables or methods declared are only available inside the module itself thanks to closure.</p><footer><strong>Addy Osmani, Learning JavaScript Design Patterns</strong> <cite><a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript">addyosmani.com/resources/book/&hellip;</a></cite></footer></blockquote>

<p>A module template that touches on private and public variables would like the following:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">myNamespace</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">  <span class="kd">var</span> <span class="nx">myPrivateVar</span><span class="p">,</span> <span class="nx">myPrivateMethod</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// A private counter variable</span>
</span><span class="line">  <span class="nx">myPrivateVar</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// A private function which logs any arguments</span>
</span><span class="line">  <span class="nx">myPrivateMethod</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">foo</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">foo</span> <span class="p">);</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// A public variable</span>
</span><span class="line">    <span class="nx">myPublicVar</span><span class="o">:</span> <span class="s2">&quot;foo&quot;</span><span class="p">,</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// A public function utilizing privates</span>
</span><span class="line">    <span class="nx">myPublicFunction</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">bar</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">      <span class="c1">// Increment our private counter</span>
</span><span class="line">      <span class="nx">myPrivateVar</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">      <span class="c1">// Call our private method using bar</span>
</span><span class="line">      <span class="nx">myPrivateMethod</span><span class="p">(</span> <span class="nx">bar</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line"><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Inside the module we have some internal private stuff shielded from the outside, and the module returns an object with the public API and public variables. This returned object is assigned to the myNamespace variable so we access its innards as properties of the object.</p>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Installing Octopress at github.io]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/10/20/Octopress-GH/"/>
    
    <updated>2014-10-20T11:00:00-07:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/10/20/Octopress-GH</id>
    
    <content type="html"><![CDATA[<p>I am collecting posts from my previous blog, ideogrammatic.com, adding some new ones I have written over the last month and putting it all together in github.io as my personal blog.</p>

<p>I am using Octopress with a tweaked mnml theme and have got hold of a nice domain with my handle sotoseattle to point to.</p>

<p>The basic deployment of an Octopress blog into your github.io is easy, and there are many posts with the details in the Internet so I am assuming you have gone through the paces.</p>

<p>Now, if you are like me, you’ll hit problems in unexpected places. I have found that it helps to understand how Octopress and GitHub actually use git repos between them.</p>

<p>In essence you’ll end up using two different git repos inside both your Octopress code base. And the fun part is that both point to the same github repo!</p>

<p>1.- the first can be found inside the folder _deploy:</p>

<ul>
  <li><code>rake generate</code> compiles the site from all the files in the source directory (and other resources) and places everything inside the _deploy folder.</li>
  <li><code>rake deploy</code> pushes it (the files inside _deploy) up to GitHub, actually to the to origin/master branch.</li>
</ul>

<p>So, for example, if we have a custom domain and we want it to point to our github.io site, we need a CNAME file that we place inside the source folder. After rake generate and rake deploy, it will show up in the root of origin/master (and inside our _deploy folder)</p>

<p>2.- The second git repo, you create it on the root:</p>

<p>For this one we create a single branch, “source”, that holds everything (all files, source and _deploy) and we push only to origin/source. Aha!, this repo goes to the ‘source’ branch in github, the generated one goes to ‘master’. So we don’t have a master branch in this local git repo, only source, and in this way we avoid pushing it to master in origin (which already tracks the first repo!).</p>

<p>Messy explanation, I know, but once you wrap your mind around the concept of 2 different repos pointing to 2 branches of the same upstream repo, it all makes sense.</p>

<p>Now, I may be off base in this explanation, if so, please set me straight in the comments.</p>

<p>Good luck with the Octos!</p>

<p><img class="center" src="http://sotoseattle.github.io/images/Oct14/octocat_octopress.png" width="400" title="Code Fellows logo" /></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Backgrounders]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/10/17/Backgrounders/"/>
    
    <updated>2014-10-17T20:00:00-07:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/10/17/Backgrounders</id>
    
    <content type="html"><![CDATA[<p>My fellow students at Code Fellows and I have made public a set of templates under the name of “<a href="https://github.com/Backgrounders">Backgrounders</a>” that show how to set up different types of Background Jobs for delivering automatic emails with Rails. We cover the main gems: Sidekiq, Resque, and Delayed Jobs. And we have included examples for both Rails 4.1 and 4.2. It is publicly available in GitHub.</p>

<p>We hope this small public source contribution help others as a reference when dealing with background workers. Following is my contribution to the common effort:</p>

<hr />

<p><br /></p>

<h1 id="rails-42-mailer-with-sidekiq-kick-ass-with-rails-42imagesoct14nonsensepng">Rails 4.2 Mailer with Sidekiq <img src="http://sotoseattle.github.io/images/Oct14/nonsense.png" alt="kick ass with rails 4.2!" /></h1>

<p>This is a template for how to set up Rails 4.2 with background jobs from Sidekiq using Redis.</p>

<p>In a nutshell, when we create a background jobs we pass an object with the data to use to the worker. In most cases, we pass a Model object (i.e. ActiveRecord), so make things simpler we just pass the id of the object to the worker, and Rails and Sidekiq take care of everything for us (finding it in the database, serializing and de-serializing it).</p>

<p>In this template we have taken a different route. Instead of passing an existing Model object we pass an ad-hoc one, created in the spot and stored in a hash that we pass to the worked in json format. Then, it is up to us to tell the worker how to  de-serialize it, reconstituting the original hash from the json string, to be able to operate on the data passed.</p>

<p>All this will become more clear with an example.</p>

<!--more-->

<p>Our app has a simple contact page with a custom form that the user fills with some request of information. Upon submission of the form, our app will create a background job to send an email and defer its responsibilities to Sidequik.</p>

<h3 id="prep-work">1. Prep Work</h3>

<h4 id="add-letteropener-and-launchy-gem"><em>Add letter_opener and launchy gem</em></h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">gem</span> <span class="s2">&quot;letter_opener&quot;</span>
</span><span class="line"><span class="n">gem</span> <span class="s2">&quot;launchy&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Letter_Oppener allows us, in development, to simulate the process of sending the email by creating it as a temporary file. That way we avoid sending the actual email over the network, which is messy and brittle to test.</p>

<p>The Launchy gem automatically opens the created temp file in a browser window so the sending process becomes automatic and we have real time confirmation that the email was sent correctly.</p>

<p>We need to modify the ‘config/environments/development.rb’.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># to be appraised of mailing errors</span>
</span><span class="line"><span class="n">config</span><span class="o">.</span><span class="n">action_mailer</span><span class="o">.</span><span class="n">raise_delivery_errors</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class="line"><span class="c1"># to deliver to the browser instead of email</span>
</span><span class="line"><span class="n">config</span><span class="o">.</span><span class="n">action_mailer</span><span class="o">.</span><span class="n">delivery_method</span> <span class="o">=</span> <span class="ss">:letter_opener</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="mailer">2. Mailer</h3>

<h4 id="generate-mailer"><em>Generate Mailer</em></h4>

<p>We start with a basic new Rails application without controllers, models or views, and we generate a mailer.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="err">$</span> <span class="n">rails</span> <span class="n">g</span> <span class="n">mailer</span> <span class="no">VisitorMailer</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="create-mailer-action"><em>Create Mailer Action</em></h4>

<p>We pass to the Mailer action the information we need to build the email: name, email address and body of email. We make all of them available to the corresponding view (the email template) through instance variables.</p>

<p>Keep in mind that this action, ‘contact_email’, will be the one that the worker (background process) will execute.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">VisitorMailer</span> <span class="o">&lt;</span> <span class="ss">ActionMailer</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">contact_email</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class="line">    <span class="vi">@email</span> <span class="o">=</span> <span class="n">email</span>
</span><span class="line">    <span class="vi">@message</span> <span class="o">=</span> <span class="n">message</span>
</span><span class="line">    <span class="n">mail</span><span class="p">(</span><span class="ss">from</span><span class="p">:</span> <span class="vi">@email</span><span class="p">,</span>
</span><span class="line">         <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;javier@badaboom.com&#39;</span><span class="p">,</span>
</span><span class="line">         <span class="ss">subject</span><span class="p">:</span> <span class="s1">&#39;New Visitor\&#39;s Email&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="create-email-template"><em>Create EMail Template</em></h4>

<p>The view associated with the controller action is the actual template for the email to be sent. We make two versions, in html and text format, with the information passed through instance variables.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="o">&lt;!</span><span class="no">DOCTYPE</span> <span class="n">html</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">head</span><span class="o">&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="n">meta</span> <span class="n">content</span><span class="o">=</span><span class="s1">&#39;text/html; charset=UTF-8&#39;</span> <span class="n">http</span><span class="o">-</span><span class="n">equiv</span><span class="o">=</span><span class="s1">&#39;Content-Type&#39;</span> <span class="sr">/&gt;</span>
</span><span class="line"><span class="sr">  &lt;/</span><span class="n">head</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">body</span><span class="o">&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;&lt;</span><span class="sx">%= @name %&gt; (&lt;%=</span> <span class="vi">@email</span> <span class="sx">%&gt;)&lt;/h1&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class="line">      <span class="o">&lt;%=</span> <span class="vi">@message</span> <span class="sx">%&gt;</span>
</span><span class="line"><span class="sx">    &lt;/p&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="sr">/body&gt;</span>
</span><span class="line"><span class="sr">&lt;/</span><span class="n">html</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="the-resource">3. The Resource</h3>

<h4 id="generate-controller"><em>Generate Controller</em></h4>

<p>Now that the Mailer is set and done we generate the VisitorsController.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="err">$</span> <span class="n">rails</span> <span class="n">g</span> <span class="n">controller</span> <span class="n">visitors</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We add two actions. The index actions displays the basic contact form. Once submitted, it reaches the contact action where we extract the form parameters.</p>

<p>The form information is packaged into a hash and subsequently JSONified so we can pass it as an argument to the worker (a Sidekiq requirement).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">VisitorsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">index</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">contact</span>
</span><span class="line">    <span class="n">h</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">generate</span><span class="p">({</span> <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">                        <span class="s1">&#39;email&#39;</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">                        <span class="s1">&#39;message&#39;</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:message</span><span class="o">]</span> <span class="p">})</span>
</span><span class="line">
</span><span class="line">    <span class="no">PostmanWorker</span><span class="o">.</span><span class="n">perform_async</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># if instead of sidekiq I was just sending email from rails</span>
</span><span class="line">    <span class="c1"># VisitorMailer.contact_email(@name, @email, @message).deliver</span>
</span><span class="line">
</span><span class="line">    <span class="n">redirect_to</span> <span class="ss">:root</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="make-a-small-form-for-the-view"><em>Make a small form for the View</em></h4>

<p>Just a simple form.</p>

<h4 id="update-the-routes"><em>Update the routes</em></h4>

<p>We haven’t done it yet and we cannot defer anymore, we need to establish our routes and root.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class="line">  <span class="n">post</span> <span class="s1">&#39;visitors/contact&#39;</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;visitors#contact&#39;</span>
</span><span class="line">  <span class="n">root</span> <span class="s1">&#39;visitors#index&#39;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="the-model"><em>The Model?</em></h4>

<p>Nope, no model. The controller just passes the information received from the form directly to the worker.</p>

<h3 id="the-background-worker">4. The background worker</h3>

<h4 id="install-sidekiq"><em>Install Sidekiq</em></h4>

<p>Add to your Gemfile and don’t forget to bundle up.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">gem</span> <span class="s1">&#39;sidekiq&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="create-a-worker"><em>Create a Worker</em></h4>

<p>We essentially follow the instructions from the Sidekiq’s readme and docs, and we create a worker responsible for delivering emails, a Postman worker.</p>

<p>The key here is that the worker needs a json object as simple as possible. Usually this would be the id from a Model object, in which case Sidekiq would serialize and de-serialize the object referenced by it.</p>

<p>In our case, the information is not stored in the database so we create a json hash, that we passed to the worker for queuing in Redis. Now, the key is that we also need to de-serialize this json object upon arrival to re-create the hash. Once re-constituted, the hash gives us access to the data we need to call the ActionMailer and deliver the email.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">PostmanWorker</span>
</span><span class="line">  <span class="kp">include</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Worker</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span>
</span><span class="line">    <span class="n">h</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">h</span><span class="p">)</span>
</span><span class="line">    <span class="no">VisitorMailer</span><span class="o">.</span><span class="n">contact_email</span><span class="p">(</span><span class="n">h</span><span class="o">[</span><span class="s1">&#39;name&#39;</span><span class="o">]</span><span class="p">,</span> <span class="n">h</span><span class="o">[</span><span class="s1">&#39;email&#39;</span><span class="o">]</span><span class="p">,</span> <span class="n">h</span><span class="o">[</span><span class="s1">&#39;message&#39;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">deliver</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The results show up in the browser when the email is sent.</p>

<h4 id="add-dashboard"><em>Add Dashboard</em></h4>

<p>This nifty tool, the Sidekiq Dashboard, runs on Sinatra, which we have to add to the Gemfile.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">gem</span> <span class="s1">&#39;sinatra&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;= 1.3.0&#39;</span><span class="p">,</span> <span class="ss">:require</span> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And we simply add it to our routes…</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;sidekiq/web&#39;</span>
</span><span class="line"><span class="n">mount</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Web</span> <span class="o">=&gt;</span> <span class="s1">&#39;/sidekiq&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>…so it becomes available in (depending on your setup) http://localhost:3000/sidekiq</p>

<p>Beware that anybody can access this dashboard once in production, so check for ways to secure its access.</p>

<h3 id="final-setup">5. Final Setup</h3>

<p>The final touches involve making sure you have bundle installed, and installing Redis if not already in place (for which I recommend to use brew on Mac OS X whenever possible to avoid headaches)</p>

<p>Then all that is left is to start each service in its own tab like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="err">$</span> <span class="n">rails</span> <span class="n">s</span>
</span><span class="line"><span class="err">$</span> <span class="n">redis</span><span class="o">-</span><span class="n">server</span>
</span><span class="line"><span class="err">$</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">sidekiq</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can also user <a href="https://github.com/ddollar/foreman">Foreman</a> and save yourself opening tabs and running things separately.</p>

<p>We haven’t included tests in this template, which is a necessary best practice to follow. I leave it up to you to BDD this template with the necessary tests.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Ruby Metaprogramming in Action]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/10/05/Metaprogramming/"/>
    
    <updated>2014-10-05T08:01:00-07:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/10/05/Metaprogramming</id>
    
    <content type="html"><![CDATA[<p>The <a href="https://github.com/dkubb/equalizer">Equalizer gem</a> provides a nifty example of Ruby metaprogramming.</p>

<p>It is a module that when added to your class helps define equality, equivalence and inspection methods.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">GeoLocation</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Equalizer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:latitude</span><span class="p">,</span> <span class="ss">:longitude</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:latitude</span><span class="p">,</span> <span class="ss">:longitude</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">latitude</span><span class="p">,</span> <span class="n">longitude</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@latitude</span><span class="p">,</span> <span class="vi">@longitude</span> <span class="o">=</span> <span class="n">latitude</span><span class="p">,</span> <span class="n">longitude</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">point_a</span> <span class="o">=</span> <span class="no">GeoLocation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="n">point_b</span> <span class="o">=</span> <span class="no">GeoLocation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">point_a</span><span class="o">.</span><span class="n">inspect</span>    <span class="c1"># =&gt; &quot;#&lt;GeoLocation latitude=1 longitude=2&gt;&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">point_a</span> <span class="o">==</span> <span class="n">point_b</span>           <span class="c1"># =&gt; true</span>
</span><span class="line"><span class="n">point_a</span><span class="o">.</span><span class="n">hash</span> <span class="o">==</span> <span class="n">point_b</span><span class="o">.</span><span class="n">hash</span> <span class="c1"># =&gt; true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<!--more-->

<h2 id="include-instance-of-a-module">Include instance of a Module?</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># example</span>
</span><span class="line"><span class="k">class</span> <span class="nc">GeoLocation</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Equalizer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:latitude</span><span class="p">,</span> <span class="ss">:longitude</span><span class="p">)</span>
</span><span class="line"><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The first thing that calls the attention when reading the code is the instantiation of the module. What? Weren’t modules used to be abstract, nice little packages of functionality, angelical and stateless, devoid of the tribulations of commoner fleshed-out Objects?</p>

<p>In Ruby everything is an Object, and the following two ways of coding a module are equivalent:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Insane</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">hello</span>
</span><span class="line">    <span class="s1">&#39;hola&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">Insane</span> <span class="o">=</span> <span class="no">Module</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">hello</span>
</span><span class="line">    <span class="s1">&#39;hola&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Let’s inspect the Equalizer’s code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># equalizer.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Equalizer</span> <span class="o">&lt;</span> <span class="no">Module</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">*</span><span class="n">keys</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@keys</span> <span class="o">=</span> <span class="n">keys</span>
</span><span class="line">    <span class="n">define_methods</span>
</span><span class="line">    <span class="nb">freeze</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># example</span>
</span><span class="line"><span class="k">class</span> <span class="nc">GeoLocation</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Equalizer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:latitude</span><span class="p">,</span> <span class="ss">:longitude</span><span class="p">)</span>
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In the last line lies the rub, the double nature of Equalizer.</p>

<ol>
  <li>Equalizer is a Module and by ‘including’ it, GeoLocation makes all methods from Equalizer available to his objects.</li>
  <li>Yet Equalizer is defined as a class that can be instantiated.</li>
</ol>

<p>But we have seen that everything is an object and there is no need to make it a class object, so the instantiation must serve a different purpose.</p>

<p>Yes, by defining Equalizer as a class that can be instantiated, at that moment of instantiation we can pass the specific instance variables in an instant (sorry!) to customize those methods based on the keys passed (latitude and longitude). So Equalizer defines methods based on something undefined (keys), and only at inclusion (when we know which are the instance variables to make comparable) it customizes its module’s methods on the fly.</p>

<p>Although stateless, Equalizer is able to be adapt to the circumstances of each class that will include it. In our example, at instantiation it uses GeoLocation’s latitude and longitude to redefine its methods at the last minute, to the effect of adding to them the ability to be comparable.</p>

<p>Let’s check it works:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Insane</span> <span class="o">&lt;</span> <span class="no">Module</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class="line">    <span class="n">define_method</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2">?&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="s1">&#39;God!&#39;</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Person</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:who_am_i</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Insane</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:who_am_i</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@who_am_i</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;javier&#39;</span><span class="p">)</span>
</span><span class="line"><span class="nb">puts</span> <span class="s2">&quot;a.who_am_i = </span><span class="si">#{</span><span class="n">a</span><span class="o">.</span><span class="n">who_am_i</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="n">a</span><span class="o">.</span><span class="n">who_am_i</span> <span class="o">=</span> <span class="n">javier</span>
</span><span class="line"><span class="nb">puts</span> <span class="s2">&quot;a.who_am_i? = </span><span class="si">#{</span><span class="n">a</span><span class="o">.</span><span class="n">who_am_i?</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="n">a</span><span class="o">.</span><span class="n">who_am_i?</span> <span class="o">=</span> <span class="no">God</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Convoluted, pirouettical, and yet it works.</p>

<h2 id="define-method">Define Method</h2>

<p>Among other metaprogramming tricks it uses the define_method extensively. Although this is usually done to create a new named method at runtime, in this case, the method’s names are set from the start, what is created dynamically is the way the method operates.</p>

<p>For example, the cmp? (comparable?) method has a set name (cmp?) and the blocks passed is also well defined (we check that all keys of both objects return the same values), but the fact that we won’t know which keys are available to compare until runtime makes this use an example of metaprogramming.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># where we make attributes comparable</span>
</span><span class="line"><span class="k">def</span> <span class="nf">define_cmp_method</span>
</span><span class="line">  <span class="n">keys</span> <span class="o">=</span> <span class="vi">@keys</span>
</span><span class="line">  <span class="n">define_method</span><span class="p">(</span><span class="ss">:cmp?</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">comparator</span><span class="p">,</span> <span class="n">other</span><span class="o">|</span>
</span><span class="line">    <span class="n">keys</span><span class="o">.</span><span class="n">all?</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="o">|</span> <span class="nb">send</span><span class="p">(</span><span class="n">key</span><span class="p">)</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">comparator</span><span class="p">,</span> <span class="n">other</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">key</span><span class="p">))</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="kp">private</span> <span class="ss">:cmp?</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># The comparisson method</span>
</span><span class="line"><span class="k">def</span> <span class="nf">==</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
</span><span class="line">  <span class="n">other</span> <span class="o">=</span> <span class="n">coerce</span><span class="p">(</span><span class="n">other</span><span class="p">)</span> <span class="k">if</span> <span class="nb">respond_to?</span><span class="p">(</span><span class="ss">:coerce</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class="line">  <span class="n">other</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">cmp?</span><span class="p">(</span><span class="n">__method__</span><span class="p">,</span> <span class="n">other</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Two notes:</p>

<ol>
  <li>
    <p>The cmp? method is just a DRY method used to define the real comparison methods (eql? and ==). This way it is easy to extend.</p>
  </li>
  <li>
    <p>Consider also that we include this Equalizer class as an instantiated object when defining the class, so when we instantiate a new object all Equalizer methods are available as instance methods already defined for the existing instance variables.</p>
  </li>
</ol>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Rails BDD cheats]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/09/17/Rails-BDD/"/>
    
    <updated>2014-09-17T18:01:00-07:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/09/17/Rails-BDD</id>
    
    <content type="html"><![CDATA[<p>As a reminder, when testing BDD style a Rails app these are helpful to have close by:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># Rakefile</span>
</span><span class="line"><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../config/application&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">load_tasks</span>
</span><span class="line">
</span><span class="line"><span class="ss">Rails</span><span class="p">:</span><span class="ss">:TestTask</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;test:features&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;test:prepare&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class="line">  <span class="n">t</span><span class="o">.</span><span class="n">pattern</span> <span class="o">=</span> <span class="s1">&#39;test/features/**/*_test.rb&#39;</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="ss">Rake</span><span class="p">:</span><span class="ss">:Task</span><span class="o">[</span><span class="s1">&#39;test:run&#39;</span><span class="o">].</span><span class="n">enhance</span> <span class="o">[</span><span class="s1">&#39;test:features&#39;</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="n">task</span> <span class="ss">default</span><span class="p">:</span> <span class="s1">&#39;test&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># test_helper.rb</span>
</span><span class="line"><span class="c1"># ENV[&#39;RAILS_ENV&#39;] ||= &#39;test&#39;</span>
</span><span class="line"><span class="no">Rails</span><span class="o">.</span><span class="n">env</span> <span class="o">=</span> <span class="s1">&#39;test&#39;</span>
</span><span class="line"><span class="nb">puts</span> <span class="s2">&quot;Current environment: </span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">
</span><span class="line"><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../../config/environment&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;rails/test_help&#39;</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;minitest/rails/capybara&#39;</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;capybara/poltergeist&#39;</span>
</span><span class="line"><span class="c1"># require &#39;pry-rescue/minitest&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">ActiveSupport</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class="line">  <span class="n">fixtures</span> <span class="ss">:all</span>
</span><span class="line">  <span class="no">Capybara</span><span class="o">.</span><span class="n">javascript_driver</span> <span class="o">=</span> <span class="ss">:poltergeist</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># test/features/do_some_test.rb</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;test_helper&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">feature</span> <span class="s1">&#39;Do something&#39;</span> <span class="k">do</span>
</span><span class="line">  <span class="n">scenario</span> <span class="s1">&#39;anybody can do something&#39;</span> <span class="k">do</span>
</span><span class="line">    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Ask before pushing]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/09/16/git-push-confirm/"/>
    
    <updated>2014-09-16T08:01:00-07:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/09/16/git-push-confirm</id>
    
    <content type="html"><![CDATA[<p>During the usual git work flow we get so used to re-keying commands that sometimes we push up without thinking. Most things are easy to fit locally in git, besides, as they say, when in doubt reset –hard. But once your code is committed up to a publicly available and centralized repo, you become the butt of jokes in the office, people point at you behind your back and changing history becomes a nightmare.</p>

<p>I have found a little trick that helps with this, git hooks!</p>

<p>Inside your .git folder there is another one, ‘hooks’, and inside, there is a treasure trove of configurable callbacks to personalize your git work flow.</p>

<p>There are many good sources in the Internet to check. Here is a good walk through: <a href="http://blog.ittybittyapps.com/blog/2013/09/03/git-pre-push/">link</a>. And this is the <a href="http://git-scm.com/book/en/Customizing-Git-Git-Hooks">Chacon bible</a> chapter about it.</p>

<p>I ended including the following file ‘.git/hooks/pre-push’, which forces a confirmation every time I intend to push to master. Many other variants are possible, like making sure that your tests have run before pushing, I recommend exploring them all.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/bin/bash</span>
</span><span class="line">
</span><span class="line"><span class="nv">protected_branch</span><span class="o">=</span><span class="s1">&#39;master&#39;</span>
</span><span class="line"><span class="nv">current_branch</span><span class="o">=</span><span class="k">$(</span>git symbolic-ref HEAD | sed -e <span class="s1">&#39;s,.*/\(.*\),\1,&#39;</span><span class="k">)</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="o">[</span> <span class="nv">$protected_branch</span> <span class="o">=</span> <span class="nv">$current_branch</span> <span class="o">]</span>
</span><span class="line"><span class="k">then</span>
</span><span class="line"><span class="k">    </span><span class="nb">read</span> -p <span class="s2">&quot;You&#39;re about to push master, is that what you intended? [y|n] &quot;</span> -n 1 -r &lt; /dev/tty
</span><span class="line">    <span class="nb">echo</span>
</span><span class="line"><span class="nb">    </span><span class="k">if </span><span class="nb">echo</span> <span class="nv">$REPLY</span> | grep -E <span class="s1">&#39;^[Yy]$&#39;</span> &gt; /dev/null
</span><span class="line">    <span class="k">then</span>
</span><span class="line"><span class="k">        </span><span class="nb">exit </span>0 <span class="c"># push will execute</span>
</span><span class="line">    <span class="k">fi</span>
</span><span class="line"><span class="k">    </span><span class="nb">exit </span>1 <span class="c"># push will not execute</span>
</span><span class="line"><span class="k">else</span>
</span><span class="line"><span class="k">    </span><span class="nb">exit </span>0 <span class="c"># push will execute</span>
</span><span class="line"><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Back to School]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/09/15/Back-to-School/"/>
    
    <updated>2014-09-15T08:01:00-07:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/09/15/Back-to-School</id>
    
    <content type="html"><![CDATA[<p>In order to hone in my coding skills and get up to par with professional best practices I am joining the <em>Rails Dev Accelerator Course</em> imparted by <a href="http://www.codefellows.com">Code Fellows</a>.</p>

<p>Code Fellows is a start up inserted in the middle of the Amazon campus in South Lake Union. It is a dynamic environment full of energetic and passionate coders (students, staff and teachers).</p>

<p>It promises to be 8 frantic weeks of theory and practice based on all kinds of coding assignments. I’ll try to keep up blogging in the interim but please forgive me if the workload keeps me away from these posts.</p>

<p><a href="http://www.codefellows.com"><img class="center" src="http://sotoseattle.github.io/images/logos/codefellows.png" width="200" title="Code Fellows logo" /></a></p>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[MCMC MH Swendsen Wang v.2.]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/02/16/MCC-MH-SW2/"/>
    
    <updated>2014-02-16T08:01:00-08:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/02/16/MCC-MH-SW2</id>
    
    <content type="html"><![CDATA[<p>In variant II we change the way we compute Q and R.</p>

<h2 id="the-q-continuum">The Q Continuum</h2>

<p>Q, the transition probability, now depends on the probabilities of the factors on each edge. If I understand it all correctly, it is defined as a ratio between the sum of probabilities of both nodes in the edge maintaining its old assignment, to the the sum of probabilities of all possible assignment for both nodes. Remember that in variant I this was uniformly set to 0.5.</p>

<script type="math/tex; mode=display">
q_{ij} := \frac{\sum_u{\Phi_{i,j}(u,u)}}{\sum_{u,v}{\Phi_{i,j}(u,v)}}
</script>

<p>The way we compute each <script type="math/tex">q_{ij}</script> is not complicated. Beware that we are assuming there is a single factor in each edge.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Q variant II</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">qij_var_2</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">):</span>
</span><span class="line">    <span class="n">x</span><span class="p">,</span><span class="n">y</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">v</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class="line">    <span class="n">fuedge</span> <span class="o">=</span> <span class="p">[</span><span class="n">fu</span> <span class="k">for</span> <span class="n">fu</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">factors</span> <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="ow">in</span> <span class="n">fu</span><span class="o">.</span><span class="n">variables</span><span class="p">)</span> <span class="ow">and</span> <span class="p">(</span><span class="n">y</span> <span class="ow">in</span> <span class="n">fu</span><span class="o">.</span><span class="n">variables</span><span class="p">)][</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">    <span class="n">num</span><span class="p">,</span> <span class="n">den</span> <span class="o">=</span> <span class="mf">0.</span><span class="p">,</span> <span class="mf">0.</span>
</span><span class="line">    <span class="k">for</span> <span class="n">ass_1</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">totCard</span><span class="p">()):</span>
</span><span class="line">        <span class="k">for</span> <span class="n">ass_2</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">y</span><span class="o">.</span><span class="n">totCard</span><span class="p">()):</span>
</span><span class="line">            <span class="n">value</span> <span class="o">=</span> <span class="n">FactorOperations</span><span class="o">.</span><span class="n">reduce_to_value</span><span class="p">(</span><span class="n">fuedge</span><span class="p">,</span> <span class="p">{</span><span class="n">x</span><span class="p">:</span><span class="n">ass_1</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span><span class="n">ass_2</span><span class="p">})</span>
</span><span class="line">            <span class="n">den</span> <span class="o">+=</span> <span class="n">value</span>
</span><span class="line">            <span class="k">if</span> <span class="n">ass_1</span><span class="o">==</span><span class="n">ass_2</span><span class="p">:</span>
</span><span class="line">                <span class="n">num</span> <span class="o">+=</span> <span class="n">value</span>
</span><span class="line">    <span class="k">return</span> <span class="n">num</span><span class="o">/</span><span class="n">den</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="r-not-as-simple-as-it-seems">R, not as simple as it seems</h2>

<p>R will be the logDistAss probability that we computed for Gibbs, but now instead of observing one var at a time, we observe a group. It has taken me my sweet time to figure out how to do it (based on what I already did in PA5 but more out of luck than reasoning).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>R is Simple</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">MH_Swendsen_Wang</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">from_ass</span><span class="p">):</span>
</span><span class="line">	<span class="o">...</span>
</span><span class="line">    <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">variant</span><span class="o">==</span><span class="mi">2</span><span class="p">:</span>
</span><span class="line">        <span class="n">logR</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">logDistAss</span><span class="p">([</span><span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">Y_v_id</span><span class="p">],</span> <span class="n">from_ass</span><span class="p">)</span>
</span><span class="line">    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The key for LogDistAss is that when we are looking at extracting from a factor the probability of a variable given that all the other variables in the factor have an assignment, like in the Bigss sampling code, it is very fast and we already have utility method that does that.</p>

<p>When instead of one, we have a set of variables, we need to reduce the factor by the assigned variables and then marginalize by the rest up to obtaining the distribution. The following code is messy, my understanding of it is not completly firm, and it should be refactored, which I leave for a future time.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>LogProbability of Partial Assignment Not So Easy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">logDistAss</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sample_vars</span><span class="p">,</span> <span class="n">evidence</span><span class="p">):</span>
</span><span class="line">    <span class="n">cardio</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span><span class="n">e</span><span class="o">.</span><span class="n">totCard</span><span class="p">()</span> <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">sample_vars</span><span class="p">])</span>
</span><span class="line">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">cardio</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">:</span>
</span><span class="line">        <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&quot;All sampling vars must have the same cardinality&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">logbp</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.</span><span class="p">]</span><span class="o">*</span><span class="n">cardio</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="n">all_f</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">fu</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">sample_vars</span> <span class="k">for</span> <span class="n">fu</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">var_to_factors</span><span class="p">[</span><span class="n">a</span><span class="p">]))</span>
</span><span class="line">    <span class="k">for</span> <span class="n">fu</span> <span class="ow">in</span> <span class="n">all_f</span><span class="p">:</span>
</span><span class="line">        <span class="n">vs</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">fu</span><span class="o">.</span><span class="n">variables</span> <span class="k">if</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">sample_vars</span><span class="p">]</span>
</span><span class="line">
</span><span class="line">        <span class="n">evi</span><span class="p">,</span> <span class="n">mar</span> <span class="o">=</span> <span class="p">{},</span> <span class="p">[]</span>
</span><span class="line">        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">fu</span><span class="o">.</span><span class="n">variables</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="n">k</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">vs</span><span class="p">:</span>
</span><span class="line">                <span class="n">evi</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">evidence</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="n">mar</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">vs</span><span class="p">)</span><span class="o">==</span><span class="mi">1</span><span class="p">:</span>
</span><span class="line">            <span class="n">dist</span> <span class="o">=</span> <span class="n">FactorOperations</span><span class="o">.</span><span class="n">reduce_to_dist</span><span class="p">(</span><span class="n">fu</span><span class="p">,</span> <span class="n">evi</span><span class="p">)</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="n">gg</span> <span class="o">=</span> <span class="n">FactorOperations</span><span class="o">.</span><span class="n">observe</span><span class="p">(</span><span class="n">fu</span><span class="p">,</span> <span class="n">evi</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
</span><span class="line">            <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">mar</span><span class="p">:</span>
</span><span class="line">                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">gg</span><span class="o">.</span><span class="n">variables</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">:</span>
</span><span class="line">                    <span class="n">gg</span> <span class="o">=</span> <span class="n">FactorOperations</span><span class="o">.</span><span class="n">marginalize</span><span class="p">(</span><span class="n">gg</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class="line">            <span class="n">dist</span> <span class="o">=</span> <span class="n">gg</span><span class="o">.</span><span class="n">values</span>
</span><span class="line">
</span><span class="line">    <span class="n">logbp</span> <span class="o">+=</span> <span class="n">np</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">dist</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">logbp</span> <span class="o">=</span> <span class="n">logbp</span> <span class="o">-</span> <span class="nb">min</span><span class="p">(</span><span class="n">logbp</span><span class="p">)</span> <span class="c"># to avoid underflow when back in normal space</span>
</span><span class="line">    <span class="k">return</span> <span class="n">logbp</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="analysis">Analysis</h2>

<p>Following the same procedures and initial inputs as we did for Gibbs, MH Uniform and SW-I we produce the following chart for comparison purposes.</p>

<p>Mixing time:</p>

<p><img class="center" src="http://sotoseattle.github.io/images/feb14/MHSW_2_mix.png" width="500" title="Mixing Windows Run 1" /></p>

<p>Sample Size:</p>

<p><img class="center" src="http://sotoseattle.github.io/images/feb14/MHSW_2_size.png" width="500" title="Sample Size Run 1" /></p>

<p>Marginals Convergence for the extreme case [0.95, 0.05]:</p>

<p><img class="center" src="http://sotoseattle.github.io/images/feb14/MHSW_2_cross.png" width="500" /></p>

<p>Histogram of dist to true marginal based on 100 runs on 16 node Ising:</p>

<p><img class="center" src="http://sotoseattle.github.io/images/feb14/MHSW_2_hist.png" width="500" /></p>

<p>Amazing. An Average error of 0.04 0with standard deviation of 0.01.</p>

]]></content>
    
  </entry>
  
</feed>