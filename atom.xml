<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[SotoSeattle]]></title>
  <link href="http://sotoseattle.github.io/atom.xml" rel="self"/>
  <link href="http://sotoseattle.github.io/"/>
  <updated>2014-11-13T09:19:35-08:00</updated>
  <id>http://sotoseattle.github.io/</id>
  <author>
    <name><![CDATA[Javier Soto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[Primo Lives!]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/11/02/Primo-Lives/"/>
    
    <updated>2014-11-02T20:17:00-08:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/11/02/Primo-Lives</id>
    
    <content type="html"><![CDATA[<p><img class="right" src="http://sotoseattle.github.io/images/Nov14/dice.png" width="400" /></p>

<p>My Rubygem Primo is alive and kicking! Check it out at <a href="https://github.com/sotoseattle/Primo">Github</a>.</p>

<p>In 2013 I took the online course “Probabilistic Graphical Models” (Stanford, Prof. Daphne Koller) from <a href="https://www.coursera.org/course/pgm">Coursera.org</a>. It was complex and difficult, but a lot of fun because of all the possibilities it opens up. This gem is a liberal translation of the code I worked with in Octave throughout the course, and which later I coded in python to learn the language.</p>

<p>Sincere thanks to Masahiro Tanaka for his wonderful <a href="http://masa16.github.io/narray/">NArray gem</a>, which allows me to, for example, multiply two multi-dimensional arrays element-wise in a single step, after aligning them with simple rotations of their axes (actually pretty cool).</p>

<p>I have christened this working library PRIMO (Probabilistic Inference Modeling) because in Spanish it means either prime, first, cousin or dumb! :)</p>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Wiring Devise into Angular + Rails]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/10/30/Devise-Angular-Rails/"/>
    
    <updated>2014-10-30T16:17:00-07:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/10/30/Devise-Angular-Rails</id>
    
    <content type="html"><![CDATA[<h3 id="walk-through-to-use-devise-with-angular-in-rails-42">Walk-through to use Devise with Angular in Rails 4.2.</h3>

<p>This is more of a jump-through than a walk-through since I am going to be more jumping around the code than really walking it slowly. The reason for this is that I think it will be more valuable to have a general idea of how the wiring works than an excessively detailed view that may not apply to most cases (my example was very basic).</p>

<p>Include in your Gemfile devise and bundle. We request at least version 4.3.1 because of some troubles with previous versions and Rails 4.2.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">gem</span> <span class="s1">&#39;devise&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.4.1&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Run the generator and follow the config steps suggested by the gem.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>rails g devise:install
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Make devise respond to json by adding the following to your application.rb:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">config</span><span class="o">.</span><span class="n">to_prepare</span> <span class="k">do</span>
</span><span class="line">  <span class="no">DeviseController</span><span class="o">.</span><span class="n">respond_to</span> <span class="ss">:html</span><span class="p">,</span> <span class="ss">:json</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<p>Generate the User model with devise:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>rails g devise user
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Don’t forget to floss, I mean <code>rake migrate</code>. Now, download the following modules from the angular site: [angular-cookies.js, angular-route.js] and place them where you have your angular file (in my case in app/assets/javascripts/). Make sure to add them to the application.js manifest after loading angular:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">//= require jquery</span>
</span><span class="line"><span class="c1">//= require jquery_ujs</span>
</span><span class="line"><span class="c1">//= require angular.min</span>
</span><span class="line"><span class="c1">//= require angular-cookies.min</span>
</span><span class="line"><span class="c1">//= require angular-route.min</span>
</span><span class="line"><span class="p">...</span>
</span><span class="line"><span class="c1">//= require_tree .</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now, in my case I use the application layout to call the angular app.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="erb"><span class="line"><span class="x">&lt;!-- application.html.erb --&gt;</span>
</span><span class="line"><span class="x">&lt;!DOCTYPE html&gt;</span>
</span><span class="line"><span class="x">&lt;html data-ng-app=&quot;WhateverApp&quot;&gt;</span>
</span><span class="line"><span class="x">  &lt;head&gt;...&lt;/head&gt;</span>
</span><span class="line"><span class="x">  &lt;body&gt;</span>
</span><span class="line"><span class="x">    </span><span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class="line"><span class="x">  &lt;/body&gt;</span>
</span><span class="line"><span class="x">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Again, in my particular case all I have is a single Rails controller with a single action (index), and a single index view. In that index.html.erb we reference to angular routes:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="erb"><span class="line"><span class="x">&lt;div data-ng-view&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In app/assets/javascript/angular_app/ we create a new file <code>routes.js</code> with the routes we want. In my case I have appended the .erb type so Rails pre-processes the erb tags:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;GemStore&#39;</span><span class="p">);</span>
</span><span class="line">  <span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">([</span><span class="s1">&#39;$routeProvider&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$routeProvider</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">$routeProvider</span>
</span><span class="line">      <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/store_front&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;Resource1Controller&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;&lt;%= asset_path(&quot;angular_app/resource_1/views/store_forefront.html&quot;) %&gt;&#39;</span>
</span><span class="line">      <span class="p">})</span>
</span><span class="line">      <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/admin&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;UsersCtrl&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;&lt;%= asset_path(&quot;angular_app/users/views/user_entrance.html&quot;) %&gt;&#39;</span>
</span><span class="line">      <span class="p">})</span>
</span><span class="line">      <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/dashboard&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;Resource2Ctrl&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;&lt;%= asset_path(&quot;angular_app/resource_2/views/dashboard.html&quot;) %&gt;&#39;</span>
</span><span class="line">      <span class="p">})</span>
</span><span class="line">      <span class="p">.</span><span class="nx">otherwise</span><span class="p">({</span>
</span><span class="line">        <span class="nx">redirectTo</span><span class="o">:</span> <span class="s1">&#39;/store_front&#39;</span>
</span><span class="line">      <span class="p">});</span>
</span><span class="line">  <span class="p">}]);</span>
</span><span class="line"><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The route /admin will take us to the User that Devise created and whose view is:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="o">&lt;</span><span class="nx">div</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">controller</span><span class="o">=</span><span class="s2">&quot;UsersCtrl&quot;</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">show</span><span class="o">=</span><span class="s2">&quot;!isLoggedIn()&quot;</span><span class="o">&gt;</span>
</span><span class="line">      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">click</span><span class="o">=</span><span class="s2">&quot;setForm(&#39;signUp&#39;)&quot;</span><span class="o">&gt;</span> <span class="nx">Create</span> <span class="nx">User</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class="line">      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">click</span><span class="o">=</span><span class="s2">&quot;setForm(&#39;signIn&#39;)&quot;</span><span class="o">&gt;</span><span class="nx">Sign</span> <span class="nx">In</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">show</span><span class="o">=</span><span class="s2">&quot;isLoggedIn()&quot;</span><span class="o">&gt;</span>
</span><span class="line">      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">click</span><span class="o">=</span><span class="s2">&quot;signOut()&quot;</span><span class="o">&gt;</span><span class="nx">Sign</span> <span class="nx">Out</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="err">/div&gt;&lt;br&gt;&lt;br&gt;</span>
</span><span class="line">
</span><span class="line">  <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;newUserForm&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">show</span><span class="o">=</span><span class="s2">&quot;form == &#39;signUp&#39;&quot;</span><span class="o">&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">label</span> <span class="o">&gt;</span><span class="nx">Email</span><span class="o">&lt;</span><span class="err">/label&gt;:</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">required</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">model</span><span class="o">=</span><span class="s2">&quot;newUser.email&quot;</span><span class="o">&gt;&lt;</span><span class="err">/br&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">label</span> <span class="o">&gt;</span><span class="nx">Password</span><span class="o">&lt;</span><span class="err">/label&gt;:</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;password&quot;</span> <span class="nx">required</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">model</span><span class="o">=</span><span class="s2">&quot;newUser.password&quot;</span><span class="o">&gt;&lt;</span><span class="err">/br&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">label</span> <span class="o">&gt;</span><span class="nx">Password</span> <span class="nx">confirmation</span><span class="o">&lt;</span><span class="err">/label&gt;:</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;password&quot;</span> <span class="nx">required</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">model</span><span class="o">=</span><span class="s2">&quot;newUser.password_confirmation&quot;</span><span class="o">&gt;&lt;</span><span class="err">/br&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">disabled</span><span class="o">=</span><span class="s2">&quot;newUserForm.$invalid&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">click</span><span class="o">=</span><span class="s2">&quot;signUp(newUser)&quot;</span><span class="o">&gt;</span> <span class="nx">Create</span> <span class="nx">User</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="err">/form&gt;</span>
</span><span class="line">
</span><span class="line">  <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;loginForm&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">show</span><span class="o">=</span><span class="s2">&quot;form == &#39;signIn&#39;&quot;</span><span class="o">&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">label</span><span class="o">&gt;</span><span class="nx">Email</span><span class="o">&lt;</span><span class="err">/label&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">required</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">model</span><span class="o">=</span><span class="s2">&quot;user.email&quot;</span><span class="o">&gt;&lt;</span><span class="err">/br&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">label</span><span class="o">&gt;</span><span class="nx">Password</span><span class="o">&lt;</span><span class="err">/label&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;password&quot;</span> <span class="nx">required</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">model</span><span class="o">=</span><span class="s2">&quot;user.password&quot;</span><span class="o">&gt;&lt;</span><span class="err">/br&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">disabled</span><span class="o">=</span><span class="s2">&quot;loginForm.$invalid&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">click</span><span class="o">=</span><span class="s2">&quot;signIn(user)&quot;</span><span class="o">&gt;</span><span class="nx">Sign</span> <span class="nx">In</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="err">/form&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class="line">
</span><span class="line"><span class="o">&lt;</span><span class="nx">button</span> <span class="nx">data</span><span class="o">-</span><span class="nx">ng</span><span class="o">-</span><span class="nx">click</span><span class="o">=</span><span class="s2">&quot;StorePath()&quot;</span><span class="o">&gt;</span><span class="nx">Store</span> <span class="nx">Front</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The different panels and buttons show and hide depending on if we are logged in or not. I included those functions in my top app.js and under the rootScope so they can be called from anywhere:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">app</span><span class="p">.</span><span class="nx">run</span><span class="p">([</span><span class="s1">&#39;$rootScope&#39;</span><span class="p">,</span><span class="s1">&#39;$cookieStore&#39;</span><span class="p">,</span> <span class="s1">&#39;$location&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$rootScope</span><span class="p">,</span> <span class="nx">$cookieStore</span><span class="p">,</span> <span class="nx">$location</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">isLoggedIn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="p">(</span><span class="nx">$cookieStore</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;logged_user&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="kc">true</span> <span class="o">:</span> <span class="kc">false</span><span class="p">);</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line">    <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">logged_user</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="nx">$cookieStore</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;logged_user&#39;</span><span class="p">).</span><span class="nx">email</span><span class="p">;</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">  <span class="p">}]);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finally, the UserCtrl.js includes the way to connect to Rails, query the User model and set the cookies:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;GemStore&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;UsersCtrl&#39;</span><span class="p">,</span> <span class="p">[</span>
</span><span class="line">    <span class="s1">&#39;$scope&#39;</span><span class="p">,</span><span class="s1">&#39;$http&#39;</span><span class="p">,</span><span class="s1">&#39;$cookieStore&#39;</span><span class="p">,</span><span class="s1">&#39;$location&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$http</span><span class="p">,</span> <span class="nx">$cookieStore</span><span class="p">,</span><span class="nx">$location</span><span class="p">){</span>
</span><span class="line">
</span><span class="line">    <span class="nx">$scope</span><span class="p">.</span><span class="nx">user</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line">    <span class="nx">$scope</span><span class="p">.</span><span class="nx">new_user</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line">
</span><span class="line">    <span class="nx">$scope</span><span class="p">.</span><span class="nx">signUp</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">new_user</span><span class="p">){</span>
</span><span class="line">      <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">user</span><span class="o">:</span> <span class="nx">new_user</span> <span class="p">};</span>
</span><span class="line">      <span class="nx">$http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/users&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
</span><span class="line">      <span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class="line">        <span class="nx">$scope</span><span class="p">.</span><span class="nx">new_user</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line">        <span class="nx">$cookieStore</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="s1">&#39;logged_user&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
</span><span class="line">        <span class="nx">$scope</span><span class="p">.</span><span class="nx">setForm</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class="line">        <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s1">&#39;/dashboard&#39;</span><span class="p">);</span>
</span><span class="line">      <span class="p">})</span>
</span><span class="line">      <span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">status</span><span class="p">){</span>
</span><span class="line">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class="line">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">status</span><span class="p">);</span>
</span><span class="line">      <span class="p">});</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line">    <span class="nx">$scope</span><span class="p">.</span><span class="nx">signIn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">new_user</span><span class="p">){</span>
</span><span class="line">      <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">user</span><span class="o">:</span> <span class="nx">new_user</span> <span class="p">};</span>
</span><span class="line">      <span class="nx">$http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/users/sign_in&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
</span><span class="line">      <span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class="line">        <span class="nx">$scope</span><span class="p">.</span><span class="nx">user</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line">        <span class="nx">$cookieStore</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="s1">&#39;logged_user&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
</span><span class="line">        <span class="nx">$scope</span><span class="p">.</span><span class="nx">setForm</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class="line">        <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s1">&#39;/dashboard&#39;</span><span class="p">);</span>
</span><span class="line">      <span class="p">})</span>
</span><span class="line">      <span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span><span class="nx">status</span><span class="p">){</span>
</span><span class="line">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class="line">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">status</span><span class="p">);</span>
</span><span class="line">      <span class="p">});</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line">    <span class="nx">$scope</span><span class="p">.</span><span class="nx">signOut</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">$http</span><span class="p">({</span>
</span><span class="line">        <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;DELETE&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;users/sign_out&#39;</span>
</span><span class="line">      <span class="p">})</span>
</span><span class="line">        <span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">          <span class="nx">$cookieStore</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="s1">&#39;logged_user&#39;</span><span class="p">);</span>
</span><span class="line">          <span class="nx">$scope</span><span class="p">.</span><span class="nx">setForm</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class="line">          <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s1">&#39;/store_front&#39;</span><span class="p">);</span>
</span><span class="line">        <span class="p">})</span>
</span><span class="line">        <span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">status</span><span class="p">);</span>
</span><span class="line">        <span class="p">})</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line">    <span class="nx">$scope</span><span class="p">.</span><span class="nx">setForm</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">form</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">$scope</span><span class="p">.</span><span class="nx">form</span> <span class="o">=</span> <span class="nx">form</span><span class="p">;</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">  <span class="p">}]);</span>
</span><span class="line"><span class="p">})()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finally, make sure you are nullifying the sessions as you protect from CSRF attacks.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">respond_to</span> <span class="ss">:html</span><span class="p">,</span> <span class="ss">:json</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># Prevent CSRF attacks by raising an exception.</span>
</span><span class="line">  <span class="c1"># For APIs, you may want to use :null_session instead.</span>
</span><span class="line">  <span class="c1"># protect_from_forgery with: :exception</span>
</span><span class="line">  <span class="n">protect_from_forgery</span> <span class="ss">with</span><span class="p">:</span> <span class="ss">:null_session</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Special thanks to Derek Maffett, whose help was invaluable to navigate the angular example.</p>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Rails Api Versioning]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/10/28/Rails-API-Versioning/"/>
    
    <updated>2014-10-28T16:17:00-07:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/10/28/Rails-API-Versioning</id>
    
    <content type="html"><![CDATA[<p><img class="right" src="http://sotoseattle.github.io/images/Oct14/versionapi.png" width="200" title="RailsCast" /></p>

<p>Rails provide a powerful framework to build your own API. But as you evolve your API will evolve too, your code will change and even your schema will mutate. That is OK as long as you have a rational way to structure the different versions of the api, how they are called and what they return.</p>

<p>There are different ways to achieve this versioning, I will be enumerating the pros and cons of three of them.</p>

<h3 id="pre-pend-the-ryan-bates-way">Pre-pend (the Ryan Bates Way)</h3>

<p><a href="http://railscasts.com">RailsCast</a>, the ultimate resource for all things rails, goes into specific details of how to manually set up your own versioning system in its <a href="http://railscasts.com/episodes/350-rest-api-versioning?view=asciicast">episode 350</a>.</p>

<p>It involves modifying your routes so your apis resources are encapsulated in namespaces. There are many advantages to this approach, first and foremost it forces you to be aware of what is happening, you learn your tool in the process and you don’t depend on external code (versioning gem).</p>

<p>On the other hand, you’ll end up with parallel versions of the same code living side by side, not the most DRY way to keep your code base. Furthermore, you are responsible for tracking changes to your schema, and then adapting and maintaining each of the version calls.</p>

<!--more-->

<p>Nevertheless, this is the approach I have generally used since it provides me with the most experience and learning.</p>

<p>You can actually have it both ways, pre-pending the api version and automating with a gem (up to a point) with the Versionist Gem, which provides three different ways to version your api out of the box:</p>

<ul>
  <li>Specifying version via an HTTP header</li>
  <li>Specifying version by pre-pending paths with a version slug</li>
  <li>Specifying version via a request parameter</li>
</ul>

<p>Pre-pending the path with a version slug is the same as the method discussed in RailsCast, visual, fast and intuitive. The problem is that the gem won’t move files for you so you’ll need to re-organize some files around and change some configuration details.</p>

<h3 id="request-header">Request Header</h3>

<p>The <a href="https://github.com/bploetz/versionist">Versionist</a> gem also allows us to include the version to use as a parameter in the header of the request call. Which has the benefits and disadvantages of hiding away this information in the header. It is less transparent and user friendly, but great for automated calls. Less opportunity to fudge at the cost of a higher initial cost of setting the system up.</p>

<h3 id="url-parameter">Url Parameter</h3>

<p>The third way Versionist can work is by appending the api version as a parameter at the end of the call, which although benefiting from being as somewhat visual, it fudges the url mixing resource parameters with unrelated information. This practice is frowned upon in the rails development community.</p>

<h3 id="mime-type">MIME Type</h3>

<p>You could register a MIME type for each api version and use the rails’ respond_to handle the response. Check Robbie Clutton <a href="http://pivotallabs.com/api-versioning/">post about it</a>.</p>

<p>The registration happens in the config/initializers/mime_types.rb, and all you need is to reconfigure your controllers.</p>

<h3 id="api-model">API Model</h3>

<p>Gems like <a href="https://github.com/craigs/api_versioning">ApiVersioning</a> use a model-based approach. Where a controller renamed as a <code>presenter</code>, handles API responses. It allows to specified the version in the header or passed as a parameter.</p>

<p>Thanks to Scot Hale who pointed me in the right direction in order to research this topic!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Wiring Angular into Rails]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/10/27/Wire-Angular-Rails/"/>
    
    <updated>2014-10-27T20:01:00-07:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/10/27/Wire-Angular-Rails</id>
    
    <content type="html"><![CDATA[<p>Given an angular site of static pages, without persistent data, just the bells and whistles that Angular provides for the front end, how do we wire it so it is served from inside a Rails application.</p>

<p>The first step is to generate a new rails app (I used 4.2), for which we’ll create a controller that will coordinate the rendering of the angular app. We’ll start with a single action that points to a show template, where all the action will take place (it would substitute the index.html page of the Angular app). We call our controller StoreController.</p>

<p>In app/assets/javascripts/application.js we are going to remove turbolinks, because it is repetitive functionality now that we’ll be relying on Angular and it tends to screw things up. Actually we could remove it from the Gemfile too.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># app/assets/javascripts/application.js
</span><span class="line">//= require jquery
</span><span class="line">//= require jquery_ujs
</span><span class="line">//= require angular.min
</span><span class="line">//= require launch_store
</span><span class="line">//= require_tree .</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We also add a requirement for a custom js file that we’ll create, app/assets/javascripts/launch_store.js, and where we declare our Angular app as gemStore.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># app/assets/javascripts/launch_store.js
</span><span class="line">//= require_self
</span><span class="line">//= require_tree ./angular_store_app
</span><span class="line">(function(){
</span><span class="line">  var app = angular.module("GemStore", ["StoreDirectives"]);
</span><span class="line">})();</span></code></pre></td></tr></table></div></figure></notextile></div>
<!--more-->
<p>In this newly loaded file we reference again another folder tree, ‘angular_store_app’, where we’ll store all the Angular functionality by resources. In our case we are using the resulting app from CodeSchool’s course “<a href="http://campus.codeschool.com/courses/shaping-up-with-angular-js/intro">Shaping up with Angular</a>”, a store-like app for displaying gems and jewels. Therefore we’ll create a subfolder called ‘gems’ and inside another three subfolders: controllers, directives, and views.</p>

<p><img class="center" src="http://sotoseattle.github.io/images/Oct14/folders.png" width="300" /></p>

<p>Our convention is going to be to name directives in camelCase, and everything else in PascalCase.</p>

<p>Now all it is left to do is to add the controllers and directives to its respectives files:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// gems_controller.js</span>
</span><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;GemStore&#39;</span><span class="p">);</span>
</span><span class="line">  <span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;StoreController&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$http&#39;</span><span class="p">,</span> <span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$http</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line">  <span class="p">]);</span>
</span><span class="line"><span class="p">})();</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;GemStore&#39;</span><span class="p">);</span>
</span><span class="line">  <span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;ReviewController&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="p">...</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line"><span class="p">})();</span>
</span><span class="line">
</span><span class="line"><span class="c1">// gems_directives.js</span>
</span><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;StoreDirectives&quot;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class="line">  <span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s2">&quot;productDescription&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">restrict</span><span class="o">:</span> <span class="s2">&quot;A&quot;</span><span class="p">,</span>
</span><span class="line">      <span class="nx">templateUrl</span><span class="o">:</span> <span class="s2">&quot;&lt;%= asset_path(&#39;angular_store_app/gems/views/description.html&#39;)%&gt;&quot;</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line"><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For the rails views we need to, first of all, make sure our routes are well defined and pointing to ‘store#show’.</p>

<p>Then in the application.html.erb we reference the angular app (check that we have taken out the turbolinks):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class="line"><span class="nt">&lt;html</span> <span class="na">data-ng-app=</span><span class="s">&quot;GemStore&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;head&gt;</span>
</span><span class="line">  <span class="nt">&lt;title&gt;</span>Angurails<span class="nt">&lt;/title&gt;</span>
</span><span class="line">  <span class="err">&lt;</span>%= stylesheet_link_tag &#39;application&#39;, media: &#39;all&#39; %&gt;
</span><span class="line">  <span class="err">&lt;</span>%= javascript_include_tag &#39;application&#39; %&gt;
</span><span class="line">  <span class="err">&lt;</span>%= csrf_meta_tags %&gt;
</span><span class="line"><span class="nt">&lt;/head&gt;</span>
</span><span class="line"><span class="nt">&lt;body&gt;</span>
</span><span class="line">
</span><span class="line"><span class="err">&lt;</span>%= yield %&gt;
</span><span class="line">
</span><span class="line"><span class="nt">&lt;/body&gt;</span>
</span><span class="line"><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And in the show.html.page of the store controller we can start coding our own angular references and expressions:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;div</span> <span class="na">data-ng-controller=</span><span class="s">&quot;StoreController&quot;</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="nt">&lt;header&gt;</span>
</span><span class="line">    <span class="nt">&lt;h2</span> <span class="na">class=</span><span class="s">&quot;text-center&quot;</span><span class="nt">&gt;</span>Soto&#39;s Magnificent Emporium<span class="nt">&lt;/h2&gt;</span>
</span><span class="line">    <span class="nt">&lt;h3</span> <span class="na">class=</span><span class="s">&quot;text-center&quot;</span><span class="nt">&gt;</span> an sinangular store <span class="nt">&lt;/h3&gt;</span>
</span><span class="line">  <span class="nt">&lt;/header&gt;</span>
</span><span class="line">
</span><span class="line">  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;list-group&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;list-group-item&quot;</span> <span class="na">data-ng-repeat=</span><span class="s">&quot;product in products&quot;</span><span class="nt">&gt;</span>
</span><span class="line">      <span class="nt">&lt;h3&gt;</span> <span class="nt">&lt;em</span> <span class="na">class=</span><span class="s">&quot;pull-right&quot;</span><span class="nt">&gt;</span><span class="nt">&lt;/em&gt;&lt;/h3&gt;</span>
</span><span class="line">      <span class="nt">&lt;div</span> <span class="na">data-product-gallery</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class="line">      <span class="nt">&lt;div</span> <span class="na">data-product-tabs</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class="line">    <span class="nt">&lt;/div&gt;</span>
</span><span class="line">  <span class="nt">&lt;/div&gt;</span>
</span><span class="line"><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>One last details is to include in the rails public folder our angular html snippets referenced by directives, and make sure that the url in the gems_directives.js are correct.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="c">&lt;!-- app/assets/javascript/angular_store_app/gems/views/description.html --&gt;</span>
</span><span class="line"><span class="nt">&lt;div</span> <span class="na">data-ng-show=</span><span class="s">&quot;tab.isSet(1)&quot;</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="nt">&lt;h4&gt;</span>Description<span class="nt">&lt;/h4&gt;</span>
</span><span class="line">  <span class="nt">&lt;blockquote&gt;</span><span class="nt">&lt;/blockquote&gt;</span>
</span><span class="line"><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That’s it. Run it and check it works.</p>

<p>One final note of advice, in my case using CoffeeScript gave me quite a bit of trouble, and although I still have to investigate the exact causes of the it, I recommend to use it with caution.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Ruby Meta-Frolicking]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/10/24/Ruby-Meta-Frolicking/"/>
    
    <updated>2014-10-24T08:01:00-07:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/10/24/Ruby-Meta-Frolicking</id>
    
    <content type="html"><![CDATA[<p>This is a follow up to my path of learning Ruby Metaprogramming. It follows my previous post about the <a href="http://sotoseattle.github.io/blog/2014/10/05/Metaprogramming/">Equalizer gem</a>.</p>

<p>We start with a basic BinaryTree that consists of nodes that just hold a key (val), and two links to the left and right children. This is not a BST, just a raw binary tree where each node is considered a tree in itself.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">BinaryTree</span>
</span><span class="line">  <span class="kp">attr_accessor</span> <span class="ss">:val</span><span class="p">,</span> <span class="ss">:left</span><span class="p">,</span> <span class="ss">:right</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@val</span> <span class="o">=</span> <span class="n">val</span>
</span><span class="line">    <span class="vi">@left</span> <span class="o">=</span> <span class="vi">@right</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We create an ad-hoc tree that we wire in the following manner.</p>

<p><img class="center" src="http://sotoseattle.github.io/images/Oct14/binary_tree.png" width="300" /></p>

<!--more-->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">tim</span>    <span class="o">=</span> <span class="no">BinaryTree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Tim&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">phil</span>   <span class="o">=</span> <span class="no">BinaryTree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Phil&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">jony</span>   <span class="o">=</span> <span class="no">BinaryTree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Jony&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">dan</span>    <span class="o">=</span> <span class="no">BinaryTree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Dan&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">katie</span>  <span class="o">=</span> <span class="no">BinaryTree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Katie&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">craig</span>  <span class="o">=</span> <span class="no">BinaryTree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Craig&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">eddie</span>  <span class="o">=</span> <span class="no">BinaryTree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Eddie&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">peter</span>  <span class="o">=</span> <span class="no">BinaryTree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Peter&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">andrea</span> <span class="o">=</span> <span class="no">BinaryTree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Andrea&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">tim</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">tim</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">jony</span><span class="p">,</span> <span class="n">phil</span>
</span><span class="line"><span class="n">jony</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">jony</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">dan</span><span class="p">,</span> <span class="n">katie</span>
</span><span class="line"><span class="n">katie</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">katie</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">peter</span><span class="p">,</span> <span class="n">andrea</span>
</span><span class="line"><span class="n">phil</span><span class="o">.</span><span class="n">left</span><span class="p">,</span> <span class="n">phil</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">craig</span><span class="p">,</span> <span class="n">eddie</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For this exercsie we are only interested in traversing the tree and outputting to stdout the names of each node. There are three different ways to perform this traversal in a depth-first fashion: pre-order, in-order and post-order. You can read the details about each one in this <a href="http://en.wikipedia.org/wiki/Tree_traversal">Wikipedia page</a>.</p>

<p>After a bit of reflection and sandboxing, a good and common-sense way to implement becomes clear:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">traverse_pre_order</span>
</span><span class="line">  <span class="nb">puts</span> <span class="n">val</span>
</span><span class="line">  <span class="n">left</span><span class="o">.</span><span class="n">traverse_pre_order</span> <span class="k">if</span> <span class="n">left</span>
</span><span class="line">  <span class="n">right</span><span class="o">.</span><span class="n">traverse_pre_order</span> <span class="k">if</span> <span class="n">right</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">traverse_in_order</span>
</span><span class="line">  <span class="n">left</span><span class="o">.</span><span class="n">traverse_in_order</span> <span class="k">if</span> <span class="n">left</span>
</span><span class="line">  <span class="nb">puts</span> <span class="n">val</span>
</span><span class="line">  <span class="n">right</span><span class="o">.</span><span class="n">traverse_in_order</span> <span class="k">if</span> <span class="n">right</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">traverse_post_order</span>
</span><span class="line">  <span class="n">left</span><span class="o">.</span><span class="n">traverse_post_order</span> <span class="k">if</span> <span class="n">left</span>
</span><span class="line">  <span class="n">right</span><span class="o">.</span><span class="n">traverse_post_order</span> <span class="k">if</span> <span class="n">right</span>
</span><span class="line">  <span class="nb">puts</span> <span class="n">val</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The code is clear and readable, yet suffers from some repetition. We also see a pattern emerging: in all cases we recursively call the traverse method first on the left and then on the right, and the position of the call to stdout depends on the specific flavor of traversal:</p>

<ul>
  <li>pre =&gt; first call</li>
  <li>in  =&gt; between left and right</li>
  <li>post =&gt; after both calls</li>
</ul>

<p>This is a great opportunity to tinker with metaprogramming to see if we can do better. I focus on leveraging Ruby’s define_method, which allows us to create multiple methods with a single definition.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="sx">%w[pre in post]</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">prefix</span><span class="o">|</span>
</span><span class="line">  <span class="n">define_method</span><span class="p">(</span><span class="s2">&quot;traverse_</span><span class="si">#{</span><span class="n">prefix</span><span class="si">}</span><span class="s2">_order&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">    <span class="c1"># statements_to_execute = [traverse_left, traverse_right]</span>
</span><span class="line">    <span class="c1"># insert the puts call in the right place depending on the prefix</span>
</span><span class="line">    <span class="c1"># execute the array of orders one by one</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The idea is to have an array made of little bunches of code to execute. Then we can manipulate the order in which those code snippets are executed by re-ordering the array. The array becomes something like an instructions book, an ordered set of steps to perform.</p>

<p>To insert the chunks of code in the array, we need to package them into objects. A solution is to wrap them as blocks of functionality as Proc objects (I have used stabby lambdas). To execute one of these object we just call it to yield.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">instructions</span> <span class="o">=</span> <span class="o">[</span>
</span><span class="line">  <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">left</span><span class="o">.</span><span class="n">traverse_pre_order</span> <span class="k">if</span> <span class="n">left</span> <span class="p">},</span>
</span><span class="line">  <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">right</span><span class="o">.</span><span class="n">traverse_pre_order</span> <span class="k">if</span> <span class="n">right</span> <span class="p">}</span>
</span><span class="line"><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now, is only a question of changing the order of the array of statements and adapt it to each flavor of traversal. Once the array is reshuffled to our taste, we iterate over each cell, anc execute the proc.</p>

<p>Here is the final code of the complete class unrefactored. I have taken advantage of the yet to be defined method inside, it cannot get more dynamic than that!</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">BinaryTree</span>
</span><span class="line">  <span class="kp">attr_accessor</span> <span class="ss">:val</span><span class="p">,</span> <span class="ss">:left</span><span class="p">,</span> <span class="ss">:right</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@val</span> <span class="o">=</span> <span class="n">val</span>
</span><span class="line">    <span class="vi">@left</span> <span class="o">=</span> <span class="vi">@right</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="sx">%w[pre in post]</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">prefix</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class="line">    <span class="n">define_method</span><span class="p">(</span><span class="s2">&quot;traverse_</span><span class="si">#{</span><span class="n">prefix</span><span class="si">}</span><span class="s2">_order&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">      <span class="n">instructions</span> <span class="o">=</span> <span class="o">[</span>
</span><span class="line">        <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">left</span><span class="o">.</span><span class="n">public_send</span><span class="p">(</span><span class="s2">&quot;traverse_</span><span class="si">#{</span><span class="n">prefix</span><span class="si">}</span><span class="s2">_order&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">left</span> <span class="p">},</span>
</span><span class="line">        <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">right</span><span class="o">.</span><span class="n">public_send</span><span class="p">(</span><span class="s2">&quot;traverse_</span><span class="si">#{</span><span class="n">prefix</span><span class="si">}</span><span class="s2">_order&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">right</span> <span class="p">}</span><span class="o">]</span>
</span><span class="line">      <span class="n">do_stuff</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="n">val</span> <span class="p">}</span>
</span><span class="line">      <span class="n">instructions</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">do_stuff</span><span class="p">)</span>
</span><span class="line">      <span class="n">instructions</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span><span class="o">.</span><span class="n">yield</span> <span class="p">}</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Specially interesting is how the scoping works, which I’ll leave for a future post. Stay tunned!</p>

<p>Here is the final version, refactored, plus some tests.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">BinaryTree</span>
</span><span class="line">  <span class="kp">attr_accessor</span> <span class="ss">:val</span><span class="p">,</span> <span class="ss">:left</span><span class="p">,</span> <span class="ss">:right</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@val</span> <span class="o">=</span> <span class="n">val</span>
</span><span class="line">    <span class="vi">@left</span> <span class="o">=</span> <span class="vi">@right</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="sx">%w[pre in post]</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">prefix</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class="line">    <span class="n">define_method</span><span class="p">(</span><span class="s2">&quot;traverse_</span><span class="si">#{</span><span class="n">prefix</span><span class="si">}</span><span class="s2">_order&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">      <span class="n">instructions</span><span class="p">(</span><span class="n">prefix</span><span class="p">)</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">do_stuff</span><span class="p">)</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:yield</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">do_stuff</span>
</span><span class="line">    <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="n">val</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">instructions</span><span class="p">(</span><span class="n">prefix</span><span class="p">)</span>
</span><span class="line">    <span class="o">[</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="o">].</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">e</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;traverse_</span><span class="si">#{</span><span class="n">prefix</span><span class="si">}</span><span class="s2">_order&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">e</span> <span class="p">}</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">describe</span> <span class="no">BinaryTree</span> <span class="k">do</span>
</span><span class="line">  <span class="n">describe</span> <span class="s1">&#39;Search Methods&#39;</span> <span class="k">do</span>
</span><span class="line">    <span class="n">let</span><span class="p">(</span><span class="ss">:bt</span><span class="p">)</span> <span class="p">{</span> <span class="c1"># tim as defined above }</span>
</span><span class="line">    <span class="n">it</span> <span class="s1">&#39;BinaryTree#traverse_pre_order&#39;</span> <span class="k">do</span>
</span><span class="line">      <span class="nb">proc</span> <span class="p">{</span> <span class="n">bt</span><span class="o">.</span><span class="n">traverse_pre_order</span> <span class="p">}</span><span class="o">.</span><span class="n">must_output</span> <span class="s2">&quot;Tim</span><span class="se">\n</span><span class="s2">Jony</span><span class="se">\n</span><span class="s2">Dan</span><span class="se">\n</span><span class="s2">Katie</span><span class="se">\n</span><span class="s2">Peter</span><span class="se">\n</span><span class="s2">Andrea</span><span class="se">\n</span><span class="s2">Phil</span><span class="se">\n</span><span class="s2">Craig</span><span class="se">\n</span><span class="s2">Eddie</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="n">it</span> <span class="s1">&#39;BinaryTree#traverse_in_order&#39;</span> <span class="k">do</span>
</span><span class="line">      <span class="nb">proc</span> <span class="p">{</span> <span class="n">bt</span><span class="o">.</span><span class="n">traverse_in_order</span> <span class="p">}</span><span class="o">.</span><span class="n">must_output</span> <span class="s2">&quot;Dan</span><span class="se">\n</span><span class="s2">Jony</span><span class="se">\n</span><span class="s2">Peter</span><span class="se">\n</span><span class="s2">Katie</span><span class="se">\n</span><span class="s2">Andrea</span><span class="se">\n</span><span class="s2">Tim</span><span class="se">\n</span><span class="s2">Craig</span><span class="se">\n</span><span class="s2">Phil</span><span class="se">\n</span><span class="s2">Eddie</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="n">it</span> <span class="s1">&#39;BinaryTree#traverse_post_order&#39;</span> <span class="k">do</span>
</span><span class="line">      <span class="nb">proc</span> <span class="p">{</span> <span class="n">bt</span><span class="o">.</span><span class="n">traverse_post_order</span> <span class="p">}</span><span class="o">.</span><span class="n">must_output</span> <span class="s2">&quot;Dan</span><span class="se">\n</span><span class="s2">Peter</span><span class="se">\n</span><span class="s2">Andrea</span><span class="se">\n</span><span class="s2">Katie</span><span class="se">\n</span><span class="s2">Jony</span><span class="se">\n</span><span class="s2">Craig</span><span class="se">\n</span><span class="s2">Eddie</span><span class="se">\n</span><span class="s2">Phil</span><span class="se">\n</span><span class="s2">Tim</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[JavaScript OO Review]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/10/20/JS-review/"/>
    
    <updated>2014-10-20T14:30:00-07:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/10/20/JS-review</id>
    
    <content type="html"><![CDATA[<p>Interestingly enough JS is class-less yet everything is an object. There are 3 ways to instantiate an object:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">newObject</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">newObject</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span> <span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">newObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="the-literal-object-pattern">The Literal Object Pattern</h3>
<p>The first one is the object literal, a self contained wrapped object with all properties held inside in key / value pairs separated by commas. Check this <a href="http://rmurphey.com/blog/2009/10/15/using-objects-to-organize-your-code/">article</a>. It is a very neat to create objects in JS, clean and encapsulated that keep the code simple and clean.</p>

<p>The last one uses the Object constructor, something similar to Ruby’s BasicObject class.</p>

<h3 id="the-constructor-pattern">The Constructor Pattern</h3>
<p>Constructors are special functions. Or seen another way, by prefixing the word <code>new</code> to a function we tell JS to instantiate an Object according to the specifications defined in the function.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">Car</span><span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">this</span><span class="p">.</span><span class="nx">model</span> <span class="o">=</span> <span class="nx">model</span><span class="p">;</span>
</span><span class="line">  <span class="k">this</span><span class="p">.</span><span class="nx">to_s</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s2">&quot;model: &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">mode</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">model_T</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Car</span><span class="p">(</span><span class="s1">&#39;Ford T&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In this manner we can define what in ruby are instance variables and methods, but here they all are properties in key value pairs, independently of them being other object or functions.</p>

<p>The main problem is that we are defining the ‘methods’ inside each object at instantiation time. In Ruby the behavior is held in the Class, a common repo for all instantiated objects derived from it.</p>

<p>Enter the prototype, another object that is common to all JS objects. When we create an object with a constructor, everything defined in the constructor’s function is available to all instances created from it, analogous to a ruby class in terms of a common repo where all objects can go to find the methods they have.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">Car</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">to_s</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s2">&quot;model: &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">mode</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="the-module-pattern">The Module Pattern</h3>

<p>The idea behind it is to encapsulate and it resembles OO practices.</p>

<blockquote><p>Variables can&#8217;t technically be declared as being public nor private and so we use function scope to simulate this concept. Within the Module pattern, variables or methods declared are only available inside the module itself thanks to closure.</p><footer><strong>Addy Osmani, Learning JavaScript Design Patterns</strong> <cite><a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript">addyosmani.com/resources/book/&hellip;</a></cite></footer></blockquote>

<p>A module template that touches on private and public variables would like the following:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">myNamespace</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">  <span class="kd">var</span> <span class="nx">myPrivateVar</span><span class="p">,</span> <span class="nx">myPrivateMethod</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// A private counter variable</span>
</span><span class="line">  <span class="nx">myPrivateVar</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// A private function which logs any arguments</span>
</span><span class="line">  <span class="nx">myPrivateMethod</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">foo</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">foo</span> <span class="p">);</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// A public variable</span>
</span><span class="line">    <span class="nx">myPublicVar</span><span class="o">:</span> <span class="s2">&quot;foo&quot;</span><span class="p">,</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// A public function utilizing privates</span>
</span><span class="line">    <span class="nx">myPublicFunction</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">bar</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">      <span class="c1">// Increment our private counter</span>
</span><span class="line">      <span class="nx">myPrivateVar</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">      <span class="c1">// Call our private method using bar</span>
</span><span class="line">      <span class="nx">myPrivateMethod</span><span class="p">(</span> <span class="nx">bar</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line"><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Inside the module we have some internal private stuff shielded from the outside, and the module returns an object with the public API and public variables. This returned object is assigned to the myNamespace variable so we access its innards as properties of the object.</p>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Installing Octopress at github.io]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/10/20/Octopress-GH/"/>
    
    <updated>2014-10-20T11:00:00-07:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/10/20/Octopress-GH</id>
    
    <content type="html"><![CDATA[<p>I am collecting posts from my previous blog, ideogrammatic.com, adding some new ones I have written over the last month and putting it all together in github.io as my personal blog.</p>

<p>I am using Octopress with a tweaked mnml theme and have got hold of a nice domain with my handle sotoseattle to point to.</p>

<p>The basic deployment of an Octopress blog into your github.io is easy, and there are many posts with the details in the Internet so I am assuming you have gone through the paces.</p>

<p>Now, if you are like me, you’ll hit problems in unexpected places. I have found that it helps to understand how Octopress and GitHub actually use git repos between them.</p>

<p>In essence you’ll end up using two different git repos inside both your Octopress code base. And the fun part is that both point to the same github repo!</p>

<p>1.- the first can be found inside the folder _deploy:</p>

<ul>
  <li><code>rake generate</code> compiles the site from all the files in the source directory (and other resources) and places everything inside the _deploy folder.</li>
  <li><code>rake deploy</code> pushes it (the files inside _deploy) up to GitHub, actually to the to origin/master branch.</li>
</ul>

<p>So, for example, if we have a custom domain and we want it to point to our github.io site, we need a CNAME file that we place inside the source folder. After rake generate and rake deploy, it will show up in the root of origin/master (and inside our _deploy folder)</p>

<p>2.- The second git repo, you create it on the root:</p>

<p>For this one we create a single branch, “source”, that holds everything (all files, source and _deploy) and we push only to origin/source. Aha!, this repo goes to the ‘source’ branch in github, the generated one goes to ‘master’. So we don’t have a master branch in this local git repo, only source, and in this way we avoid pushing it to master in origin (which already tracks the first repo!).</p>

<p>Messy explanation, I know, but once you wrap your mind around the concept of 2 different repos pointing to 2 branches of the same upstream repo, it all makes sense.</p>

<p>Now, I may be off base in this explanation, if so, please set me straight in the comments.</p>

<p>Good luck with the Octos!</p>

<p><img class="center" src="http://sotoseattle.github.io/images/Oct14/octocat_octopress.png" width="400" title="Code Fellows logo" /></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Backgrounders]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/10/17/Backgrounders/"/>
    
    <updated>2014-10-17T20:00:00-07:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/10/17/Backgrounders</id>
    
    <content type="html"><![CDATA[<p>My fellow students at Code Fellows and I have made public a set of templates under the name of “<a href="https://github.com/Backgrounders">Backgrounders</a>” that show how to set up different types of Background Jobs for delivering automatic emails with Rails. We cover the main gems: Sidekiq, Resque, and Delayed Jobs. And we have included examples for both Rails 4.1 and 4.2. It is publicly available in GitHub.</p>

<p>We hope this small public source contribution help others as a reference when dealing with background workers. Following is my contribution to the common effort:</p>

<hr />

<p><br /></p>

<h1 id="rails-42-mailer-with-sidekiq-kick-ass-with-rails-42imagesoct14nonsensepng">Rails 4.2 Mailer with Sidekiq <img src="http://sotoseattle.github.io/images/Oct14/nonsense.png" alt="kick ass with rails 4.2!" /></h1>

<p>This is a template for how to set up Rails 4.2 with background jobs from Sidekiq using Redis.</p>

<p>In a nutshell, when we create a background jobs we pass an object with the data to use to the worker. In most cases, we pass a Model object (i.e. ActiveRecord), so make things simpler we just pass the id of the object to the worker, and Rails and Sidekiq take care of everything for us (finding it in the database, serializing and de-serializing it).</p>

<p>In this template we have taken a different route. Instead of passing an existing Model object we pass an ad-hoc one, created in the spot and stored in a hash that we pass to the worked in json format. Then, it is up to us to tell the worker how to  de-serialize it, reconstituting the original hash from the json string, to be able to operate on the data passed.</p>

<p>All this will become more clear with an example.</p>

<!--more-->

<p>Our app has a simple contact page with a custom form that the user fills with some request of information. Upon submission of the form, our app will create a background job to send an email and defer its responsibilities to Sidequik.</p>

<h3 id="prep-work">1. Prep Work</h3>

<h4 id="add-letteropener-and-launchy-gem"><em>Add letter_opener and launchy gem</em></h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">gem</span> <span class="s2">&quot;letter_opener&quot;</span>
</span><span class="line"><span class="n">gem</span> <span class="s2">&quot;launchy&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Letter_Oppener allows us, in development, to simulate the process of sending the email by creating it as a temporary file. That way we avoid sending the actual email over the network, which is messy and brittle to test.</p>

<p>The Launchy gem automatically opens the created temp file in a browser window so the sending process becomes automatic and we have real time confirmation that the email was sent correctly.</p>

<p>We need to modify the ‘config/environments/development.rb’.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># to be appraised of mailing errors</span>
</span><span class="line"><span class="n">config</span><span class="o">.</span><span class="n">action_mailer</span><span class="o">.</span><span class="n">raise_delivery_errors</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class="line"><span class="c1"># to deliver to the browser instead of email</span>
</span><span class="line"><span class="n">config</span><span class="o">.</span><span class="n">action_mailer</span><span class="o">.</span><span class="n">delivery_method</span> <span class="o">=</span> <span class="ss">:letter_opener</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="mailer">2. Mailer</h3>

<h4 id="generate-mailer"><em>Generate Mailer</em></h4>

<p>We start with a basic new Rails application without controllers, models or views, and we generate a mailer.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="err">$</span> <span class="n">rails</span> <span class="n">g</span> <span class="n">mailer</span> <span class="no">VisitorMailer</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="create-mailer-action"><em>Create Mailer Action</em></h4>

<p>We pass to the Mailer action the information we need to build the email: name, email address and body of email. We make all of them available to the corresponding view (the email template) through instance variables.</p>

<p>Keep in mind that this action, ‘contact_email’, will be the one that the worker (background process) will execute.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">VisitorMailer</span> <span class="o">&lt;</span> <span class="ss">ActionMailer</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">contact_email</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class="line">    <span class="vi">@email</span> <span class="o">=</span> <span class="n">email</span>
</span><span class="line">    <span class="vi">@message</span> <span class="o">=</span> <span class="n">message</span>
</span><span class="line">    <span class="n">mail</span><span class="p">(</span><span class="ss">from</span><span class="p">:</span> <span class="vi">@email</span><span class="p">,</span>
</span><span class="line">         <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;javier@badaboom.com&#39;</span><span class="p">,</span>
</span><span class="line">         <span class="ss">subject</span><span class="p">:</span> <span class="s1">&#39;New Visitor\&#39;s Email&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="create-email-template"><em>Create EMail Template</em></h4>

<p>The view associated with the controller action is the actual template for the email to be sent. We make two versions, in html and text format, with the information passed through instance variables.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="o">&lt;!</span><span class="no">DOCTYPE</span> <span class="n">html</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">head</span><span class="o">&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="n">meta</span> <span class="n">content</span><span class="o">=</span><span class="s1">&#39;text/html; charset=UTF-8&#39;</span> <span class="n">http</span><span class="o">-</span><span class="n">equiv</span><span class="o">=</span><span class="s1">&#39;Content-Type&#39;</span> <span class="sr">/&gt;</span>
</span><span class="line"><span class="sr">  &lt;/</span><span class="n">head</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">body</span><span class="o">&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;&lt;</span><span class="sx">%= @name %&gt; (&lt;%=</span> <span class="vi">@email</span> <span class="sx">%&gt;)&lt;/h1&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class="line">      <span class="o">&lt;%=</span> <span class="vi">@message</span> <span class="sx">%&gt;</span>
</span><span class="line"><span class="sx">    &lt;/p&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="sr">/body&gt;</span>
</span><span class="line"><span class="sr">&lt;/</span><span class="n">html</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="the-resource">3. The Resource</h3>

<h4 id="generate-controller"><em>Generate Controller</em></h4>

<p>Now that the Mailer is set and done we generate the VisitorsController.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="err">$</span> <span class="n">rails</span> <span class="n">g</span> <span class="n">controller</span> <span class="n">visitors</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We add two actions. The index actions displays the basic contact form. Once submitted, it reaches the contact action where we extract the form parameters.</p>

<p>The form information is packaged into a hash and subsequently JSONified so we can pass it as an argument to the worker (a Sidekiq requirement).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">VisitorsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">index</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">contact</span>
</span><span class="line">    <span class="n">h</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">generate</span><span class="p">({</span> <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">                        <span class="s1">&#39;email&#39;</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">                        <span class="s1">&#39;message&#39;</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:message</span><span class="o">]</span> <span class="p">})</span>
</span><span class="line">
</span><span class="line">    <span class="no">PostmanWorker</span><span class="o">.</span><span class="n">perform_async</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># if instead of sidekiq I was just sending email from rails</span>
</span><span class="line">    <span class="c1"># VisitorMailer.contact_email(@name, @email, @message).deliver</span>
</span><span class="line">
</span><span class="line">    <span class="n">redirect_to</span> <span class="ss">:root</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="make-a-small-form-for-the-view"><em>Make a small form for the View</em></h4>

<p>Just a simple form.</p>

<h4 id="update-the-routes"><em>Update the routes</em></h4>

<p>We haven’t done it yet and we cannot defer anymore, we need to establish our routes and root.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class="line">  <span class="n">post</span> <span class="s1">&#39;visitors/contact&#39;</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;visitors#contact&#39;</span>
</span><span class="line">  <span class="n">root</span> <span class="s1">&#39;visitors#index&#39;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="the-model"><em>The Model?</em></h4>

<p>Nope, no model. The controller just passes the information received from the form directly to the worker.</p>

<h3 id="the-background-worker">4. The background worker</h3>

<h4 id="install-sidekiq"><em>Install Sidekiq</em></h4>

<p>Add to your Gemfile and don’t forget to bundle up.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">gem</span> <span class="s1">&#39;sidekiq&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="create-a-worker"><em>Create a Worker</em></h4>

<p>We essentially follow the instructions from the Sidekiq’s readme and docs, and we create a worker responsible for delivering emails, a Postman worker.</p>

<p>The key here is that the worker needs a json object as simple as possible. Usually this would be the id from a Model object, in which case Sidekiq would serialize and de-serialize the object referenced by it.</p>

<p>In our case, the information is not stored in the database so we create a json hash, that we passed to the worker for queuing in Redis. Now, the key is that we also need to de-serialize this json object upon arrival to re-create the hash. Once re-constituted, the hash gives us access to the data we need to call the ActionMailer and deliver the email.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">PostmanWorker</span>
</span><span class="line">  <span class="kp">include</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Worker</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span>
</span><span class="line">    <span class="n">h</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">h</span><span class="p">)</span>
</span><span class="line">    <span class="no">VisitorMailer</span><span class="o">.</span><span class="n">contact_email</span><span class="p">(</span><span class="n">h</span><span class="o">[</span><span class="s1">&#39;name&#39;</span><span class="o">]</span><span class="p">,</span> <span class="n">h</span><span class="o">[</span><span class="s1">&#39;email&#39;</span><span class="o">]</span><span class="p">,</span> <span class="n">h</span><span class="o">[</span><span class="s1">&#39;message&#39;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">deliver</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The results show up in the browser when the email is sent.</p>

<h4 id="add-dashboard"><em>Add Dashboard</em></h4>

<p>This nifty tool, the Sidekiq Dashboard, runs on Sinatra, which we have to add to the Gemfile.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">gem</span> <span class="s1">&#39;sinatra&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;= 1.3.0&#39;</span><span class="p">,</span> <span class="ss">:require</span> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And we simply add it to our routes…</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;sidekiq/web&#39;</span>
</span><span class="line"><span class="n">mount</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Web</span> <span class="o">=&gt;</span> <span class="s1">&#39;/sidekiq&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>…so it becomes available in (depending on your setup) http://localhost:3000/sidekiq</p>

<p>Beware that anybody can access this dashboard once in production, so check for ways to secure its access.</p>

<h3 id="final-setup">5. Final Setup</h3>

<p>The final touches involve making sure you have bundle installed, and installing Redis if not already in place (for which I recommend to use brew on Mac OS X whenever possible to avoid headaches)</p>

<p>Then all that is left is to start each service in its own tab like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="err">$</span> <span class="n">rails</span> <span class="n">s</span>
</span><span class="line"><span class="err">$</span> <span class="n">redis</span><span class="o">-</span><span class="n">server</span>
</span><span class="line"><span class="err">$</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">sidekiq</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can also user <a href="https://github.com/ddollar/foreman">Foreman</a> and save yourself opening tabs and running things separately.</p>

<p>We haven’t included tests in this template, which is a necessary best practice to follow. I leave it up to you to BDD this template with the necessary tests.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Ruby Metaprogramming in Action]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/10/05/Metaprogramming/"/>
    
    <updated>2014-10-05T08:01:00-07:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/10/05/Metaprogramming</id>
    
    <content type="html"><![CDATA[<p>The <a href="https://github.com/dkubb/equalizer">Equalizer gem</a> provides a nifty example of Ruby metaprogramming.</p>

<p>It is a module that when added to your class helps define equality, equivalence and inspection methods.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">GeoLocation</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Equalizer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:latitude</span><span class="p">,</span> <span class="ss">:longitude</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:latitude</span><span class="p">,</span> <span class="ss">:longitude</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">latitude</span><span class="p">,</span> <span class="n">longitude</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@latitude</span><span class="p">,</span> <span class="vi">@longitude</span> <span class="o">=</span> <span class="n">latitude</span><span class="p">,</span> <span class="n">longitude</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">point_a</span> <span class="o">=</span> <span class="no">GeoLocation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="n">point_b</span> <span class="o">=</span> <span class="no">GeoLocation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">point_a</span><span class="o">.</span><span class="n">inspect</span>    <span class="c1"># =&gt; &quot;#&lt;GeoLocation latitude=1 longitude=2&gt;&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">point_a</span> <span class="o">==</span> <span class="n">point_b</span>           <span class="c1"># =&gt; true</span>
</span><span class="line"><span class="n">point_a</span><span class="o">.</span><span class="n">hash</span> <span class="o">==</span> <span class="n">point_b</span><span class="o">.</span><span class="n">hash</span> <span class="c1"># =&gt; true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<!--more-->

<h2 id="include-instance-of-a-module">Include instance of a Module?</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># example</span>
</span><span class="line"><span class="k">class</span> <span class="nc">GeoLocation</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Equalizer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:latitude</span><span class="p">,</span> <span class="ss">:longitude</span><span class="p">)</span>
</span><span class="line"><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The first thing that calls the attention when reading the code is the instantiation of the module. What? Weren’t modules used to be abstract, nice little packages of functionality, angelical and stateless, devoid of the tribulations of commoner fleshed-out Objects?</p>

<p>In Ruby everything is an Object, and the following two ways of coding a module are equivalent:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Insane</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">hello</span>
</span><span class="line">    <span class="s1">&#39;hola&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">Insane</span> <span class="o">=</span> <span class="no">Module</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">hello</span>
</span><span class="line">    <span class="s1">&#39;hola&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Let’s inspect the Equalizer’s code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># equalizer.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Equalizer</span> <span class="o">&lt;</span> <span class="no">Module</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">*</span><span class="n">keys</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@keys</span> <span class="o">=</span> <span class="n">keys</span>
</span><span class="line">    <span class="n">define_methods</span>
</span><span class="line">    <span class="nb">freeze</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># example</span>
</span><span class="line"><span class="k">class</span> <span class="nc">GeoLocation</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Equalizer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:latitude</span><span class="p">,</span> <span class="ss">:longitude</span><span class="p">)</span>
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In the last line lies the rub, the double nature of Equalizer.</p>

<ol>
  <li>Equalizer is a Module and by ‘including’ it, GeoLocation makes all methods from Equalizer available to his objects.</li>
  <li>Yet Equalizer is defined as a class that can be instantiated.</li>
</ol>

<p>But we have seen that everything is an object and there is no need to make it a class object, so the instantiation must serve a different purpose.</p>

<p>Yes, by defining Equalizer as a class that can be instantiated, at that moment of instantiation we can pass the specific instance variables in an instant (sorry!) to customize those methods based on the keys passed (latitude and longitude). So Equalizer defines methods based on something undefined (keys), and only at inclusion (when we know which are the instance variables to make comparable) it customizes its module’s methods on the fly.</p>

<p>Although stateless, Equalizer is able to be adapt to the circumstances of each class that will include it. In our example, at instantiation it uses GeoLocation’s latitude and longitude to redefine its methods at the last minute, to the effect of adding to them the ability to be comparable.</p>

<p>Let’s check it works:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Insane</span> <span class="o">&lt;</span> <span class="no">Module</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class="line">    <span class="n">define_method</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2">?&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="s1">&#39;God!&#39;</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Person</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:who_am_i</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Insane</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:who_am_i</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@who_am_i</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;javier&#39;</span><span class="p">)</span>
</span><span class="line"><span class="nb">puts</span> <span class="s2">&quot;a.who_am_i = </span><span class="si">#{</span><span class="n">a</span><span class="o">.</span><span class="n">who_am_i</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="n">a</span><span class="o">.</span><span class="n">who_am_i</span> <span class="o">=</span> <span class="n">javier</span>
</span><span class="line"><span class="nb">puts</span> <span class="s2">&quot;a.who_am_i? = </span><span class="si">#{</span><span class="n">a</span><span class="o">.</span><span class="n">who_am_i?</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="n">a</span><span class="o">.</span><span class="n">who_am_i?</span> <span class="o">=</span> <span class="no">God</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Convoluted, pirouettical, and yet it works.</p>

<h2 id="define-method">Define Method</h2>

<p>Among other metaprogramming tricks it uses the define_method extensively. Although this is usually done to create a new named method at runtime, in this case, the method’s names are set from the start, what is created dynamically is the way the method operates.</p>

<p>For example, the cmp? (comparable?) method has a set name (cmp?) and the blocks passed is also well defined (we check that all keys of both objects return the same values), but the fact that we won’t know which keys are available to compare until runtime makes this use an example of metaprogramming.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># where we make attributes comparable</span>
</span><span class="line"><span class="k">def</span> <span class="nf">define_cmp_method</span>
</span><span class="line">  <span class="n">keys</span> <span class="o">=</span> <span class="vi">@keys</span>
</span><span class="line">  <span class="n">define_method</span><span class="p">(</span><span class="ss">:cmp?</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">comparator</span><span class="p">,</span> <span class="n">other</span><span class="o">|</span>
</span><span class="line">    <span class="n">keys</span><span class="o">.</span><span class="n">all?</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="o">|</span> <span class="nb">send</span><span class="p">(</span><span class="n">key</span><span class="p">)</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">comparator</span><span class="p">,</span> <span class="n">other</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">key</span><span class="p">))</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="kp">private</span> <span class="ss">:cmp?</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># The comparisson method</span>
</span><span class="line"><span class="k">def</span> <span class="nf">==</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
</span><span class="line">  <span class="n">other</span> <span class="o">=</span> <span class="n">coerce</span><span class="p">(</span><span class="n">other</span><span class="p">)</span> <span class="k">if</span> <span class="nb">respond_to?</span><span class="p">(</span><span class="ss">:coerce</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class="line">  <span class="n">other</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">cmp?</span><span class="p">(</span><span class="n">__method__</span><span class="p">,</span> <span class="n">other</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Two notes:</p>

<ol>
  <li>
    <p>The cmp? method is just a DRY method used to define the real comparison methods (eql? and ==). This way it is easy to extend.</p>
  </li>
  <li>
    <p>Consider also that we include this Equalizer class as an instantiated object when defining the class, so when we instantiate a new object all Equalizer methods are available as instance methods already defined for the existing instance variables.</p>
  </li>
</ol>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Rails BDD cheats]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/09/17/Rails-BDD/"/>
    
    <updated>2014-09-17T18:01:00-07:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/09/17/Rails-BDD</id>
    
    <content type="html"><![CDATA[<p>As a reminder, when testing BDD style a Rails app these are helpful to have close by:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># Rakefile</span>
</span><span class="line"><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../config/application&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">load_tasks</span>
</span><span class="line">
</span><span class="line"><span class="ss">Rails</span><span class="p">:</span><span class="ss">:TestTask</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;test:features&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;test:prepare&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class="line">  <span class="n">t</span><span class="o">.</span><span class="n">pattern</span> <span class="o">=</span> <span class="s1">&#39;test/features/**/*_test.rb&#39;</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="ss">Rake</span><span class="p">:</span><span class="ss">:Task</span><span class="o">[</span><span class="s1">&#39;test:run&#39;</span><span class="o">].</span><span class="n">enhance</span> <span class="o">[</span><span class="s1">&#39;test:features&#39;</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="n">task</span> <span class="ss">default</span><span class="p">:</span> <span class="s1">&#39;test&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># test_helper.rb</span>
</span><span class="line"><span class="c1"># ENV[&#39;RAILS_ENV&#39;] ||= &#39;test&#39;</span>
</span><span class="line"><span class="no">Rails</span><span class="o">.</span><span class="n">env</span> <span class="o">=</span> <span class="s1">&#39;test&#39;</span>
</span><span class="line"><span class="nb">puts</span> <span class="s2">&quot;Current environment: </span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">
</span><span class="line"><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../../config/environment&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;rails/test_help&#39;</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;minitest/rails/capybara&#39;</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;capybara/poltergeist&#39;</span>
</span><span class="line"><span class="c1"># require &#39;pry-rescue/minitest&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">ActiveSupport</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class="line">  <span class="n">fixtures</span> <span class="ss">:all</span>
</span><span class="line">  <span class="no">Capybara</span><span class="o">.</span><span class="n">javascript_driver</span> <span class="o">=</span> <span class="ss">:poltergeist</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># test/features/do_some_test.rb</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;test_helper&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">feature</span> <span class="s1">&#39;Do something&#39;</span> <span class="k">do</span>
</span><span class="line">  <span class="n">scenario</span> <span class="s1">&#39;anybody can do something&#39;</span> <span class="k">do</span>
</span><span class="line">    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Ask before pushing]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/09/16/git-push-confirm/"/>
    
    <updated>2014-09-16T08:01:00-07:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/09/16/git-push-confirm</id>
    
    <content type="html"><![CDATA[<p>During the usual git work flow we get so used to re-keying commands that sometimes we push up without thinking. Most things are easy to fit locally in git, besides, as they say, when in doubt reset –hard. But once your code is committed up to a publicly available and centralized repo, you become the butt of jokes in the office, people point at you behind your back and changing history becomes a nightmare.</p>

<p>I have found a little trick that helps with this, git hooks!</p>

<p>Inside your .git folder there is another one, ‘hooks’, and inside, there is a treasure trove of configurable callbacks to personalize your git work flow.</p>

<p>There are many good sources in the Internet to check. Here is a good walk through: <a href="http://blog.ittybittyapps.com/blog/2013/09/03/git-pre-push/">link</a>. And this is the <a href="http://git-scm.com/book/en/Customizing-Git-Git-Hooks">Chacon bible</a> chapter about it.</p>

<p>I ended including the following file ‘.git/hooks/pre-push’, which forces a confirmation every time I intend to push to master. Many other variants are possible, like making sure that your tests have run before pushing, I recommend exploring them all.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/bin/bash</span>
</span><span class="line">
</span><span class="line"><span class="nv">protected_branch</span><span class="o">=</span><span class="s1">&#39;master&#39;</span>
</span><span class="line"><span class="nv">current_branch</span><span class="o">=</span><span class="k">$(</span>git symbolic-ref HEAD | sed -e <span class="s1">&#39;s,.*/\(.*\),\1,&#39;</span><span class="k">)</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="o">[</span> <span class="nv">$protected_branch</span> <span class="o">=</span> <span class="nv">$current_branch</span> <span class="o">]</span>
</span><span class="line"><span class="k">then</span>
</span><span class="line"><span class="k">    </span><span class="nb">read</span> -p <span class="s2">&quot;You&#39;re about to push master, is that what you intended? [y|n] &quot;</span> -n 1 -r &lt; /dev/tty
</span><span class="line">    <span class="nb">echo</span>
</span><span class="line"><span class="nb">    </span><span class="k">if </span><span class="nb">echo</span> <span class="nv">$REPLY</span> | grep -E <span class="s1">&#39;^[Yy]$&#39;</span> &gt; /dev/null
</span><span class="line">    <span class="k">then</span>
</span><span class="line"><span class="k">        </span><span class="nb">exit </span>0 <span class="c"># push will execute</span>
</span><span class="line">    <span class="k">fi</span>
</span><span class="line"><span class="k">    </span><span class="nb">exit </span>1 <span class="c"># push will not execute</span>
</span><span class="line"><span class="k">else</span>
</span><span class="line"><span class="k">    </span><span class="nb">exit </span>0 <span class="c"># push will execute</span>
</span><span class="line"><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Back to School]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/09/15/Back-to-School/"/>
    
    <updated>2014-09-15T08:01:00-07:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/09/15/Back-to-School</id>
    
    <content type="html"><![CDATA[<p>In order to hone in my coding skills and get up to par with professional best practices I am joining the <em>Rails Dev Accelerator Course</em> imparted by <a href="http://www.codefellows.com">Code Fellows</a>.</p>

<p>Code Fellows is a start up inserted in the middle of the Amazon campus in South Lake Union. It is a dynamic environment full of energetic and passionate coders (students, staff and teachers).</p>

<p>It promises to be 8 frantic weeks of theory and practice based on all kinds of coding assignments. I’ll try to keep up blogging in the interim but please forgive me if the workload keeps me away from these posts.</p>

<p><a href="http://www.codefellows.com"><img class="center" src="http://sotoseattle.github.io/images/logos/codefellows.png" width="200" title="Code Fellows logo" /></a></p>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[MCMC MH Swendsen Wang v.2.]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/02/16/MCC-MH-SW2/"/>
    
    <updated>2014-02-16T08:01:00-08:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/02/16/MCC-MH-SW2</id>
    
    <content type="html"><![CDATA[<p>In variant II we change the way we compute Q and R.</p>

<h2 id="the-q-continuum">The Q Continuum</h2>

<p>Q, the transition probability, now depends on the probabilities of the factors on each edge. If I understand it all correctly, it is defined as a ratio between the sum of probabilities of both nodes in the edge maintaining its old assignment, to the the sum of probabilities of all possible assignment for both nodes. Remember that in variant I this was uniformly set to 0.5.</p>

<script type="math/tex; mode=display">
q_{ij} := \frac{\sum_u{\Phi_{i,j}(u,u)}}{\sum_{u,v}{\Phi_{i,j}(u,v)}}
</script>

<p>The way we compute each <script type="math/tex">q_{ij}</script> is not complicated. Beware that we are assuming there is a single factor in each edge.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Q variant II</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">qij_var_2</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">):</span>
</span><span class="line">    <span class="n">x</span><span class="p">,</span><span class="n">y</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">v</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class="line">    <span class="n">fuedge</span> <span class="o">=</span> <span class="p">[</span><span class="n">fu</span> <span class="k">for</span> <span class="n">fu</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">factors</span> <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="ow">in</span> <span class="n">fu</span><span class="o">.</span><span class="n">variables</span><span class="p">)</span> <span class="ow">and</span> <span class="p">(</span><span class="n">y</span> <span class="ow">in</span> <span class="n">fu</span><span class="o">.</span><span class="n">variables</span><span class="p">)][</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">    <span class="n">num</span><span class="p">,</span> <span class="n">den</span> <span class="o">=</span> <span class="mf">0.</span><span class="p">,</span> <span class="mf">0.</span>
</span><span class="line">    <span class="k">for</span> <span class="n">ass_1</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">totCard</span><span class="p">()):</span>
</span><span class="line">        <span class="k">for</span> <span class="n">ass_2</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">y</span><span class="o">.</span><span class="n">totCard</span><span class="p">()):</span>
</span><span class="line">            <span class="n">value</span> <span class="o">=</span> <span class="n">FactorOperations</span><span class="o">.</span><span class="n">reduce_to_value</span><span class="p">(</span><span class="n">fuedge</span><span class="p">,</span> <span class="p">{</span><span class="n">x</span><span class="p">:</span><span class="n">ass_1</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span><span class="n">ass_2</span><span class="p">})</span>
</span><span class="line">            <span class="n">den</span> <span class="o">+=</span> <span class="n">value</span>
</span><span class="line">            <span class="k">if</span> <span class="n">ass_1</span><span class="o">==</span><span class="n">ass_2</span><span class="p">:</span>
</span><span class="line">                <span class="n">num</span> <span class="o">+=</span> <span class="n">value</span>
</span><span class="line">    <span class="k">return</span> <span class="n">num</span><span class="o">/</span><span class="n">den</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="r-not-as-simple-as-it-seems">R, not as simple as it seems</h2>

<p>R will be the logDistAss probability that we computed for Gibbs, but now instead of observing one var at a time, we observe a group. It has taken me my sweet time to figure out how to do it (based on what I already did in PA5 but more out of luck than reasoning).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>R is Simple</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">MH_Swendsen_Wang</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">from_ass</span><span class="p">):</span>
</span><span class="line">	<span class="o">...</span>
</span><span class="line">    <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">variant</span><span class="o">==</span><span class="mi">2</span><span class="p">:</span>
</span><span class="line">        <span class="n">logR</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">logDistAss</span><span class="p">([</span><span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">Y_v_id</span><span class="p">],</span> <span class="n">from_ass</span><span class="p">)</span>
</span><span class="line">    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The key for LogDistAss is that when we are looking at extracting from a factor the probability of a variable given that all the other variables in the factor have an assignment, like in the Bigss sampling code, it is very fast and we already have utility method that does that.</p>

<p>When instead of one, we have a set of variables, we need to reduce the factor by the assigned variables and then marginalize by the rest up to obtaining the distribution. The following code is messy, my understanding of it is not completly firm, and it should be refactored, which I leave for a future time.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>LogProbability of Partial Assignment Not So Easy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">logDistAss</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sample_vars</span><span class="p">,</span> <span class="n">evidence</span><span class="p">):</span>
</span><span class="line">    <span class="n">cardio</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span><span class="n">e</span><span class="o">.</span><span class="n">totCard</span><span class="p">()</span> <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">sample_vars</span><span class="p">])</span>
</span><span class="line">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">cardio</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">:</span>
</span><span class="line">        <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&quot;All sampling vars must have the same cardinality&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">logbp</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.</span><span class="p">]</span><span class="o">*</span><span class="n">cardio</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="n">all_f</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">fu</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">sample_vars</span> <span class="k">for</span> <span class="n">fu</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">var_to_factors</span><span class="p">[</span><span class="n">a</span><span class="p">]))</span>
</span><span class="line">    <span class="k">for</span> <span class="n">fu</span> <span class="ow">in</span> <span class="n">all_f</span><span class="p">:</span>
</span><span class="line">        <span class="n">vs</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">fu</span><span class="o">.</span><span class="n">variables</span> <span class="k">if</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">sample_vars</span><span class="p">]</span>
</span><span class="line">
</span><span class="line">        <span class="n">evi</span><span class="p">,</span> <span class="n">mar</span> <span class="o">=</span> <span class="p">{},</span> <span class="p">[]</span>
</span><span class="line">        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">fu</span><span class="o">.</span><span class="n">variables</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="n">k</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">vs</span><span class="p">:</span>
</span><span class="line">                <span class="n">evi</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">evidence</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="n">mar</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">vs</span><span class="p">)</span><span class="o">==</span><span class="mi">1</span><span class="p">:</span>
</span><span class="line">            <span class="n">dist</span> <span class="o">=</span> <span class="n">FactorOperations</span><span class="o">.</span><span class="n">reduce_to_dist</span><span class="p">(</span><span class="n">fu</span><span class="p">,</span> <span class="n">evi</span><span class="p">)</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="n">gg</span> <span class="o">=</span> <span class="n">FactorOperations</span><span class="o">.</span><span class="n">observe</span><span class="p">(</span><span class="n">fu</span><span class="p">,</span> <span class="n">evi</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
</span><span class="line">            <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">mar</span><span class="p">:</span>
</span><span class="line">                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">gg</span><span class="o">.</span><span class="n">variables</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">:</span>
</span><span class="line">                    <span class="n">gg</span> <span class="o">=</span> <span class="n">FactorOperations</span><span class="o">.</span><span class="n">marginalize</span><span class="p">(</span><span class="n">gg</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class="line">            <span class="n">dist</span> <span class="o">=</span> <span class="n">gg</span><span class="o">.</span><span class="n">values</span>
</span><span class="line">
</span><span class="line">    <span class="n">logbp</span> <span class="o">+=</span> <span class="n">np</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">dist</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">logbp</span> <span class="o">=</span> <span class="n">logbp</span> <span class="o">-</span> <span class="nb">min</span><span class="p">(</span><span class="n">logbp</span><span class="p">)</span> <span class="c"># to avoid underflow when back in normal space</span>
</span><span class="line">    <span class="k">return</span> <span class="n">logbp</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="analysis">Analysis</h2>

<p>Following the same procedures and initial inputs as we did for Gibbs, MH Uniform and SW-I we produce the following chart for comparison purposes.</p>

<p>Mixing time:</p>

<p><img class="center" src="http://sotoseattle.github.io/images/feb14/MHSW_2_mix.png" width="500" title="Mixing Windows Run 1" /></p>

<p>Sample Size:</p>

<p><img class="center" src="http://sotoseattle.github.io/images/feb14/MHSW_2_size.png" width="500" title="Sample Size Run 1" /></p>

<p>Marginals Convergence for the extreme case [0.95, 0.05]:</p>

<p><img class="center" src="http://sotoseattle.github.io/images/feb14/MHSW_2_cross.png" width="500" /></p>

<p>Histogram of dist to true marginal based on 100 runs on 16 node Ising:</p>

<p><img class="center" src="http://sotoseattle.github.io/images/feb14/MHSW_2_hist.png" width="500" /></p>

<p>Amazing. An Average error of 0.04 0with standard deviation of 0.01.</p>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[MCMC MH Swendsen Wang]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/02/15/MCMC-MH-SW/"/>
    
    <updated>2014-02-15T08:01:00-08:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/02/15/MCMC-MH-SW</id>
    
    <content type="html"><![CDATA[<p>We continue with Assignment 5 from Prof. Koller’s Coursera course: “Probabilistic Graphical Models”. I am including the explanation from the assignment paper because it is the most clear explanation I have found for the Swendsen Wang sampling method, which is a hair rasing trip in on itself.</p>

<h2 id="theory">Theory</h2>

<p>In Ising models and image segmentation applications, pairwise Markov networks are frequently used. This means specially for strong potentials adjacent variables tend to take on the same values. This makes it hard to explore the space for possible assignments by changing the value of one variable at a time, like Gibbs does. The Swendsen-Wang algorithm has been specifically designed for this kind of networks and overcomes this difficulty by changing, at the same time, a group of adjacent variables that have the same value.</p>

<p>In Swendsen-Wang, we start with a model that has variables connected in pairwise factors in a Markov graph. All the variables can take on the same values. To do MCMC, we start as usual in some state x. To get to the next state, we start with the graph. We break all the edges between variables that have different values. Then, we also break the rest of the edges between any nodes i and j with probability <script type="math/tex">(1−q_{i,j})</script>, where <script type="math/tex">q_{i,j}</script> is a probability that can depend on i and j but not their current assignment. </p>

<p>Once we’ve broken all those edges, we’re left with a graph with connected groups of variables, with all variables in a group sharing the same assignment. We randomly pick one with a uniform distribution. That’s Y . We choose a new assignment, using a probability distribution R. With the new assignment to the variables in Y , we now have the new state x’; in other words, the new assignment x’ is the same as x, except that the variables in Y have changed value. As with all MH, we accept the state with a probability A.</p>

<p><img class="center" src="http://sotoseattle.github.io/images/feb14/SW_procedure.png" width="500" title="Swendsen Wang Procedure 1" /></p>

<p>To compute Q, R, and A, we use the following equations. Let C(Y|x) be the probability that a set Y is selected to be updated using this procedure, given the current state is x. Then we somehow divine Q(x → x’), the chance that we’ll try a transition from x to x’ by changing Y , as the following:</p>

<script type="math/tex; mode=display">
Q(x \rightarrow x') = C(Y|x) R(Y = l'|x_Y )
</script>

<p>So we can compute the ratio for A (acceptance probability):</p>

<script type="math/tex; mode=display">
\frac{Q(x' \rightarrow x)}{Q(x \rightarrow x')} =\frac{C(Y|x') R(Y = l|x'_Y )}{C(Y|x) R(Y = l'|x_Y )}
</script>

<p>And we realize that obviously the following is a truism:</p>

<script type="math/tex; mode=display">
\frac{C(Y|x')}{C(Y|x)} = \frac{\prod_{(i,j) \in \epsilon (Y, X_{l'}^{'}-Y)}(1 - q_{i,j})}{\prod_{(i,j) \in \epsilon (Y, X_{l}-Y)}(1 - q_{i,j})}
</script>

<p>Where: <script type="math/tex">X_l</script> is the set of vertices with label l in x, <script type="math/tex">X'_{l'}</script> is the set of vertices with label l’ in x’; and where <script type="math/tex">\epsilon(Y,Z)</script> (between two disjoint sets Y,Z) is the set of edges connecting nodes in Y to nodes in Z.</p>

<h2 id="sw-uniform-variant">SW Uniform variant</h2>

<p>Although the intuition behind breaking the graph and changing the assignment of a connected component makes sense, coming up with Q and R are beyond my grasp. Nevertheless, we compute SW in two variants. The first one is easy, it uses a Q that is uniform, so we set all the <script type="math/tex">q_{ij}</script> to 0.5 (our Ising net is all binomial). We also set R to be uniform. Nevertheless Let’s go step by step:</p>

<p>The first thing we have to take into consideration is to create a data structure in our MCMC_MHSW object that holds, for each edge between nodes i and j the value of <script type="math/tex">q_{ij}</script>. In our variant all Q are equal, being the uniform.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Q by edges</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="bp">self</span><span class="o">.</span><span class="n">q_list</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">V</span><span class="p">)</span>
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">V</span><span class="p">):</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">q_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line">    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">adj</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">variant</span><span class="o">==</span><span class="mi">1</span><span class="p">:</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">q_list</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.5</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now we start processing. Given the graph and a complete assignment we remove the edges connecting variables that have different values. Also, we take the opportunity to break edges based on the probability Q.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Breaking Edges Based on Assignment</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">common_components_and_Q</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">ass</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&#39;&#39;&#39;return connected edges between nodes that share assignment, and pass Q probability&#39;&#39;&#39;</span>
</span><span class="line">    <span class="n">edges</span> <span class="o">=</span> <span class="p">[[]]</span><span class="o">*</span><span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">V</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">one_pass_edges</span><span class="p">:</span>
</span><span class="line">        <span class="k">if</span> <span class="n">ass</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span><span class="o">==</span><span class="n">ass</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">v</span><span class="p">[</span><span class="n">j</span><span class="p">]]</span> <span class="ow">and</span> <span class="n">random</span><span class="o">.</span><span class="n">uniform</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">q_list</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]:</span>
</span><span class="line">            <span class="n">edges</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">edges</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class="line">            <span class="n">edges</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">edges</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">edges</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>With this new graph (the same as the original but with rearranged edges) we need is a way to find its connected components. That is easy with DFS (Depth First Search) and the Princeton Algorithm’s course from Coursera. Given a graph G we can find how many components there are, and to which one each variable belongs.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Connected Components</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">CC</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">G</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">G</span> <span class="o">=</span> <span class="n">G</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">dni</span> <span class="o">=</span> <span class="p">[[]]</span><span class="o">*</span><span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">V</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">marked</span> <span class="o">=</span> <span class="p">[</span><span class="bp">False</span><span class="p">]</span><span class="o">*</span><span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">V</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">=</span> <span class="p">[[]]</span><span class="o">*</span><span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">V</span>
</span><span class="line">        <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">V</span><span class="p">):</span>
</span><span class="line">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">marked</span><span class="p">[</span><span class="n">v</span><span class="p">]</span><span class="o">==</span><span class="bp">False</span><span class="p">:</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">dfs</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">v</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">marked</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">dni</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">count</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">size</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">count</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">count</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line">        <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">adj</span><span class="p">[</span><span class="n">v</span><span class="p">]:</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">marked</span><span class="p">[</span><span class="n">w</span><span class="p">]</span><span class="o">==</span><span class="bp">False</span><span class="p">):</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">dfs</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The code for a method to return a new assignment begins to take form:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Finding a new Assignment</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">MH_Swendsen_Wang</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">from_ass</span><span class="p">):</span>
</span><span class="line">    <span class="c"># build new graph breaking edges where nodes differ in assignment and by Q</span>
</span><span class="line">    <span class="n">G_prime</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="p">)</span>
</span><span class="line">    <span class="n">G_prime</span><span class="o">.</span><span class="n">adj</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">rearrange_edges</span><span class="p">(</span><span class="n">from_ass</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="c"># get connected components</span>
</span><span class="line">    <span class="n">common_comps</span> <span class="o">=</span> <span class="n">CC</span><span class="p">(</span><span class="n">G_prime</span><span class="p">)</span>
</span><span class="line">    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>With the components identified we can select one (randomly), and retrieve all its variables.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>cont</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">MH_Swendsen_Wang</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">from_ass</span><span class="p">):</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="c"># select a common component randomly</span>
</span><span class="line">    <span class="n">Y_index</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">common_comps</span><span class="o">.</span><span class="n">count</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">    <span class="n">Y_v_id</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">common_comps</span><span class="o">.</span><span class="n">dni</span><span class="p">)</span> <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="n">Y_index</span><span class="p">]</span>
</span><span class="line">    <span class="n">cardio</span> <span class="o">=</span> <span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">v</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">.</span><span class="n">totCard</span><span class="p">()</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">Y_v_id</span><span class="p">]</span>
</span><span class="line">    <span class="k">assert</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">unique</span><span class="p">(</span><span class="n">cardio</span><span class="p">))</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span> <span class="c"># check all have same ass and cardinality</span>
</span><span class="line">    <span class="n">d</span> <span class="o">=</span> <span class="n">cardio</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We compute the R (actually the log of R for underflows). In our case of first variant and given that all variables are bianry, this  uniform distribution R becomes <code>[log(0.5), log(0.5)]</code>. The old value of Y can be taken from any variable of Y (we choose whichever is first), and the new assignment is randomly extracted from the R distribution. The new complete assignment becomes then the same as the original except for the variables in Y, which take now on the new value derived from R.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>cont</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">MH_Swendsen_Wang</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">from_ass</span><span class="p">):</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="n">logR</span> <span class="o">=</span> <span class="p">[</span><span class="n">math</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="mf">1.</span><span class="o">/</span><span class="n">d</span><span class="p">)]</span><span class="o">*</span><span class="n">d</span>
</span><span class="line">    <span class="n">old_value</span> <span class="o">=</span> <span class="n">from_ass</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">v</span><span class="p">[</span><span class="n">Y_v_id</span><span class="p">[</span><span class="mi">0</span><span class="p">]]]</span>
</span><span class="line">    <span class="n">new_value</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">randSampleDist</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">logR</span><span class="p">))</span>
</span><span class="line">    <span class="n">to_ass</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">((</span><span class="n">k</span><span class="p">,</span><span class="n">new_value</span><span class="p">)</span> <span class="k">if</span> <span class="n">k</span><span class="o">.</span><span class="n">id</span> <span class="ow">in</span> <span class="n">Y_v_id</span> <span class="k">else</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">from_ass</span><span class="p">[</span><span class="n">k</span><span class="p">])</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">from_ass</span><span class="p">)</span>
</span><span class="line">    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now comes the part of the messy equation and the epsilons. We need to compute the ratio of the products of Qs for all edges. We do it in log space with sums.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>cont</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">MH_Swendsen_Wang</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">from_ass</span><span class="p">):</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="c"># log-ratio of the prob of picking Y given we transition from_ass to_ass</span>
</span><span class="line">    <span class="c"># we need to iterate over all edges</span>
</span><span class="line">    <span class="n">log_QY_ratio</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">one_pass_edges</span><span class="p">:</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="ow">in</span> <span class="n">Y_v_id</span> <span class="ow">and</span> <span class="n">j</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">Y_v_id</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">i</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">Y_v_id</span> <span class="ow">and</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">Y_v_id</span><span class="p">):</span>
</span><span class="line">            <span class="n">x</span><span class="p">,</span><span class="n">y</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">v</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class="line">            <span class="k">if</span> <span class="n">from_ass</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="n">old_value</span> <span class="ow">and</span> <span class="n">from_ass</span><span class="p">[</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="n">old_value</span><span class="p">:</span>
</span><span class="line">                <span class="n">log_QY_ratio</span> <span class="o">=</span> <span class="n">log_QY_ratio</span> <span class="o">-</span> <span class="n">log</span><span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="bp">self</span><span class="o">.</span><span class="n">q_list</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span>
</span><span class="line">            <span class="k">if</span> <span class="n">to_ass</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="n">new_value</span> <span class="ow">and</span> <span class="n">to_ass</span><span class="p">[</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="n">new_value</span><span class="p">:</span>
</span><span class="line">                <span class="n">log_QY_ratio</span> <span class="o">=</span> <span class="n">log_QY_ratio</span> <span class="o">+</span> <span class="n">log</span><span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="bp">self</span><span class="o">.</span><span class="n">q_list</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span>
</span><span class="line">    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finally, we have everything to compute A. We compute the stationary probabilities as we did with MH Uniform, easy. Then the acceptance probability just follows the theoretical formula given before. We check randomly if pass or not the acceptance threshold, and if we do we send the new complete assignment as the new sample (if not , we stay put).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>cont</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">MH_Swendsen_Wang</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">from_ass</span><span class="p">):</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="n">acceptance</span><span class="p">,</span> <span class="n">from_pi</span><span class="p">,</span> <span class="n">to_pi</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span>
</span><span class="line">    <span class="k">for</span> <span class="n">fu</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">factors</span><span class="p">:</span>
</span><span class="line">        <span class="n">from_pi</span> <span class="o">+=</span> <span class="n">math</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">FactorOperations</span><span class="o">.</span><span class="n">reduce_to_value</span><span class="p">(</span><span class="n">fu</span><span class="p">,</span> <span class="n">from_ass</span><span class="p">))</span>
</span><span class="line">        <span class="n">to_pi</span> <span class="o">+=</span> <span class="n">math</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">FactorOperations</span><span class="o">.</span><span class="n">reduce_to_value</span><span class="p">(</span><span class="n">fu</span><span class="p">,</span> <span class="n">to_ass</span><span class="p">))</span>
</span><span class="line">    <span class="n">acceptance</span> <span class="o">=</span> <span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">to_pi</span><span class="p">)</span><span class="o">/</span><span class="n">math</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">from_pi</span><span class="p">))</span><span class="o">*</span><span class="n">math</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">log_QY_ratio</span><span class="p">)</span><span class="o">*</span>\
</span><span class="line">                      <span class="n">math</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">logR</span><span class="p">[</span><span class="n">old_value</span><span class="p">])</span><span class="o">/</span><span class="n">math</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">logR</span><span class="p">[</span><span class="n">new_value</span><span class="p">])</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="n">random</span><span class="o">.</span><span class="n">uniform</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">acceptance</span><span class="p">:</span>
</span><span class="line">        <span class="n">from_ass</span> <span class="o">=</span> <span class="n">to_ass</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">from_ass</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="analysis">Analysis</h2>

<p>Following the same procedures and initial inputs as we did for Gibbs and MH Uniform we produce the following chart for comparison purposes. All pretty impressive.</p>

<p>Mixing time:</p>

<p><img class="center" src="http://sotoseattle.github.io/images/feb14/MHSW_1_mix.png" width="500" title="Mixing Windows Run 1" /></p>

<p>Sample Size:</p>

<p><img class="center" src="http://sotoseattle.github.io/images/feb14/MHSW_1_size.png" width="500" title="Sample Size Run 1" /></p>

<p>Marginals Convergence for the extreme case [0.95, 0.05]:</p>

<p><img class="center" src="http://sotoseattle.github.io/images/feb14/MHSW_1_cross.png" width="500" /></p>

<p>Histogram of dist to true marginal based on 100 runs on 16 node Ising:</p>

<p><img class="center" src="http://sotoseattle.github.io/images/feb14/MHSW_1_hist.png" width="500" /></p>

<p>Although the hsitogram runs over 70,000 is overkill (WS arrives at the stationary distribution way earlier), the results are impressive. An Average error of 0.04 with standard deviation of 0.02. All very impressive. Cannot wait to see if the Swendsen Wang variant 2 achieves even better results!</p>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[MCMC MH Uniform]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/02/13/MCMC-MH-Uniform/"/>
    
    <updated>2014-02-13T08:01:00-08:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/02/13/MCMC-MH-Uniform</id>
    
    <content type="html"><![CDATA[<p>The code for a Q based on the Uniform distribution has three steps:</p>

<ul>
  <li>come up with a new complete assignment out of the blue (literally)</li>
  <li>compute the acceptance probability. When we compute π(x’)Q(x’ → x), π is the joint probability reduced by the complete assignment (unormalized), meaning the total probability of having that assignment. The question is, how do I compute Q(x’ → x)? Since it is the uniform distribution, Q(x’ → x) == Q(x → x’) == constant, so it cancels out and I only need to compute the ratio of π(x’) / π(x).</li>
  <li>decide with the new acceptance if, like The Clash asks, should we stay or should we go.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Q from Uniform dist</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">MH_Uniform</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">from_ass</span><span class="p">):</span>
</span><span class="line">    <span class="c"># get a random complete assignment from uniform distribution</span>
</span><span class="line">    <span class="n">cardio</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="o">.</span><span class="n">totCard</span><span class="p">()</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">v</span><span class="p">]</span>
</span><span class="line">    <span class="n">a</span> <span class="o">=</span> <span class="n">floor</span><span class="p">([</span><span class="n">uniform</span><span class="p">(</span><span class="mf">0.</span><span class="p">,</span> <span class="mf">1.</span><span class="p">)</span><span class="o">*</span><span class="n">cardio</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">cardio</span><span class="p">))])</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">int</span><span class="p">)</span>
</span><span class="line">    <span class="n">to_ass</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">((</span><span class="n">e</span><span class="p">,</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">e</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">v</span><span class="p">))</span>
</span><span class="line">
</span><span class="line">    <span class="c"># compute the probabilities of transitions</span>
</span><span class="line">    <span class="n">fwd</span><span class="p">,</span> <span class="n">bwd</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span>
</span><span class="line">    <span class="k">for</span> <span class="n">fu</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">factors</span><span class="p">:</span>
</span><span class="line">        <span class="n">fwd</span> <span class="o">+=</span> <span class="n">math</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">FactorOperations</span><span class="o">.</span><span class="n">reduce_to_value</span><span class="p">(</span><span class="n">fu</span><span class="p">,</span> <span class="n">to_ass</span><span class="p">))</span>
</span><span class="line">        <span class="n">bwd</span> <span class="o">+=</span> <span class="n">math</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">FactorOperations</span><span class="o">.</span><span class="n">reduce_to_value</span><span class="p">(</span><span class="n">fu</span><span class="p">,</span> <span class="n">from_ass</span><span class="p">))</span>
</span><span class="line">
</span><span class="line">    <span class="c"># compute acceptance probability and return the new state</span>
</span><span class="line">    <span class="n">p_acceptance</span> <span class="o">=</span> <span class="nb">min</span><span class="p">([</span><span class="mf">1.</span><span class="p">,</span> <span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">fwd</span><span class="p">)</span><span class="o">/</span><span class="n">math</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">bwd</span><span class="p">))])</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">p_acceptance</span><span class="p">:</span>
</span><span class="line">        <span class="n">from_ass</span> <span class="o">=</span> <span class="n">to_ass</span>
</span><span class="line">    <span class="k">return</span> <span class="n">from_ass</span>
</span><span class="line"><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To speed up the process, I have added a new utility function to Factor Operations, to extract the potential/probability value of a complete assigment from a given factor. It is the same as reducing, but instead of giving back a reduced factor, since we have a complete assignment (all variables have assignments) we return a value (float).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Get Factor Value of Complete Assignment</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">reduce_to_value</span><span class="p">(</span><span class="n">fA</span><span class="p">,</span> <span class="n">evidence</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&#39;&#39;&#39;reduce factor by complete assignment to a single value&#39;&#39;&#39;</span>
</span><span class="line">    <span class="n">complete_ass</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">([</span><span class="n">evidence</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">fA</span><span class="o">.</span><span class="n">variables</span><span class="p">])</span>
</span><span class="line">    <span class="k">return</span> <span class="n">fA</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">item</span><span class="p">(</span><span class="n">complete_ass</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="mixing">Mixing</h2>

<p>As before we run the MCMCMHU to collect a total of 70,000 samples. The initial assignment is initialized to all ones. </p>

<p>Now we get subsets every 1,000 samples of size 10,000. That is 59 windows of 10,000 samples collected after different mixing times.</p>

<p>Ploting the difference between the exact marginal and our estimated marginals of the three variables (number 0 as red, 4 as blue, and 8 as green), we have the following charts (from two different runs).</p>

<div>
	<img class="left" src="http://sotoseattle.github.io/images/feb14/MHU_mix.png" width="425" title="Mixing Windows Run 1" />
	<img class="right" src="http://sotoseattle.github.io/images/feb14/MHU_mixB.png" width="425" title="Mixing Windows Run 2" />
</div>
<p><br /></p>

<p>No clear mixing threshold.</p>

<h2 id="sample-size">Sample size</h2>

<p>Following the previous settings but fixing the mixing time to 1,000, we can plot the difference between exact and estimated marginals as we collect more samples. From the charts (two different runs) we see that it converges beyond 20,000. </p>

<div>
	<img class="left" src="http://sotoseattle.github.io/images/feb14/MHU_size.png" width="425" title="Sample Size Run 1" />
	<img class="right" src="http://sotoseattle.github.io/images/feb14/MHU_sizeB.png" width="425" title="Sample Size Run 2" />
</div>
<p><br /></p>

<p>Nevertheless, it seems to work worse than Gibbs.</p>

<h2 id="marginals-convergence">Marginals Convergence</h2>

<p>We again run twice the model and see how well the estimated marginals converge across runs. All models are Ising grids with 9 variables, have mixing time of 7,000 and sample size of 10,000. </p>

<div>
	<img class="left" src="http://sotoseattle.github.io/images/feb14/MHU_compare_runs_0703.png" width="425" />
	<img class="right" src="http://sotoseattle.github.io/images/feb14/MHU_compare_runs_102.png" width="425" />
	<img class="center" src="http://sotoseattle.github.io/images/feb14/MHU_compare_runs_095005.png" width="425" />
</div>

<p>Again, worse results.</p>

<h2 id="comparison-to-gibbs">Comparison to Gibbs</h2>

<p>Lile we did for Gibbs, we run 10 times this MCMCMHU model. Now with mixing time of 5,000 and sample size of 30,000. Starting assignment, 5 runs with 0s, and 5 runs with 1s. We compute the error as before and see what results we get as compared to the exact marginals for all variables.</p>

<p>The error, as defined in previous posts, from our 10 runs is 0.12 on the average (vs. 0.065 from Gibbs), with a range of [0.03, 0.24] (vs. [0.005, 0.17]) and a standard deviation of 0.07 (vs. 0.05). Definetively worse performance.</p>

<p>Finally, this is for a 9 node Ising net. For a 4 sided net with 16 nodes, with strong correlation this MHU method performs very poorly because we get stuck in specific assignments for very long times. Because the probability of a new assignment (randomly chosen) tends to be so small as compared to the probability we start with that the ratio is miniscule, and A() always rejects. The more correlated (i.e. higher on diagonal values vs off diagonal) the more steps we need to take, and even that doesn’t guarantee good results. Consider that for 100,000 steps, only around 50 are accepted, which means we need to run it much longer to achieve good results. </p>

<p>For the easiest 16 nodes with pairwise potentials [0.5, 0.5], 0 mixing and 30,000 steps, MHU and Gibs give similar good results. MHU gives us an average error and standard dev of [0.02, 0.004], while Gibbs achieves [0.01, 0.001].</p>

<div>
    <img class="left" src="http://sotoseattle.github.io/images/feb14/Gibbs_hist.png" width="425" title="Gibbs Error 100 Runs" />
    <img class="right" src="http://sotoseattle.github.io/images/feb14/MHU_hist.png" width="425" title="MHU Error 100 Runs" />
</div>
<p><br /></p>

<p>Finally we compare the histogram of errors for these two methods when applied to the [1.0, 0.2] in the 16 node Ising model. Each histogram is based on 100 runs. Both have a mixing time of 10,000 and a sampling size of 70,000. Gibbs’s histogram shown in red, MHU in blue.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[MCMC ~ Metropolis Hastings]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/02/12/MCMC-MH-Theory/"/>
    
    <updated>2014-02-12T08:01:00-08:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/02/12/MCMC-MH-Theory</id>
    
    <content type="html"><![CDATA[<p>With Gibbs sampling, we changed the assigment of our variables one at a time, and after cycling though all the variables we got to new state, a complete new assignment to all variables. </p>

<p>For regular chains, Gibbs sampling is a legal MCMC transition, meaning that it results in a Markov Chain with the right stationary distribution. But with high autocorrelations between variables, trying to change the value of one variable at a time tends to leave us in the same state or the same cluster of similar states, because the one variable we change at a time remains strongly constrained by its neighbors. So mixing is slow. </p>

<p>We’d like to use a transition that lets us make bigger moves around the state space, but we still have to make sure our transition is a legal MCMC. The Metropolis-Hastings algorithm tries to do this. We choose the transition we actually want – one that takes large steps around the state space. Then we modify that transition, using an acceptance probability, that forces it into a legal MCMC transition. </p>

<h2 id="q-and-a">Q and A</h2>

<p>Our MCMC transition then has two steps. First we choose a proposed new state (x’), using our transition probabilities Q(x → x’). Then we accept that new state, with probability A(x → x’). If the transition is accepted, our new assignment is the proposed new state, but if the transition is rejected, our new assignment is the same as the old one.</p>

<p>For a given proposal transition Q(x → x’), the acceptance probability is given by: </p>

<script type="math/tex; mode=display">
\begin{align}

A(x \rightarrow x') = min \left[ 1, \frac{\pi(x') Q(x' \rightarrow x)}{\pi(x) Q(x \rightarrow x')} \right]

\end{align}
</script>

<p>The key is that A is determined once we know Q, so the art is in finding the right Q. One that:</p>

<ul>
  <li>
    <p>is reversible, so if there is a positive probability of getting from x to x’, then the probability of getting from x’ to x is also positive.</p>
  </li>
  <li>
    <p>allows us to go far away places, but without getting so far away that the probability of acceptances becomes too low, because then we won’t move at all.</p>
  </li>
</ul>

<p>Finding Q is hard, and an art that depends of the PGM at hand. Also, a legal Q is such that for every two states/assignments (x, x’), the probability of transitioning (x → x’) is exactly the same as the probability of transitioning in reverse (x’ → x), [such property is called ‘detailed balance’]. </p>

<h2 id="q-as-gibbs-or-gibbs-as-mh">Q as Gibbs, or Gibbs as MH</h2>

<p>We can insert Gibbs into our MH framework with a trick. We consider that the Gibbs sampling method is our Q(x → x’), our way of finding new assignment (even if in litle steps which violates the MH goal, but it is a trick). Since Gibbs is already legal, all we need is to define an approval distribution A(x → x’) that always accepts whatever Q (Gibbs) brings, for example A(x → x’) = 1.</p>

<h2 id="q-as-the-uniform-distribution">Q as the Uniform distribution</h2>

<p>A very simple Q is based on the Uniform distribution. For all the variables in the assignment we randomly choose (independently) new assignments. Brutishly. All at once. Then we compute the transitions by multiplying the specific probabilities of getting that evidence (to and from the initial assignment from/to the new assignment). Now we can compute the acceptance probability A.</p>

<p>The problem is that because we are pulling out assignments out of a hat randomly, most of them will be very unique/unrelated and therefore with low-probability transition. A low probability transition will surely get rejected by the acceptance step, and so we end up lingering in one state rather than exploring the state space. So we may end up with tons of failed trials, tons of staying put, and we only move out of the assignment when we don’t go too far.</p>

<p>Ising models and image segmentation applications tend to rely on pairwise Markov networks. In these networks, adjacent variables tend to take on the same values. This makes it hard to explore the space for proposal distributions which change the value of one variable at a time, such as Gibbs or the uniform proposal distribution.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[MCMC Gibbs - Analysis]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/02/11/MCMC-Gibbs-Analysis/"/>
    
    <updated>2014-02-11T08:01:00-08:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/02/11/MCMC-Gibbs-Analysis</id>
    
    <content type="html"><![CDATA[<p>We are going to use our primitive MCMC Gibbs Inference engine on our 9 variable toy Ising grid (with histerical potentials [1.0, 0.2]). And then compare our results to our previous approximation using Loopy Belief Propagation.</p>

<p><img class="center" src="http://sotoseattle.github.io/images/feb14/toy_grid.png" width="300" title="Small Pairwise Markov Grid" /></p>

<p>The big problem is that there is no clear cut way to know when we have left the wandering zone around and entered the domain of the joint probability. We cannot know when the chain has mixed, we can only guess.</p>

<h2 id="mixing">Mixing</h2>

<p>As a first experiment we run our MCMC to collect a total of 70,000 samples. The initial assignment is initialized to all ones. </p>

<p>Now from the samples we get subsets every 1,000 samples of size 10,000. That is 59 subsets that go from sample [0 to 10,000], [1,000 to 11,000], [2,000 to 12,000], …. Each subset is a window, of 10,000 samples collected after different mixing times.</p>

<p>If we plot the difference between the exact marginal and our MCMC estimated marginal of the three variables (number 0 as red, 4 as blue, and 8 as green), we have the following charts (from two different runs).</p>

<div>
	<img src="http://sotoseattle.github.io/images/feb14/dist_to_exact_mcmcg.png" width="425" title="Run 1" />
	<img class="right" src="http://sotoseattle.github.io/images/feb14/dist_to_exact_mcmcgB.png" width="425" title="Run 2" />
</div>

<p>What I deduce from this (and here is pure amateur talking) is that all variables tend to move together. I don’t know what is a good mixing time, it looks like it is pretty much mixed from the start. Nevertheless, I’ll choose 7,000 to be safe. Also, as we walk around, the system oscilates and spike away from the exact marginals in a bounded range.</p>

<h2 id="sample-size">Sample size</h2>

<p>Following the previous settings but fixing the mixing time to 7,000, we can plot the difference between exact and estimated marginals as we collect more samples. From the charts (two different runs) we see that anything beyond 30,000 samples seems to be ok.</p>

<div>
	<img class="left" src="http://sotoseattle.github.io/images/feb14/dist_to_exact_mcmcg_3.png" width="425" title="Run 1" />
	<img class="right" src="http://sotoseattle.github.io/images/feb14/dist_to_exact_mcmcg_3B.png" width="425" title="Run 2" />
</div>

<h2 id="marginals-convergence">Marginals Convergence</h2>

<p>Gibbs walks one step at a time, so for grids with high potentials (high correlation between variables), it tends to stay for long periods next to high potential states (or clusters), slowing down mixing.</p>

<p>In the following charts we run twice different models and see how well the estimated marginals converge across runs. All models are Ising grids with 9 variables, have mixing time of 7,000 and sample size of 10,000. </p>

<div>
	<img class="left" src="http://sotoseattle.github.io/images/feb14/compare_runs_0703.png" width="425" />
	<img class="right" src="http://sotoseattle.github.io/images/feb14/compare_runs_102.png" width="425" />
	<img class="center" src="http://sotoseattle.github.io/images/feb14/compare_runs_095005.png" width="425" />
</div>

<p>The better convergence the closer the estimated marginals to the diagonal. The first model has potentials [0.7, 0.3] and all variables are along the diagonal. The same happens for the second model, our optimized [1., 0.2], where the a corner variable get a bit off, but good for all purposes. </p>

<p>A third model with even further heighened potentials [0.95, 0.05] shows discouraging results. The true marginals are all in the narrow range [0.5974, 0.6009], but our estimated marginals for the first run are tightly clustered around 0.0, while all marginals for the second run are tightly clustered around 0.6. This can be palliated with a bigger sample size up to a point.</p>

<p>Two points to make: 1) this shows convergence between runs, not to the exact marginal. 2) The lower correlation between variables, the better convergence.</p>

<h2 id="comparison-to-lbp">Comparison to LBP</h2>

<p>Finally we are going to run 10 times the model we have. Mixing time of 7,000. Sample size of 20,000. Starting assignment, 5 runs with 0s, and 5 runs with 1s. We are going to compute the error as before and see what results we get as compared to the exact marginals for all variables.</p>

<p>The error, as defined in previous posts, from our 10 runs is 0.065 on the average, with a range of [0.005, 0.17] and a standard deviation of 0.05. That is a further improvement from our best approximation of 0.24 with RBP.</p>

<p>Nevertheless, although Gibbs gives us on the average much better results, from time to time it go cyclothymic and spikes markedly away from the exact marginals.</p>

<p>As a data point for comparison purposes, taking the estimated marginals from our last run (the 10th run) we get an error of 0.059, and the already familiar table:</p>

<table class="widetable">
  <thead>
    <tr>
      <th style="text-align: center">var</th>
      <th style="text-align: right">exact marginal</th>
      <th style="text-align: right">MCMC Gibbs aprox</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"> </td>
      <td style="text-align: right"> </td>
      <td style="text-align: right"> </td>
    </tr>
    <tr>
      <td style="text-align: center">0</td>
      <td style="text-align: right">0.537310955208</td>
      <td style="text-align: right">0.52015</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: right">0.556558936419</td>
      <td style="text-align: right">0.541</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: right">0.552439017812</td>
      <td style="text-align: right">0.53745</td>
    </tr>
    <tr>
      <td style="text-align: center">3</td>
      <td style="text-align: right">0.573509953445</td>
      <td style="text-align: right">0.5518</td>
    </tr>
    <tr>
      <td style="text-align: center">4</td>
      <td style="text-align: right">0.6</td>
      <td style="text-align: right">0.57795</td>
    </tr>
    <tr>
      <td style="text-align: center">5</td>
      <td style="text-align: right">0.607090867757</td>
      <td style="text-align: right">0.58745</td>
    </tr>
    <tr>
      <td style="text-align: center">6</td>
      <td style="text-align: right">0.611810074317</td>
      <td style="text-align: right">0.5918</td>
    </tr>
    <tr>
      <td style="text-align: center">7</td>
      <td style="text-align: right">0.621715017707</td>
      <td style="text-align: right">0.59885</td>
    </tr>
    <tr>
      <td style="text-align: center">8</td>
      <td style="text-align: right">0.626241528067</td>
      <td style="text-align: right">0.60425</td>
    </tr>
  </tbody>
</table>
<p><br /></p>

<p>Even for higher order Ising grids, as long as we don’t have way too highly correlated variables, we mix long enhough and we collect a sufficiently big sample size, we get pretty decent results!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[MCMC Gibbs - Code]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/02/10/Gibbs-code/"/>
    
    <updated>2014-02-10T08:01:00-08:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/02/10/Gibbs-code</id>
    
    <content type="html"><![CDATA[<h2 id="how-to-sample-a-distribution">How to sample a distribution</h2>

<p>The first method we need is to find a random assignment given a discrete distribution. For example, if we have a distribution over a single variable with cardinality 3, [p0, p1, p2] = [0.25, 0.35, 0.4] we:</p>

<ul>
  <li>create the cumulative distr =&gt; [c1, c2, c3] = [0.25, 0.60, 1.0]</li>
  <li>pick up a random number r between 0 and 1 (based on uniform dist), let’s say we get 0.43</li>
  <li>create a new array based on [c &gt;= r] =&gt; [False, True, True]</li>
  <li>the first True gives us the assignment, in this case 1 out of possible assignments (0, 1, 2).</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Sample Randomly From Given Distribution</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">randSampleDist</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">card</span><span class="p">,</span> <span class="n">probs</span><span class="p">):</span>
</span><span class="line">    <span class="n">cum_prob</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">cumsum</span><span class="p">(</span><span class="n">probs</span><span class="p">)</span>
</span><span class="line">    <span class="n">u</span> <span class="o">=</span> <span class="n">uniform</span><span class="p">(</span><span class="mf">0.</span><span class="p">,</span> <span class="nb">max</span><span class="p">(</span><span class="n">cum_prob</span><span class="p">))</span>
</span><span class="line">    <span class="n">included</span> <span class="o">=</span> <span class="n">cum_prob</span><span class="o">&gt;=</span><span class="n">u</span>
</span><span class="line">    <span class="n">sample</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">included</span><span class="o">==</span><span class="bp">True</span><span class="p">)[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="c"># get first</span>
</span><span class="line">    <span class="k">return</span> <span class="n">sample</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="find-distribution-for-a-variable-given-a-complete-assignment">Find distribution for a variable given a complete assignment</h2>

<p>Now we are going to get the distribution of a variable given that all other variables have been assigned. We operate in log space for easier computations.</p>

<p>The key is to understand that for each factor fu that includes the variable we can reduce it with the assignment (excluding the sampling variable) and marginalize for all variables (excluding the sampling variable) to come up with the distribution for that variable. Operating in log space we add this arrays of probabilities to come up with the total distribution.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Log Distribution for a Variable Given an Assignment</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">logDistAss</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sample_var</span><span class="p">,</span> <span class="n">evidence</span><span class="p">):</span>
</span><span class="line">    <span class="n">cardio</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span><span class="n">e</span><span class="o">.</span><span class="n">totCard</span><span class="p">()</span> <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">sample_vars</span><span class="p">])</span>
</span><span class="line">    <span class="n">logbp</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.</span><span class="p">]</span><span class="o">*</span><span class="n">cardio</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class="line">    <span class="k">for</span> <span class="n">fu</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">var_to_factors</span><span class="p">[</span><span class="n">sample_var</span><span class="p">]:</span>
</span><span class="line">        <span class="n">evi</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">((</span><span class="n">k</span><span class="p">,</span> <span class="n">evidence</span><span class="p">[</span><span class="n">k</span><span class="p">])</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">fu</span><span class="o">.</span><span class="n">variables</span> <span class="k">if</span> <span class="n">k</span><span class="o">!=</span> <span class="n">sample_var</span><span class="p">)</span>
</span><span class="line">        <span class="n">fu</span> <span class="o">=</span> <span class="n">FactorOperations</span><span class="o">.</span><span class="n">reduce_to_dist</span><span class="p">(</span><span class="n">fu</span><span class="p">,</span> <span class="n">evi</span><span class="p">)</span>
</span><span class="line">        <span class="n">logbp</span> <span class="o">+=</span> <span class="n">np</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">fu</span><span class="p">)</span>
</span><span class="line">    <span class="n">logbp</span> <span class="o">=</span> <span class="n">logbp</span> <span class="o">-</span> <span class="nb">min</span><span class="p">(</span><span class="n">logbp</span><span class="p">)</span> <span class="c"># to avoid underflow when back in normal space</span>
</span><span class="line">    <span class="k">return</span> <span class="n">logbp</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note three things:</p>

<ul>
  <li>that FactorOperations.extract is an added method that works the same as marginalize but marginalizing in a sweep all variables except the one to extract.</li>
  <li>.var_to_factors is a dictionary where for each variable we have a set of the factors it is involved with. This structure is computed once and allows us to compute faster the sampling process.</li>
  <li>to speed up things I have coded a utility function based on reducing a factor by evidence. It gets an assignment to all factor variables except one and produces an array with the distribution resulting for that variable.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Reducing Factor to a single var distribution</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">reduce_to_dist</span><span class="p">(</span><span class="n">fA</span><span class="p">,</span> <span class="n">evidence</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&#39;&#39;&#39;reduce factor by complete assignment to a single variable distribution&#39;&#39;&#39;</span>
</span><span class="line">    <span class="n">ass</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">fA</span><span class="o">.</span><span class="n">variables</span><span class="p">:</span>
</span><span class="line">        <span class="k">if</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">evidence</span><span class="p">:</span>
</span><span class="line">            <span class="n">ass</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">evidence</span><span class="p">[</span><span class="n">x</span><span class="p">])</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">            <span class="n">ass</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">slice</span><span class="p">(</span><span class="bp">None</span><span class="p">))</span>
</span><span class="line">    <span class="k">if</span> <span class="n">counter</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">        <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&quot;Error in observed vars&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">fA</span><span class="o">.</span><span class="n">values</span><span class="p">[</span><span class="n">ass</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="one-step-down-the-chain">One step down the Chain</h2>

<p>The Gibbs sampling process, starts with a complete assignment and ends with another complete assignment. For each variable we:</p>

<ul>
  <li>compute the distribution based on the other assigned variables, </li>
  <li>find it’s new assignment based on rolling a dice on the distribution,</li>
  <li>update the assignment with this new value so for the new iteration one variable of the assignment has changed</li>
</ul>

<p>We repeat for all variables, updating all variables in the process, until we get a newly complete assignment that corresponds to the new state in the Markov Chain.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Gibbs 1 step down the Markov Chain</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">Gibbs</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">ass</span><span class="p">):</span>
</span><span class="line">    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">v</span><span class="p">:</span>
</span><span class="line">        <span class="n">p</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">logDistAss</span><span class="p">([</span><span class="n">x</span><span class="p">],</span> <span class="n">ass</span><span class="p">)</span>
</span><span class="line">        <span class="n">ass</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">randSampleDist</span><span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">totCard</span><span class="p">(),</span> <span class="n">exp</span><span class="p">(</span><span class="n">p</span><span class="p">))</span>
</span><span class="line">    <span class="k">return</span> <span class="n">ass</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="running-around-the-chain">Running around the Chain</h2>

<p>Collecting samples from the Markov Chain is as easy as running iteratively the previous Gibbs method. We introduce two new inputs:</p>

<ul>
  <li>mix_time: how many steps to take before we think the chain has converged and we start collecting samples. Consider that at the start we are wondering near the initial assignment and to reach a ‘real’ assignment we need enough time walking around.</li>
  <li>num_samples: after mixing time, how many steps to take, how many samples to collect.</li>
</ul>

<p>The code is self explanatory:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Collecting Samples from the Makov Chain</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">sampleMarkovChain</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mix_time</span><span class="p">,</span> <span class="n">num_samples</span><span class="p">,</span> <span class="n">seed_assignment</span><span class="p">):</span>
</span><span class="line">    <span class="n">max_iter</span> <span class="o">=</span> <span class="n">mix_time</span> <span class="o">+</span> <span class="n">num_samples</span>
</span><span class="line">    <span class="n">all_samples</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">seed_assignment</span><span class="p">[</span><span class="n">e</span><span class="p">]</span> <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">seed_assignment</span><span class="p">)])</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_iter</span><span class="p">):</span>
</span><span class="line">        <span class="n">seed_assignment</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">Gibbs</span><span class="p">(</span><span class="n">seed_assignment</span><span class="p">)</span>
</span><span class="line">        <span class="n">sol</span> <span class="o">=</span> <span class="p">[</span><span class="n">seed_assignment</span><span class="p">[</span><span class="n">e</span><span class="p">]</span> <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">seed_assignment</span><span class="p">)]</span>
</span><span class="line">        <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">mix_time</span><span class="p">:</span>
</span><span class="line">            <span class="n">all_samples</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">vstack</span><span class="p">((</span><span class="n">all_samples</span><span class="p">,</span> <span class="n">sol</span><span class="p">))</span>
</span><span class="line">    <span class="k">return</span> <span class="n">all_samples</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="inference">Inference</h2>

<p>Now that we have the samples we can compute the estimated marginals by counting, for each variable, how many times each as assignment shows up.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Inference from MCMC using Gibbs Transitions</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">infere</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mix_time</span><span class="p">,</span> <span class="n">num_samples</span><span class="p">,</span> <span class="n">seed_assignment</span><span class="p">):</span>
</span><span class="line">    <span class="n">all_samples</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">sampleMarkovChain</span><span class="p">(</span><span class="n">mix_time</span><span class="p">,</span> <span class="n">num_samples</span><span class="p">,</span> <span class="n">seed_assignment</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">M</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span><span class="o">*</span><span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">V</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">x</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">v</span><span class="p">):</span>
</span><span class="line">        <span class="n">M</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">Factor</span><span class="o">.</span><span class="n">Factor</span><span class="p">([</span><span class="n">x</span><span class="p">])</span>
</span><span class="line">        <span class="n">M</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">fill_values</span><span class="p">(</span><span class="n">FactorOperations</span><span class="o">.</span><span class="n">normalize</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">bincount</span><span class="p">(</span><span class="n">all_samples</span><span class="p">[:,</span><span class="n">i</span><span class="p">])</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">float</span><span class="p">)))</span>
</span><span class="line">    <span class="k">return</span> <span class="n">M</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[MCMC Gibbs - Theory]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/02/09/MCMC-Gibbs/"/>
    
    <updated>2014-02-09T08:01:00-08:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/02/09/MCMC-Gibbs</id>
    
    <content type="html"><![CDATA[<p>In the previous three posts we saw that we can compute approximate marginals in the mini Ising grid with uneven results. The more polarized the potentials, the more contradictions in the messages passed, the more difficult to converge to the true marginals.</p>

<p>In the following posts we are going to approach this problem (computing the aproximate marginals) from a different perspective, the Monte Carlo way. Beware that my grasp of these matters is flimsy at best, so excuse any mistakes I’ll made.</p>

<h2 id="sampling-for-inference">Sampling for Inference</h2>

<p>Our PGM is based on, and is a reflection of, a joint distribution of all its variables and the independence relationships among them. And we have already seen that if we have this joint distribution we have all the information necessary to answer any questions. Now, we also saw that except for the simplest graphs it is impractical to compute this joint distribution due to its size. </p>

<p>Imagine if we could come up with a way to sample this unknown and huge distribution. A way to generate perfectly viable, realistic assignments to all the variables in the joint distribution. With a sample big enough, we can estimate the answers we need, and we could get the approximate marginals.</p>

<p>For a Bayes Network, independently of its size this is doable. We start at the root nodes (eldest parents), roll a dice to see which assignments we get to those variables, and once computed start walking down the graph rolling dice based on the reduced tables of each node. When we have assigned values to all variables we have a complete assignment to the joint distribution. With enough of these we can infere estimated parameters. </p>

<p>For a Markov Network the previous process does not work, because there are no parents, no direction of flow. It is just a bunch of nodes talking to each other without concert and whose potentials depend on each other’s assignments. An egg and chicken conundrum.</p>

<h2 id="markov-chain">Markov Chain</h2>

<p>Markov Chain Monte Carlo (MCMC) gives us a way to generate samples from the joint distribution behind a Markov net using a trick over Markov Chains. (chains and nets, even by the same guy, are unrelated concepts).</p>

<p>A Markov chain consists of a set of states, where wach state has transition probabilities specifying the probabilities of stepping to each other state from that state. We start at some initial state, and in each step we move to another state, obeying the transition probabilities. Now, <em>some</em> Markov chains have the property that if we run them (hopping around) indefinitely, it will always converge to the same stationary probability distribution $ \pi $ for the states: that is, if we run it forever, the probability of being in some state s will be the same p no matter what the initial state was. So it won’t matter where you start, or where you went, because in the end, you’ll know where you’ll end up exactly (probabilisticly speaking, that is).</p>

<p>Better explanation, tons of examples and good writting in Wikipedia. Highly informative.</p>

<p><img class="center" src="http://sotoseattle.github.io/images/feb14/markov_example.png" width="500" title="Example of Markov Chain" /></p>

<h2 id="mutating-our-pgm-into-a-markov-chain">Mutating our PGM into a Markov Chain</h2>

<p>Back to our networks and graphs. We are going to build a Markov Chain where the states from the Markov chain will correspond to complete assignments to the variables of the model. In this way the probability to pass from one state to the next one corresponds to the probability of passing from one assignment of variables to another assignment. And if the whole mess converges over time, we should reach a set of constant probabilities for each assignment possible. Alas, the joint distribution. And sampling from it would get us to a good approximations of the marginals.</p>

<p>The trick is to come up with the right transition probabilities (between complete assignments / states) so a) the chain converges and 2) to the joint distribution we are after. There are different methods to get these transition probabilities right. We start with the simples one, Gibbs.</p>

<p>For example, given a Markov network of only three nodes, a clique. Each node holds a single binary variable [0,1,2]. Each node has a singleton factor on its variable, respectively var 0: [0.4, 0.6], var 1: [0.4, 0.6] and var 2: [0.6, 0.4]. There are additional pairwise factor between each pair of variables (0,1), (0,2) and (1,2), all with the same potentials [agree with value 1.0, and disagree with value 0.2]. The representation of such PGM is very simple, three nodes fully connected.</p>

<p><img class="center" src="http://sotoseattle.github.io/images/feb14/MN_simple.png" width="300" title="Mini Markov Net" /></p>

<p>Since all variables are binary, the total possible assignments is 2^3 = 8. We construct a Markov Chain with 8 nodes, one for each assignment. The connections between these nodes, better called transitions since they are directed edges, represent the ability to pass from one assignment to another. So if I am at assignment (0,0,0) and the next assignment I get is (0,0,1), then there is a transition between them.</p>

<p>Using the Gibbs transition process (to be studied below), we can collect a lot of samples from the distribution, a lot of assignments. The order of the samples collected will tell us about the individual hops, from and to which assignments me move in a single step, giving us the transitions (connections between nodes), and just counting the times we transition between each pair of nodes we can derive the transition probabilities.</p>

<p>In the following figure I have drawn the 8 nodes of the derived Markov Chain, and only drawn the transitions of two nodes, assignments (0,0,0), and (0,0,1) for clarity. We can see that once in assignment (0,0,0) there is a high probability of staying put (86.8%), while the probability of remaining in (0,0,1) is only 1%. Also we see that the highest probability for moving from (0,0,1) is to transition to (1,1,1) with 55.8% probability. Beware that these transition probabilities are not the stationary probabilities, but used to estimate them (furthermore there are only 8 stationary probabilities, because they are the probabilities of being at that assignment).</p>

<p><img class="center" src="http://sotoseattle.github.io/images/feb14/MC_simple.png" width="400" title="Mini Markov Chain" /></p>

<p>This is an exercise to visualize how the MC from a PGM looks like. For normal PGM it is just too messy and wild, and trying to visualize is futile.</p>

<h2 id="gibbs">Gibbs</h2>

<p>We start at some randomly chosen initial state, a  randomly chosen initial assignmentto all variables in the Markov network. </p>

<p>To move to the next state, we iterate through the variables. We replace each value in turn with a newly-selected value using probabilities <em>conditional on the values of all the other variables</em> – the new values for the variables we already changed this iteration and the old values for the variables we haven’t reached yet. When we have gone through all the variables, the new values, the new assignment to all variables, becomes our new state, and we’ve made one step in the Markov chain. </p>

<p>Now for some esoteric theory. A Markov chain is regular if there exists an integer k such that, for every x, x’, the probability of getting from x to x’ in exactly k steps is &gt; 0. The key is that first we choose the k, then that should hold for every pair of states! </p>

<p>From that definition we can extract the following: an MC is regular if the following sufficient conditions are met:</p>

<ul>
  <li>
    <p>Every two states are connected (I can go from every state to any other state, with positive probability)</p>
  </li>
  <li>
    <p>For every state, there is a self-transition (there should always be a positive probability of satying put in the state).</p>
  </li>
</ul>

<p>The importance of being regular is that by article of faith a regular Markov Chain converges to a unique stationary distribution regardless of start state. Aha!</p>

<p>Our Gibbs way of sampling creates an MC (derived itself from the PGM) that is regular, and therefore it has the same stationary distribution as the distribution of our PGM. So, in the long run, I can find/collect new states/assignments that show up with probability equal to the joint distribution of the PGM. </p>

<p>Finally, as another aside, for a Markov Network, another sufficient condition is that if all factors are positive, the Gibbs chain is regular. Beware, that being regular does not mean it is efficient and mixes.</p>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Loopy Belief Propagation (III)]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/02/08/LBP-3/"/>
    
    <updated>2014-02-08T08:01:00-08:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/02/08/LBP-3</id>
    
    <content type="html"><![CDATA[<p>These are different approaches to improve convergence and accuracy of the marginals.</p>

<h2 id="smoothing-messages">1. Smoothing Messages</h2>

<p>Very easy to implement. When we compute every new message, instead of updating the delta, we update with smoothing: <code>coef*(new delta) + (1-coef)*(prev stored delta)</code>. This slows convergence in one hand but also avoids big jumps in the beliefs, giving time to achieve convergence at a more controlled pace. Trying for different coeficients I did not improve the marginals.</p>

<h2 id="tree-reparametrization">2. Tree Reparametrization</h2>

<p>Also easy to implement. Instead of using BFS for message scheduling of all nodes, we find a set of trees in the graph so all edges are covered. It is better if we have spanning trees (as long as possible). Then we propagate like with Clique Trees, only twice, forward and backward. The easiest way to get trees from a graph is using Depth First Search (DFS). Still, I don’t know how to get the minimum set of trees that encompass the whole graph, and I had to do it by hand :( Here is an example of 2 trees that span the grid:</p>

<p><img class="center" src="http://sotoseattle.github.io/images/feb14/TRP.png" width="500" title="Trees for LBP" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>DFS</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">DFS_Paths</span><span class="p">:</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">G</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">G</span> <span class="o">=</span> <span class="n">G</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">source</span> <span class="o">=</span> <span class="n">s</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">discoveryPath</span> <span class="o">=</span> <span class="p">[]</span> <span class="c"># only the forward path, add backwards</span>
</span><span class="line">        <span class="n">V</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">V</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">marked</span> <span class="o">=</span> <span class="p">[</span><span class="bp">False</span><span class="p">]</span><span class="o">*</span><span class="n">V</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">edgeTo</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span><span class="o">*</span><span class="n">V</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">dfs</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">source</span><span class="p">)</span> <span class="c"># start only at designated root</span>
</span><span class="line">        <span class="k">pass</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">v</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">marked</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">        <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">G</span><span class="o">.</span><span class="n">adj</span><span class="p">[</span><span class="n">v</span><span class="p">]:</span>
</span><span class="line">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">marked</span><span class="p">[</span><span class="n">w</span><span class="p">]</span><span class="o">==</span><span class="bp">False</span><span class="p">:</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">discoveryPath</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="n">v</span><span class="p">,</span><span class="n">w</span><span class="p">])</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">dfs</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">edgeTo</span><span class="p">[</span><span class="n">w</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
</span><span class="line">        <span class="k">pass</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">pathTo</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">v</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">marked</span><span class="p">[</span><span class="n">v</span><span class="p">]</span><span class="o">==</span><span class="bp">False</span><span class="p">:</span>
</span><span class="line">            <span class="k">return</span> <span class="bp">None</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="n">path</span> <span class="o">=</span> <span class="p">[</span><span class="n">v</span><span class="p">]</span>
</span><span class="line">            <span class="n">x</span> <span class="o">=</span> <span class="n">v</span>
</span><span class="line">            <span class="k">while</span> <span class="n">x</span> <span class="o">!=</span> <span class="bp">self</span><span class="o">.</span><span class="n">source</span><span class="p">:</span>
</span><span class="line">                <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">edgeTo</span><span class="p">[</span><span class="n">x</span><span class="p">]</span>
</span><span class="line">                <span class="n">path</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">x</span><span class="p">)</span>
</span><span class="line">            <span class="k">return</span> <span class="n">path</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When I run on indiscriminate sets of trees I converge to the bad marginals. But if I use two trees, one long spanning DFS tree plus a manually computed one for the missed edges, I get somewhat better results (sqr error from 0.99 to 0.75):</p>

<table class="widetable">
  <thead>
    <tr>
      <th style="text-align: center">var</th>
      <th style="text-align: right">exact marginal</th>
      <th style="text-align: right">approx. marg (LBP)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"> </td>
      <td style="text-align: right"> </td>
      <td style="text-align: right"> </td>
    </tr>
    <tr>
      <td style="text-align: center">0</td>
      <td style="text-align: right">0.537310955208</td>
      <td style="text-align: right">0.723905954527</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: right">0.556558936419</td>
      <td style="text-align: right">0.728300716867</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: right">0.552439017812</td>
      <td style="text-align: right">0.592195736634</td>
    </tr>
    <tr>
      <td style="text-align: center">3</td>
      <td style="text-align: right">0.573509953445</td>
      <td style="text-align: right">0.835859875384</td>
    </tr>
    <tr>
      <td style="text-align: center">4</td>
      <td style="text-align: right">0.6</td>
      <td style="text-align: right">0.911873353528</td>
    </tr>
    <tr>
      <td style="text-align: center">5</td>
      <td style="text-align: right">0.607090867757</td>
      <td style="text-align: right">0.900624901637</td>
    </tr>
    <tr>
      <td style="text-align: center">6</td>
      <td style="text-align: right">0.611810074317</td>
      <td style="text-align: right">0.8791687735</td>
    </tr>
    <tr>
      <td style="text-align: center">7</td>
      <td style="text-align: right">0.621715017707</td>
      <td style="text-align: right">0.927292899198</td>
    </tr>
    <tr>
      <td style="text-align: center">8</td>
      <td style="text-align: right">0.626241528067</td>
      <td style="text-align: right">0.905241175589</td>
    </tr>
  </tbody>
</table>
<p><br /></p>

<h2 id="residual-belief-propagation">3. Residual Belief Propagation</h2>

<p>This last effort is based on the fact that not all messgaes have the same importance. Some change the beliefs a great deal, while others are less important. It is easy to look at the way messages achieve convergence, andd see that not all reach equilibrium at the same time. The same happens with the betas.</p>

<p>What I did was implement a priority queue, and as compute each message I store it in the queue with a key that measures how much the message changed. Since all messages are univariate (check cluster graph and realize that there are only pairwise potentials), each message has two values (p, 1-p). The measure I use is the abs of the difference in p. The first pass (BFS) goes through all edges and computes all messages, but starting with the second pass, we compute only the messages that change beyond a tolerance and ordered so the more important run first. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Calibrate with RBP</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">calibrate</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">    <span class="bp">self</span><span class="o">.</span><span class="n">beta</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span><span class="o">*</span><span class="bp">self</span><span class="o">.</span><span class="n">V</span>
</span><span class="line">
</span><span class="line">    <span class="n">path</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">computePath</span><span class="p">()</span>
</span><span class="line">    <span class="n">q</span> <span class="o">=</span> <span class="n">PriorityQueue</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="n">keep_going</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">    <span class="n">cycles</span><span class="p">,</span> <span class="n">messages</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">while</span> <span class="n">keep_going</span><span class="p">:</span>
</span><span class="line">        <span class="n">cycles</span> <span class="o">+=</span><span class="mi">1</span>
</span><span class="line">        <span class="n">keep_going</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class="line">        <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">path</span><span class="p">:</span>
</span><span class="line">            <span class="n">from_v</span><span class="p">,</span> <span class="n">to_w</span> <span class="o">=</span> <span class="n">e</span>
</span><span class="line">            <span class="n">pos_to</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">adj</span><span class="p">[</span><span class="n">from_v</span><span class="p">]</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">to_w</span><span class="p">)</span>
</span><span class="line">            <span class="n">messages</span> <span class="o">+=</span><span class="mi">1</span>
</span><span class="line">            <span class="n">prev_res</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">delta</span><span class="p">[</span><span class="n">from_v</span><span class="p">][</span><span class="n">pos_to</span><span class="p">]</span><span class="o">.</span><span class="n">values</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">delta</span><span class="p">[</span><span class="n">from_v</span><span class="p">][</span><span class="n">pos_to</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">mssg</span><span class="p">(</span><span class="n">from_v</span><span class="p">,</span> <span class="n">to_w</span><span class="p">)</span>
</span><span class="line">            <span class="n">new_res</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">delta</span><span class="p">[</span><span class="n">from_v</span><span class="p">][</span><span class="n">pos_to</span><span class="p">]</span><span class="o">.</span><span class="n">values</span>
</span><span class="line">
</span><span class="line">            <span class="n">mag</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">new_res</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">prev_res</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">/</span><span class="n">prev_res</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">            <span class="k">if</span> <span class="ow">not</span> <span class="n">np</span><span class="o">.</span><span class="n">allclose</span><span class="p">(</span><span class="n">new_res</span><span class="p">,</span> <span class="n">prev_res</span><span class="p">,</span> <span class="mf">1e-6</span><span class="p">):</span>
</span><span class="line">                <span class="n">q</span><span class="o">.</span><span class="n">put</span><span class="p">({</span><span class="nb">abs</span><span class="p">(</span><span class="n">mag</span><span class="p">):[</span><span class="n">from_v</span><span class="p">,</span> <span class="n">to_w</span><span class="p">]})</span>
</span><span class="line">                <span class="n">keep_going</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="n">cycles</span><span class="o">&gt;</span><span class="mi">1000</span><span class="p">:</span>
</span><span class="line">            <span class="o">...</span>
</span><span class="line">
</span><span class="line">        <span class="n">path</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">        <span class="k">while</span> <span class="ow">not</span> <span class="n">q</span><span class="o">.</span><span class="n">empty</span><span class="p">():</span>
</span><span class="line">            <span class="n">a</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="n">get</span><span class="p">()</span>
</span><span class="line">            <span class="n">path</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">values</span><span class="p">()[</span><span class="mi">0</span><span class="p">])</span>
</span><span class="line">        <span class="n">path</span><span class="o">.</span><span class="n">reverse</span><span class="p">()</span> <span class="c"># because it is a minQ</span>
</span><span class="line">
</span><span class="line">    <span class="k">print</span> <span class="s">&#39;Cycles:&#39;</span><span class="p">,</span> <span class="n">cycles</span><span class="p">,</span> <span class="s">&#39;Messages passed&#39;</span><span class="p">,</span> <span class="n">messages</span>
</span><span class="line">    <span class="c"># compute the beliefs</span>
</span><span class="line">    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This way we only need 3 cycles and 104 messages. The first cycle goes through all 48 edges. the second also computes 48 messages but in a different order (prioritized by heuristic importance), and the third only comutes 8 messages. The results are even better:</p>

<table class="widetable">
  <thead>
    <tr>
      <th style="text-align: center">var</th>
      <th style="text-align: right">exact marginal</th>
      <th style="text-align: right">approx. marg (LBP)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"> </td>
      <td style="text-align: right"> </td>
      <td style="text-align: right"> </td>
    </tr>
    <tr>
      <td style="text-align: center">0</td>
      <td style="text-align: right">0.537310955208</td>
      <td style="text-align: right">0.614445509854</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: right">0.556558936419</td>
      <td style="text-align: right">0.632046274666</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: right">0.552439017812</td>
      <td style="text-align: right">0.592793285825</td>
    </tr>
    <tr>
      <td style="text-align: center">3</td>
      <td style="text-align: right">0.573509953445</td>
      <td style="text-align: right">0.699814842287</td>
    </tr>
    <tr>
      <td style="text-align: center">4</td>
      <td style="text-align: right">0.6</td>
      <td style="text-align: right">0.759645004711</td>
    </tr>
    <tr>
      <td style="text-align: center">5</td>
      <td style="text-align: right">0.607090867757</td>
      <td style="text-align: right">0.749109157114</td>
    </tr>
    <tr>
      <td style="text-align: center">6</td>
      <td style="text-align: right">0.611810074317</td>
      <td style="text-align: right">0.739850591712</td>
    </tr>
    <tr>
      <td style="text-align: center">7</td>
      <td style="text-align: right">0.621715017707</td>
      <td style="text-align: right">0.822523867844</td>
    </tr>
    <tr>
      <td style="text-align: center">8</td>
      <td style="text-align: right">0.626241528067</td>
      <td style="text-align: right">0.848549594174</td>
    </tr>
  </tbody>
</table>
<p><br /></p>

<p>Square distance error is 0.42. If instead of using the BSF as the initial path, we compute all messages and create an initial path based on a priority queue as before, the error can be taken further down to 0.33.</p>

<table class="widetable">
  <thead>
    <tr>
      <th style="text-align: center">var</th>
      <th style="text-align: right">exact marginal</th>
      <th style="text-align: right">approx. marg (LBP)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"> </td>
      <td style="text-align: right"> </td>
      <td style="text-align: right"> </td>
    </tr>
    <tr>
      <td style="text-align: center">0</td>
      <td style="text-align: right">0.537310955208</td>
      <td style="text-align: right">0.399020732163</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: right">0.556558936419</td>
      <td style="text-align: right">0.378280542986</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: right">0.552439017812</td>
      <td style="text-align: right">0.443100330486</td>
    </tr>
    <tr>
      <td style="text-align: center">3</td>
      <td style="text-align: right">0.573509953445</td>
      <td style="text-align: right">0.465753424658</td>
    </tr>
    <tr>
      <td style="text-align: center">4</td>
      <td style="text-align: right">0.6</td>
      <td style="text-align: right">0.641605971227</td>
    </tr>
    <tr>
      <td style="text-align: center">5</td>
      <td style="text-align: right">0.607090867757</td>
      <td style="text-align: right">0.662337662338</td>
    </tr>
    <tr>
      <td style="text-align: center">6</td>
      <td style="text-align: right">0.611810074317</td>
      <td style="text-align: right">0.641605971227</td>
    </tr>
    <tr>
      <td style="text-align: center">7</td>
      <td style="text-align: right">0.621715017707</td>
      <td style="text-align: right">0.770344431088</td>
    </tr>
    <tr>
      <td style="text-align: center">8</td>
      <td style="text-align: right">0.626241528067</td>
      <td style="text-align: right">0.719502074689</td>
    </tr>
  </tbody>
</table>
<p><br /></p>

<p>And finally, if instead of prioritizing the queue based on the importance of the messages we do it based on how each new message changes the marginalized belief of the receiving node we lower the error further to 0.24, although we need to cycle 13 times and pass 296 messages.</p>

<table class="widetable">
  <thead>
    <tr>
      <th style="text-align: center">var</th>
      <th style="text-align: right">exact marginal</th>
      <th style="text-align: right">approx. marg (LBP)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"> </td>
      <td style="text-align: right"> </td>
      <td style="text-align: right"> </td>
    </tr>
    <tr>
      <td style="text-align: center">0</td>
      <td style="text-align: right">0.537310955208</td>
      <td style="text-align: right">0.444436529385</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: right">0.556558936419</td>
      <td style="text-align: right">0.605683356431</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: right">0.552439017812</td>
      <td style="text-align: right">0.494869086601</td>
    </tr>
    <tr>
      <td style="text-align: center">3</td>
      <td style="text-align: right">0.573509953445</td>
      <td style="text-align: right">0.562421013105</td>
    </tr>
    <tr>
      <td style="text-align: center">4</td>
      <td style="text-align: right">0.6</td>
      <td style="text-align: right">0.692305538097</td>
    </tr>
    <tr>
      <td style="text-align: center">5</td>
      <td style="text-align: right">0.607090867757</td>
      <td style="text-align: right">0.64302214095</td>
    </tr>
    <tr>
      <td style="text-align: center">6</td>
      <td style="text-align: right">0.611810074317</td>
      <td style="text-align: right">0.682604471501</td>
    </tr>
    <tr>
      <td style="text-align: center">7</td>
      <td style="text-align: right">0.621715017707</td>
      <td style="text-align: right">0.745950622502</td>
    </tr>
    <tr>
      <td style="text-align: center">8</td>
      <td style="text-align: right">0.626241528067</td>
      <td style="text-align: right">0.748513253977</td>
    </tr>
  </tbody>
</table>
<p><br /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Code to compute the magnitude based on belief change</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">magnitude</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">from_v</span><span class="p">,</span> <span class="n">to_w</span><span class="p">):</span>
</span><span class="line">    <span class="n">beta</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">factors</span><span class="p">[</span><span class="n">to_w</span><span class="p">])</span>
</span><span class="line">    <span class="n">past_beta</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="n">beta</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">affected_var</span> <span class="o">=</span> <span class="p">[</span><span class="n">e</span> <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">beta</span><span class="o">.</span><span class="n">variables</span> <span class="k">if</span> <span class="n">e</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">box</span><span class="p">[</span><span class="n">from_v</span><span class="p">]]</span>
</span><span class="line">    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">adj</span><span class="p">[</span><span class="n">to_w</span><span class="p">]:</span>
</span><span class="line">        <span class="n">posX</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">adj</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">to_w</span><span class="p">)</span>
</span><span class="line">        <span class="n">delta</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">delta</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">posX</span><span class="p">]</span>
</span><span class="line">        <span class="n">beta</span> <span class="o">=</span> <span class="n">FactorOperations</span><span class="o">.</span><span class="n">multiply</span><span class="p">(</span><span class="n">beta</span><span class="p">,</span> <span class="n">delta</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span> <span class="c">#### NORMALIZING</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="n">affected_var</span><span class="o">!=</span><span class="p">[]:</span>
</span><span class="line">        <span class="n">past_beta</span> <span class="o">=</span> <span class="n">FactorOperations</span><span class="o">.</span><span class="n">marginalize</span><span class="p">(</span><span class="n">past_beta</span><span class="p">,</span> <span class="n">affected_var</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class="line">        <span class="n">beta</span> <span class="o">=</span> <span class="n">FactorOperations</span><span class="o">.</span><span class="n">marginalize</span><span class="p">(</span><span class="n">beta</span><span class="p">,</span> <span class="n">affected_var</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class="line">    <span class="n">mag</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">beta</span><span class="o">.</span><span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="n">past_beta</span><span class="o">.</span><span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">/</span><span class="n">past_beta</span><span class="o">.</span><span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">mag</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Nevertheless, although it gives good results for a 9 node Ising grid, the more the nodes the worse it works. The RBP is the best approach found and I am sure that with a better designed key for the queue (to show which messages should be prioritized) bigger grids can also be optimized.</p>

]]></content>
    
  </entry>
  
</feed>