<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[SotoSeattle]]></title>
  <link href="http://sotoseattle.github.io/atom.xml" rel="self"/>
  <link href="http://sotoseattle.github.io/"/>
  <updated>2014-10-22T08:40:04-07:00</updated>
  <id>http://sotoseattle.github.io/</id>
  <author>
    <name><![CDATA[Javier Soto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[JavaScript OO Review]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/10/20/JS-review/"/>
    
    <updated>2014-10-20T14:30:00-07:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/10/20/JS-review</id>
    
    <content type="html"><![CDATA[<p>Interestingly enough JS is class-less yet everything is an object. There are 3 ways to instantiate an object:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">newObject</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">newObject</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span> <span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">newObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="the-literal-object-pattern">The Literal Object Pattern</h3>
<p>The first one is the object literal, a self contained wrapped object with all properties held inside in key / value pairs separated by commas. Check this <a href="http://rmurphey.com/blog/2009/10/15/using-objects-to-organize-your-code/">article</a>. It is a very neat to create objects in JS, clean and encapsulated that keep the code simple and clean.</p>

<p>The last one uses the Object constructor, something similar to Ruby’s BasicObject class.</p>

<h3 id="the-constructor-pattern">The Constructor Pattern</h3>
<p>Constructors are special functions. Or seen another way, by prefixing the word <code>new</code> to a function we tell JS to instantiate an Object according to the specifications defined in the function.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">Car</span><span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">this</span><span class="p">.</span><span class="nx">model</span> <span class="o">=</span> <span class="nx">model</span><span class="p">;</span>
</span><span class="line">  <span class="k">this</span><span class="p">.</span><span class="nx">to_s</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s2">&quot;model: &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">mode</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">model_T</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Car</span><span class="p">(</span><span class="s1">&#39;Ford T&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In this manner we can define what in ruby are instance variables and methods, but here they all are properties in key value pairs, independently of them being other object or functions.</p>

<p>The main problem is that we are defining the ‘methods’ inside each object at instantiation time. In Ruby the behavior is held in the Class, a common repo for all instantiated objects derived from it.</p>

<p>Enter the prototype, another object that is common to all JS objects. When we create an object with a constructor, everything defined in the constructor’s function is available to all instances created from it, analogous to a ruby class in terms of a common repo where all objects can go to find the methods they have.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">Car</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">to_s</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s2">&quot;model: &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">mode</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="the-module-pattern">The Module Pattern</h3>

<p>The idea behind it is to encapsulate and it resembles OO practices.</p>

<blockquote><p>Variables can&#8217;t technically be declared as being public nor private and so we use function scope to simulate this concept. Within the Module pattern, variables or methods declared are only available inside the module itself thanks to closure.</p><footer><strong>Addy Osmani, Learning JavaScript Design Patterns</strong> <cite><a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript">addyosmani.com/resources/book/&hellip;</a></cite></footer></blockquote>

<p>A module template that touches on private and public variables would like the following:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">myNamespace</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">  <span class="kd">var</span> <span class="nx">myPrivateVar</span><span class="p">,</span> <span class="nx">myPrivateMethod</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// A private counter variable</span>
</span><span class="line">  <span class="nx">myPrivateVar</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// A private function which logs any arguments</span>
</span><span class="line">  <span class="nx">myPrivateMethod</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">foo</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">foo</span> <span class="p">);</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// A public variable</span>
</span><span class="line">    <span class="nx">myPublicVar</span><span class="o">:</span> <span class="s2">&quot;foo&quot;</span><span class="p">,</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// A public function utilizing privates</span>
</span><span class="line">    <span class="nx">myPublicFunction</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">bar</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">      <span class="c1">// Increment our private counter</span>
</span><span class="line">      <span class="nx">myPrivateVar</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">      <span class="c1">// Call our private method using bar</span>
</span><span class="line">      <span class="nx">myPrivateMethod</span><span class="p">(</span> <span class="nx">bar</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line"><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Inside the module we have some internal private stuff shielded from the outside, and the module returns an object with the public API and public variables. This returned object is assigned to the myNamespace variable so we access its innards as properties of the object.</p>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Installing Octopress at github.io]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/10/20/Octopress-GH/"/>
    
    <updated>2014-10-20T11:00:00-07:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/10/20/Octopress-GH</id>
    
    <content type="html"><![CDATA[<p>I am collecting posts from my previous blog, ideogrammatic.com, adding some new ones I have written over the last month and putting it all together in github.io as my personal blog.</p>

<p>I am using Octopress with a tweaked mnml theme and have got hold of a nice domain with my handle sotoseattle to point to.</p>

<p>The basic deployment of an Octopress blog into your github.io is easy, and there are many posts with the details in the Internet so I am assuming you have gone through the paces.</p>

<p>Now, if you are like me, you’ll hit problems in unexpected places. I have found that it helps to understand how Octopress and GitHub actually use git repos between them.</p>

<p>In essence you’ll end up using two different git repos inside both your Octopress code base. And the fun part is that both point to the same github repo!</p>

<p>1.- the first can be found inside the folder _deploy:</p>

<ul>
  <li><code>rake generate</code> compiles the site from all the files in the source directory (and other resources) and places everything inside the _deploy folder.</li>
  <li><code>rake deploy</code> pushes it (the files inside _deploy) up to GitHub, actually to the to origin/master branch.</li>
</ul>

<p>So, for example, if we have a custom domain and we want it to point to our github.io site, we need a CNAME file that we place inside the source folder. After rake generate and rake deploy, it will show up in the root of origin/master (and inside our _deploy folder)</p>

<p>2.- The second git repo, you create it on the root:</p>

<p>For this one we create a single branch, “source”, that holds everything (all files, source and _deploy) and we push only to origin/source. Aha!, this repo goes to the ‘source’ branch in github, the generated one goes to ‘master’. So we don’t have a master branch in this local git repo, only source, and in this way we avoid pushing it to master in origin (which already tracks the first repo!).</p>

<p>Messy explanation, I know, but once you wrap your mind around the concept of 2 different repos pointing to 2 branches of the same upstream repo, it all makes sense.</p>

<p>Now, I may be off base in this explanation, if so, please set me straight in the comments.</p>

<p>Good luck with the Octos!</p>

<p><img class="center" src="http://sotoseattle.github.io/images/Oct14/octocat_octopress.png" width="400" title="Code Fellows logo" /></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Backgrounders]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/10/17/Backgrounders/"/>
    
    <updated>2014-10-17T20:00:00-07:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/10/17/Backgrounders</id>
    
    <content type="html"><![CDATA[<p>My fellow students at Code Fellows and I have made public a set of templates under the name of “<a href="https://github.com/Backgrounders">Backgrounders</a>” that show how to set up different types of Background Jobs for delivering automatic emails with Rails. We cover the main gems: Sidekiq, Resque, and Delayed Jobs. And we have included examples for both Rails 4.1 and 4.2. It is publicly available in GitHub.</p>

<p>We hope this small public source contribution help others as a reference when dealing with background workers. Following is my contribution to the common effort:</p>

<hr />

<p><br /></p>

<h1 id="rails-42-mailer-with-sidekiq-kick-ass-with-rails-42imagesoct14nonsensepng">Rails 4.2 Mailer with Sidekiq <img src="http://sotoseattle.github.io/images/Oct14/nonsense.png" alt="kick ass with rails 4.2!" /></h1>

<p>This is a template for how to set up Rails 4.2 with background jobs from Sidekiq using Redis.</p>

<p>In a nutshell, when we create a background jobs we pass an object with the data to use to the worker. In most cases, we pass a Model object (i.e. ActiveRecord), so make things simpler we just pass the id of the object to the worker, and Rails and Sidekiq take care of everything for us (finding it in the database, serializing and de-serializing it).</p>

<p>In this template we have taken a different route. Instead of passing an existing Model object we pass an ad-hoc one, created in the spot and stored in a hash that we pass to the worked in json format. Then, it is up to us to tell the worker how to  de-serialize it, reconstituting the original hash from the json string, to be able to operate on the data passed.</p>

<p>All this will become more clear with an example.</p>

<!--more-->

<p>Our app has a simple contact page with a custom form that the user fills with some request of information. Upon submission of the form, our app will create a background job to send an email and defer its responsibilities to Sidequik.</p>

<h3 id="prep-work">1. Prep Work</h3>

<h4 id="add-letteropener-and-launchy-gem"><em>Add letter_opener and launchy gem</em></h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">gem</span> <span class="s2">&quot;letter_opener&quot;</span>
</span><span class="line"><span class="n">gem</span> <span class="s2">&quot;launchy&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Letter_Oppener allows us, in development, to simulate the process of sending the email by creating it as a temporary file. That way we avoid sending the actual email over the network, which is messy and brittle to test.</p>

<p>The Launchy gem automatically opens the created temp file in a browser window so the sending process becomes automatic and we have real time confirmation that the email was sent correctly.</p>

<p>We need to modify the ‘config/environments/development.rb’.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># to be appraised of mailing errors</span>
</span><span class="line"><span class="n">config</span><span class="o">.</span><span class="n">action_mailer</span><span class="o">.</span><span class="n">raise_delivery_errors</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class="line"><span class="c1"># to deliver to the browser instead of email</span>
</span><span class="line"><span class="n">config</span><span class="o">.</span><span class="n">action_mailer</span><span class="o">.</span><span class="n">delivery_method</span> <span class="o">=</span> <span class="ss">:letter_opener</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="mailer">2. Mailer</h3>

<h4 id="generate-mailer"><em>Generate Mailer</em></h4>

<p>We start with a basic new Rails application without controllers, models or views, and we generate a mailer.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="err">$</span> <span class="n">rails</span> <span class="n">g</span> <span class="n">mailer</span> <span class="no">VisitorMailer</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="create-mailer-action"><em>Create Mailer Action</em></h4>

<p>We pass to the Mailer action the information we need to build the email: name, email address and body of email. We make all of them available to the corresponding view (the email template) through instance variables.</p>

<p>Keep in mind that this action, ‘contact_email’, will be the one that the worker (background process) will execute.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">VisitorMailer</span> <span class="o">&lt;</span> <span class="ss">ActionMailer</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">contact_email</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class="line">    <span class="vi">@email</span> <span class="o">=</span> <span class="n">email</span>
</span><span class="line">    <span class="vi">@message</span> <span class="o">=</span> <span class="n">message</span>
</span><span class="line">    <span class="n">mail</span><span class="p">(</span><span class="ss">from</span><span class="p">:</span> <span class="vi">@email</span><span class="p">,</span>
</span><span class="line">         <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;javier@badaboom.com&#39;</span><span class="p">,</span>
</span><span class="line">         <span class="ss">subject</span><span class="p">:</span> <span class="s1">&#39;New Visitor\&#39;s Email&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="create-email-template"><em>Create EMail Template</em></h4>

<p>The view associated with the controller action is the actual template for the email to be sent. We make two versions, in html and text format, with the information passed through instance variables.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="o">&lt;!</span><span class="no">DOCTYPE</span> <span class="n">html</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">head</span><span class="o">&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="n">meta</span> <span class="n">content</span><span class="o">=</span><span class="s1">&#39;text/html; charset=UTF-8&#39;</span> <span class="n">http</span><span class="o">-</span><span class="n">equiv</span><span class="o">=</span><span class="s1">&#39;Content-Type&#39;</span> <span class="sr">/&gt;</span>
</span><span class="line"><span class="sr">  &lt;/</span><span class="n">head</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">body</span><span class="o">&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;&lt;</span><span class="sx">%= @name %&gt; (&lt;%=</span> <span class="vi">@email</span> <span class="sx">%&gt;)&lt;/h1&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class="line">      <span class="o">&lt;%=</span> <span class="vi">@message</span> <span class="sx">%&gt;</span>
</span><span class="line"><span class="sx">    &lt;/p&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="sr">/body&gt;</span>
</span><span class="line"><span class="sr">&lt;/</span><span class="n">html</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="the-resource">3. The Resource</h3>

<h4 id="generate-controller"><em>Generate Controller</em></h4>

<p>Now that the Mailer is set and done we generate the VisitorsController.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="err">$</span> <span class="n">rails</span> <span class="n">g</span> <span class="n">controller</span> <span class="n">visitors</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We add two actions. The index actions displays the basic contact form. Once submitted, it reaches the contact action where we extract the form parameters.</p>

<p>The form information is packaged into a hash and subsequently JSONified so we can pass it as an argument to the worker (a Sidekiq requirement).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">VisitorsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">index</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">contact</span>
</span><span class="line">    <span class="n">h</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">generate</span><span class="p">({</span> <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">                        <span class="s1">&#39;email&#39;</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span><span class="p">,</span>
</span><span class="line">                        <span class="s1">&#39;message&#39;</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:message</span><span class="o">]</span> <span class="p">})</span>
</span><span class="line">
</span><span class="line">    <span class="no">PostmanWorker</span><span class="o">.</span><span class="n">perform_async</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># if instead of sidekiq I was just sending email from rails</span>
</span><span class="line">    <span class="c1"># VisitorMailer.contact_email(@name, @email, @message).deliver</span>
</span><span class="line">
</span><span class="line">    <span class="n">redirect_to</span> <span class="ss">:root</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="make-a-small-form-for-the-view"><em>Make a small form for the View</em></h4>

<p>Just a simple form.</p>

<h4 id="update-the-routes"><em>Update the routes</em></h4>

<p>We haven’t done it yet and we cannot defer anymore, we need to establish our routes and root.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class="line">  <span class="n">post</span> <span class="s1">&#39;visitors/contact&#39;</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;visitors#contact&#39;</span>
</span><span class="line">  <span class="n">root</span> <span class="s1">&#39;visitors#index&#39;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="the-model"><em>The Model?</em></h4>

<p>Nope, no model. The controller just passes the information received from the form directly to the worker.</p>

<h3 id="the-background-worker">4. The background worker</h3>

<h4 id="install-sidekiq"><em>Install Sidekiq</em></h4>

<p>Add to your Gemfile and don’t forget to bundle up.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">gem</span> <span class="s1">&#39;sidekiq&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="create-a-worker"><em>Create a Worker</em></h4>

<p>We essentially follow the instructions from the Sidekiq’s readme and docs, and we create a worker responsible for delivering emails, a Postman worker.</p>

<p>The key here is that the worker needs a json object as simple as possible. Usually this would be the id from a Model object, in which case Sidekiq would serialize and de-serialize the object referenced by it.</p>

<p>In our case, the information is not stored in the database so we create a json hash, that we passed to the worker for queuing in Redis. Now, the key is that we also need to de-serialize this json object upon arrival to re-create the hash. Once re-constituted, the hash gives us access to the data we need to call the ActionMailer and deliver the email.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">PostmanWorker</span>
</span><span class="line">  <span class="kp">include</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Worker</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span>
</span><span class="line">    <span class="n">h</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">h</span><span class="p">)</span>
</span><span class="line">    <span class="no">VisitorMailer</span><span class="o">.</span><span class="n">contact_email</span><span class="p">(</span><span class="n">h</span><span class="o">[</span><span class="s1">&#39;name&#39;</span><span class="o">]</span><span class="p">,</span> <span class="n">h</span><span class="o">[</span><span class="s1">&#39;email&#39;</span><span class="o">]</span><span class="p">,</span> <span class="n">h</span><span class="o">[</span><span class="s1">&#39;message&#39;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">deliver</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The results show up in the browser when the email is sent.</p>

<h4 id="add-dashboard"><em>Add Dashboard</em></h4>

<p>This nifty tool, the Sidekiq Dashboard, runs on Sinatra, which we have to add to the Gemfile.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">gem</span> <span class="s1">&#39;sinatra&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;= 1.3.0&#39;</span><span class="p">,</span> <span class="ss">:require</span> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And we simply add it to our routes…</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;sidekiq/web&#39;</span>
</span><span class="line"><span class="n">mount</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Web</span> <span class="o">=&gt;</span> <span class="s1">&#39;/sidekiq&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>…so it becomes available in (depending on your setup) http://localhost:3000/sidekiq</p>

<p>Beware that anybody can access this dashboard once in production, so check for ways to secure its access.</p>

<h3 id="final-setup">5. Final Setup</h3>

<p>The final touches involve making sure you have bundle installed, and installing Redis if not already in place (for which I recommend to use brew on Mac OS X whenever possible to avoid headaches)</p>

<p>Then all that is left is to start each service in its own tab like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="err">$</span> <span class="n">rails</span> <span class="n">s</span>
</span><span class="line"><span class="err">$</span> <span class="n">redis</span><span class="o">-</span><span class="n">server</span>
</span><span class="line"><span class="err">$</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">sidekiq</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can also user <a href="https://github.com/ddollar/foreman">Foreman</a> and save yourself opening tabs and running things separately.</p>

<p>We haven’t included tests in this template, which is a necessary best practice to follow. I leave it up to you to BDD this template with the necessary tests.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Metaprogramming in Action]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/10/05/Metaprogramming/"/>
    
    <updated>2014-10-05T08:01:00-07:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/10/05/Metaprogramming</id>
    
    <content type="html"><![CDATA[<p>The <a href="github.com/dkubb/equalizer">Equalizer gem</a> provides a nifty example of metaprogramming.</p>

<p>It is a module that when added to your class helps define equality, equivalence and inspection methods.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">GeoLocation</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Equalizer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:latitude</span><span class="p">,</span> <span class="ss">:longitude</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:latitude</span><span class="p">,</span> <span class="ss">:longitude</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">latitude</span><span class="p">,</span> <span class="n">longitude</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@latitude</span><span class="p">,</span> <span class="vi">@longitude</span> <span class="o">=</span> <span class="n">latitude</span><span class="p">,</span> <span class="n">longitude</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">point_a</span> <span class="o">=</span> <span class="no">GeoLocation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="n">point_b</span> <span class="o">=</span> <span class="no">GeoLocation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="n">point_c</span> <span class="o">=</span> <span class="no">GeoLocation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">point_a</span><span class="o">.</span><span class="n">inspect</span>    <span class="c1"># =&gt; &quot;#&lt;GeoLocation latitude=1 longitude=2&gt;&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">point_a</span> <span class="o">==</span> <span class="n">point_b</span>           <span class="c1"># =&gt; true</span>
</span><span class="line"><span class="n">point_a</span><span class="o">.</span><span class="n">hash</span> <span class="o">==</span> <span class="n">point_b</span><span class="o">.</span><span class="n">hash</span> <span class="c1"># =&gt; true</span>
</span><span class="line"><span class="n">point_a</span><span class="o">.</span><span class="n">eql?</span><span class="p">(</span><span class="n">point_b</span><span class="p">)</span>        <span class="c1"># =&gt; true</span>
</span><span class="line"><span class="n">point_a</span><span class="o">.</span><span class="n">equal?</span><span class="p">(</span><span class="n">point_b</span><span class="p">)</span>      <span class="c1"># =&gt; false</span>
</span><span class="line">
</span><span class="line"><span class="n">point_a</span> <span class="o">==</span> <span class="n">point_c</span>           <span class="c1"># =&gt; false</span>
</span><span class="line"><span class="n">point_a</span><span class="o">.</span><span class="n">hash</span> <span class="o">==</span> <span class="n">point_c</span><span class="o">.</span><span class="n">hash</span> <span class="c1"># =&gt; false</span>
</span><span class="line"><span class="n">point_a</span><span class="o">.</span><span class="n">eql?</span><span class="p">(</span><span class="n">point_c</span><span class="p">)</span>        <span class="c1"># =&gt; false</span>
</span><span class="line"><span class="n">point_a</span><span class="o">.</span><span class="n">equal?</span><span class="p">(</span><span class="n">point_c</span><span class="p">)</span>      <span class="c1"># =&gt; false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Among other metaprogramming tricks it uses the define_method extensively. Although this is usually done to create a new named method at runtime, in this case, the method’s names are set from the start, what is created dynamically is the way the method operates.</p>

<p>For example, the cmp? (comparable?) method has a set name (cmp?) and the blocks passed is also well defined (we check that all keys of both objects return the same values), but the fact that we won’t know which keys are available to compare until runtime makes this use an example of metaprogramming.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># where we make attributes comparable</span>
</span><span class="line"><span class="k">def</span> <span class="nf">define_cmp_method</span>
</span><span class="line">  <span class="n">keys</span> <span class="o">=</span> <span class="vi">@keys</span>
</span><span class="line">  <span class="n">define_method</span><span class="p">(</span><span class="ss">:cmp?</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">comparator</span><span class="p">,</span> <span class="n">other</span><span class="o">|</span>
</span><span class="line">    <span class="n">keys</span><span class="o">.</span><span class="n">all?</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="o">|</span> <span class="nb">send</span><span class="p">(</span><span class="n">key</span><span class="p">)</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">comparator</span><span class="p">,</span> <span class="n">other</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">key</span><span class="p">))</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="kp">private</span> <span class="ss">:cmp?</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># The comparisson method</span>
</span><span class="line"><span class="k">def</span> <span class="nf">==</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
</span><span class="line">  <span class="n">other</span> <span class="o">=</span> <span class="n">coerce</span><span class="p">(</span><span class="n">other</span><span class="p">)</span> <span class="k">if</span> <span class="nb">respond_to?</span><span class="p">(</span><span class="ss">:coerce</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class="line">  <span class="n">other</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">cmp?</span><span class="p">(</span><span class="n">__method__</span><span class="p">,</span> <span class="n">other</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Two notes:</p>

<ol>
  <li>
    <p>The cmp? method is just a DRY method used to define the real comparison methods (eql? and ==). This way it is easy to extend.</p>
  </li>
  <li>
    <p>Consider also that we include this Equalizer class as an instantiated object when defining the class, so when we instantiate a new object all Equalizer methods are available as instance methods already defined for the existing instance variables.</p>
  </li>
</ol>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Back to School]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/09/15/Back-to-School/"/>
    
    <updated>2014-09-15T08:01:00-07:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/09/15/Back-to-School</id>
    
    <content type="html"><![CDATA[<p>In order to hone in my coding skills and get up to par with professional best practices I am joining the <em>Rails Dev Accelerator Course</em> imparted by <a href="http://www.codefellows.com">Code Fellows</a>.</p>

<p>Code Fellows is a start up inserted in the middle of the Amazon campus in South Lake Union. It is a dynamic environment full of energetic and passionate coders (students, staff and teachers).</p>

<p>It promises to be 8 frantic weeks of theory and practice based on all kinds of coding assignments. I’ll try to keep up blogging in the interim but please forgive me if the workload keeps me away from these posts.</p>

<p><a href="http://www.codefellows.com"><img class="center" src="http://sotoseattle.github.io/images/logos/codefellows.png" width="200" title="Code Fellows logo" /></a></p>

]]></content>
    
  </entry>
  
</feed>