<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | SotoSeattle]]></title>
  <link href="http://sotoseattle.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://sotoseattle.github.io/"/>
  <updated>2014-11-02T17:23:48-08:00</updated>
  <id>http://sotoseattle.github.io/</id>
  <author>
    <name><![CDATA[Javier Soto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ask before pushing]]></title>
    <link href="http://sotoseattle.github.io/blog/2014/09/16/git-push-confirm/"/>
    <updated>2014-09-16T08:01:00-07:00</updated>
    <id>http://sotoseattle.github.io/blog/2014/09/16/git-push-confirm</id>
    <content type="html"><![CDATA[<p>During the usual git work flow we get so used to re-keying commands that sometimes we push up without thinking. Most things are easy to fit locally in git, besides, as they say, when in doubt reset –hard. But once your code is committed up to a publicly available and centralized repo, you become the butt of jokes in the office, people point at you behind your back and changing history becomes a nightmare.</p>

<p>I have found a little trick that helps with this, git hooks!</p>

<p>Inside your .git folder there is another one, ‘hooks’, and inside, there is a treasure trove of configurable callbacks to personalize your git work flow.</p>

<p>There are many good sources in the Internet to check. Here is a good walk through: <a href="http://blog.ittybittyapps.com/blog/2013/09/03/git-pre-push/">link</a>. And this is the <a href="http://git-scm.com/book/en/Customizing-Git-Git-Hooks">Chacon bible</a> chapter about it.</p>

<p>I ended including the following file ‘.git/hooks/pre-push’, which forces a confirmation every time I intend to push to master. Many other variants are possible, like making sure that your tests have run before pushing, I recommend exploring them all.</p>

<p>```bash
#!/bin/bash</p>

<p>protected_branch=’master’
current_branch=$(git symbolic-ref HEAD | sed -e ‘s,.<em>/(.</em>),\1,’)</p>

<p>if [ $protected_branch = $current_branch ]
then
    read -p “You’re about to push master, is that what you intended? [y|n] “ -n 1 -r &lt; /dev/tty
    echo
    if echo $REPLY | grep -E ‘^[Yy]$’ &gt; /dev/null
    then
        exit 0 # push will execute
    fi
    exit 1 # push will not execute
else
    exit 0 # push will execute
fi
```</p>
]]></content>
  </entry>
  
</feed>
